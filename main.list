
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 b5 60 00 00 01 61 00 00 01 61 00 00     .P. .`...a...a..
      10:	01 61 00 00 01 61 00 00 01 61 00 00 00 00 00 00     .a...a...a......
	...
      2c:	11 4b 00 00 01 61 00 00 00 00 00 00 1d 4c 00 00     .K...a.......L..
      3c:	59 4c 00 00 01 61 00 00 01 61 00 00 01 61 00 00     YL...a...a...a..
      4c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      5c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      6c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      7c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      8c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      9c:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      ac:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      bc:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
      cc:	01 61 00 00 01 61 00 00 01 61 00 00 81 5e 00 00     .a...a...a...^..
      dc:	01 61 00 00 01 61 00 00 01 61 00 00 01 61 00 00     .a...a...a...a..
	...
     108:	5f f8 08 f1                                         _...

0000010c <send_str>:
char cmd[HISTORY_COUNT][CMDBUF_SIZE];
int cur_his=0;


void send_str(char *str)
{
     10c:	b580      	push	{r7, lr}
     10e:	b084      	sub	sp, #16
     110:	af00      	add	r7, sp, #0
     112:	6078      	str	r0, [r7, #4]
	int curr_char;
	curr_char = 0;
     114:	f04f 0300 	mov.w	r3, #0
     118:	60fb      	str	r3, [r7, #12]
	while (str[curr_char] != '\0') {
     11a:	e00a      	b.n	132 <send_str+0x26>
		send_byte(str[curr_char]);
     11c:	68fb      	ldr	r3, [r7, #12]
     11e:	687a      	ldr	r2, [r7, #4]
     120:	18d3      	adds	r3, r2, r3
     122:	781b      	ldrb	r3, [r3, #0]
     124:	4618      	mov	r0, r3
     126:	f005 ff0b 	bl	5f40 <send_byte>
		curr_char++;
     12a:	68fb      	ldr	r3, [r7, #12]
     12c:	f103 0301 	add.w	r3, r3, #1
     130:	60fb      	str	r3, [r7, #12]

void send_str(char *str)
{
	int curr_char;
	curr_char = 0;
	while (str[curr_char] != '\0') {
     132:	68fb      	ldr	r3, [r7, #12]
     134:	687a      	ldr	r2, [r7, #4]
     136:	18d3      	adds	r3, r2, r3
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b00      	cmp	r3, #0
     13c:	d1ee      	bne.n	11c <send_str+0x10>
		send_byte(str[curr_char]);
		curr_char++;
	}
}
     13e:	f107 0710 	add.w	r7, r7, #16
     142:	46bd      	mov	sp, r7
     144:	bd80      	pop	{r7, pc}
     146:	bf00      	nop

00000148 <shell>:


void shell(void *pvParameters)
{
     148:	b580      	push	{r7, lr}
     14a:	b086      	sub	sp, #24
     14c:	af00      	add	r7, sp, #0
     14e:	6078      	str	r0, [r7, #4]
	char put_ch;
	char *p = NULL;
     150:	f04f 0300 	mov.w	r3, #0
     154:	617b      	str	r3, [r7, #20]
	char *str ="\rShell>>";	
     156:	f246 1304 	movw	r3, #24836	; 0x6104
     15a:	f2c0 0300 	movt	r3, #0
     15e:	613b      	str	r3, [r7, #16]

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
		p = cmd[cur_his];
     160:	f240 4328 	movw	r3, #1064	; 0x428
     164:	f2c2 0300 	movt	r3, #8192	; 0x2000
     168:	681b      	ldr	r3, [r3, #0]
     16a:	f04f 0264 	mov.w	r2, #100	; 0x64
     16e:	fb02 f203 	mul.w	r2, r2, r3
     172:	f240 0340 	movw	r3, #64	; 0x40
     176:	f2c2 0300 	movt	r3, #8192	; 0x2000
     17a:	18d3      	adds	r3, r2, r3
     17c:	617b      	str	r3, [r7, #20]

		send_str(str);
     17e:	6938      	ldr	r0, [r7, #16]
     180:	f7ff ffc4 	bl	10c <send_str>
     184:	e000      	b.n	188 <shell+0x40>
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
				*p++ = put_ch;
				send_byte(put_ch);
			}
	
		}
     186:	bf00      	nop
		p = cmd[cur_his];

		send_str(str);

		while (1) {
			put_ch = receive_byte();			
     188:	f005 ff08 	bl	5f9c <receive_byte>
     18c:	4603      	mov	r3, r0
     18e:	73fb      	strb	r3, [r7, #15]

			if (put_ch == '\r' || put_ch == '\n') {
     190:	7bfb      	ldrb	r3, [r7, #15]
     192:	2b0d      	cmp	r3, #13
     194:	d002      	beq.n	19c <shell+0x54>
     196:	7bfb      	ldrb	r3, [r7, #15]
     198:	2b0a      	cmp	r3, #10
     19a:	d129      	bne.n	1f0 <shell+0xa8>
				*p = '\0';
     19c:	697b      	ldr	r3, [r7, #20]
     19e:	f04f 0200 	mov.w	r2, #0
     1a2:	701a      	strb	r2, [r3, #0]
				send_str(next_line);
     1a4:	f240 0000 	movw	r0, #0
     1a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     1ac:	f7ff ffae 	bl	10c <send_str>
				break;
     1b0:	bf00      	nop
{
	char put_ch;
	char *p = NULL;
	char *str ="\rShell>>";	

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
     1b2:	f240 4328 	movw	r3, #1064	; 0x428
     1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	f103 0101 	add.w	r1, r3, #1
     1c0:	f246 6367 	movw	r3, #26215	; 0x6667
     1c4:	f2c6 6366 	movt	r3, #26214	; 0x6666
     1c8:	fb83 2301 	smull	r2, r3, r3, r1
     1cc:	ea4f 02a3 	mov.w	r2, r3, asr #2
     1d0:	ea4f 73e1 	mov.w	r3, r1, asr #31
     1d4:	1ad2      	subs	r2, r2, r3
     1d6:	4613      	mov	r3, r2
     1d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
     1dc:	189b      	adds	r3, r3, r2
     1de:	ea4f 0343 	mov.w	r3, r3, lsl #1
     1e2:	1aca      	subs	r2, r1, r3
     1e4:	f240 4328 	movw	r3, #1064	; 0x428
     1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1ec:	601a      	str	r2, [r3, #0]
				send_byte(put_ch);
			}
	
		}
//		check_keyword();		
	}
     1ee:	e7b7      	b.n	160 <shell+0x18>
			if (put_ch == '\r' || put_ch == '\n') {
				*p = '\0';
				send_str(next_line);
				break;
			}
			else if (put_ch== Backspace || put_ch == '\b') {
     1f0:	7bfb      	ldrb	r3, [r7, #15]
     1f2:	2b7f      	cmp	r3, #127	; 0x7f
     1f4:	d002      	beq.n	1fc <shell+0xb4>
     1f6:	7bfb      	ldrb	r3, [r7, #15]
     1f8:	2b08      	cmp	r3, #8
     1fa:	d11b      	bne.n	234 <shell+0xec>
				if (p > cmd[cur_his]) {
     1fc:	f240 4328 	movw	r3, #1064	; 0x428
     200:	f2c2 0300 	movt	r3, #8192	; 0x2000
     204:	681b      	ldr	r3, [r3, #0]
     206:	f04f 0264 	mov.w	r2, #100	; 0x64
     20a:	fb02 f203 	mul.w	r2, r2, r3
     20e:	f240 0340 	movw	r3, #64	; 0x40
     212:	f2c2 0300 	movt	r3, #8192	; 0x2000
     216:	18d2      	adds	r2, r2, r3
     218:	697b      	ldr	r3, [r7, #20]
     21a:	429a      	cmp	r2, r3
     21c:	d228      	bcs.n	270 <shell+0x128>
					p--;
     21e:	697b      	ldr	r3, [r7, #20]
     220:	f103 33ff 	add.w	r3, r3, #4294967295
     224:	617b      	str	r3, [r7, #20]
					send_str(backspace);
     226:	f240 0004 	movw	r0, #4
     22a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     22e:	f7ff ff6d 	bl	10c <send_str>
				*p = '\0';
				send_str(next_line);
				break;
			}
			else if (put_ch== Backspace || put_ch == '\b') {
				if (p > cmd[cur_his]) {
     232:	e01d      	b.n	270 <shell+0x128>
					p--;
					send_str(backspace);
				}
			}
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
     234:	697a      	ldr	r2, [r7, #20]
     236:	f240 4328 	movw	r3, #1064	; 0x428
     23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f04f 0164 	mov.w	r1, #100	; 0x64
     244:	fb01 f103 	mul.w	r1, r1, r3
     248:	f240 0340 	movw	r3, #64	; 0x40
     24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     250:	18cb      	adds	r3, r1, r3
     252:	1ad3      	subs	r3, r2, r3
     254:	2b62      	cmp	r3, #98	; 0x62
     256:	dc96      	bgt.n	186 <shell+0x3e>
				*p++ = put_ch;
     258:	697b      	ldr	r3, [r7, #20]
     25a:	7bfa      	ldrb	r2, [r7, #15]
     25c:	701a      	strb	r2, [r3, #0]
     25e:	697b      	ldr	r3, [r7, #20]
     260:	f103 0301 	add.w	r3, r3, #1
     264:	617b      	str	r3, [r7, #20]
				send_byte(put_ch);
     266:	7bfb      	ldrb	r3, [r7, #15]
     268:	4618      	mov	r0, r3
     26a:	f005 fe69 	bl	5f40 <send_byte>
			}
	
		}
     26e:	e78a      	b.n	186 <shell+0x3e>
     270:	e789      	b.n	186 <shell+0x3e>
     272:	bf00      	nop

00000274 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     274:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     278:	f3ef 8409 	mrs	r4, PSP
     27c:	4620      	mov	r0, r4
     27e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     280:	4623      	mov	r3, r4
}
     282:	4618      	mov	r0, r3

00000284 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     284:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     286:	f383 8809 	msr	PSP, r3
     28a:	4770      	bx	lr

0000028c <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     28c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     290:	f3ef 8408 	mrs	r4, MSP
     294:	4620      	mov	r0, r4
     296:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     298:	4623      	mov	r3, r4
}
     29a:	4618      	mov	r0, r3

0000029c <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     29c:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     29e:	f383 8808 	msr	MSP, r3
     2a2:	4770      	bx	lr

000002a4 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     2a4:	b490      	push	{r4, r7}
     2a6:	b082      	sub	sp, #8
     2a8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     2aa:	f04f 0300 	mov.w	r3, #0
     2ae:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     2b0:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     2b4:	607c      	str	r4, [r7, #4]
  return(result);
     2b6:	687b      	ldr	r3, [r7, #4]
}
     2b8:	4618      	mov	r0, r3
     2ba:	f107 0708 	add.w	r7, r7, #8
     2be:	46bd      	mov	sp, r7
     2c0:	bc90      	pop	{r4, r7}
     2c2:	4770      	bx	lr

000002c4 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     2c4:	b480      	push	{r7}
     2c6:	b083      	sub	sp, #12
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	f383 8811 	msr	BASEPRI, r3
}
     2d2:	f107 070c 	add.w	r7, r7, #12
     2d6:	46bd      	mov	sp, r7
     2d8:	bc80      	pop	{r7}
     2da:	4770      	bx	lr

000002dc <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     2dc:	b490      	push	{r4, r7}
     2de:	b082      	sub	sp, #8
     2e0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     2e2:	f04f 0300 	mov.w	r3, #0
     2e6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2e8:	f3ef 8410 	mrs	r4, PRIMASK
     2ec:	607c      	str	r4, [r7, #4]
  return(result);
     2ee:	687b      	ldr	r3, [r7, #4]
}
     2f0:	4618      	mov	r0, r3
     2f2:	f107 0708 	add.w	r7, r7, #8
     2f6:	46bd      	mov	sp, r7
     2f8:	bc90      	pop	{r4, r7}
     2fa:	4770      	bx	lr

000002fc <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     304:	687b      	ldr	r3, [r7, #4]
     306:	f383 8810 	msr	PRIMASK, r3
}
     30a:	f107 070c 	add.w	r7, r7, #12
     30e:	46bd      	mov	sp, r7
     310:	bc80      	pop	{r7}
     312:	4770      	bx	lr

00000314 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     314:	b490      	push	{r4, r7}
     316:	b082      	sub	sp, #8
     318:	af00      	add	r7, sp, #0
  uint32_t result=0;
     31a:	f04f 0300 	mov.w	r3, #0
     31e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     320:	f3ef 8413 	mrs	r4, FAULTMASK
     324:	607c      	str	r4, [r7, #4]
  return(result);
     326:	687b      	ldr	r3, [r7, #4]
}
     328:	4618      	mov	r0, r3
     32a:	f107 0708 	add.w	r7, r7, #8
     32e:	46bd      	mov	sp, r7
     330:	bc90      	pop	{r4, r7}
     332:	4770      	bx	lr

00000334 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     334:	b480      	push	{r7}
     336:	b083      	sub	sp, #12
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	f383 8813 	msr	FAULTMASK, r3
}
     342:	f107 070c 	add.w	r7, r7, #12
     346:	46bd      	mov	sp, r7
     348:	bc80      	pop	{r7}
     34a:	4770      	bx	lr

0000034c <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     34c:	b490      	push	{r4, r7}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
  uint32_t result=0;
     352:	f04f 0300 	mov.w	r3, #0
     356:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     358:	f3ef 8414 	mrs	r4, CONTROL
     35c:	607c      	str	r4, [r7, #4]
  return(result);
     35e:	687b      	ldr	r3, [r7, #4]
}
     360:	4618      	mov	r0, r3
     362:	f107 0708 	add.w	r7, r7, #8
     366:	46bd      	mov	sp, r7
     368:	bc90      	pop	{r4, r7}
     36a:	4770      	bx	lr

0000036c <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     374:	687b      	ldr	r3, [r7, #4]
     376:	f383 8814 	msr	CONTROL, r3
}
     37a:	f107 070c 	add.w	r7, r7, #12
     37e:	46bd      	mov	sp, r7
     380:	bc80      	pop	{r7}
     382:	4770      	bx	lr

00000384 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     384:	b490      	push	{r4, r7}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     38c:	f04f 0300 	mov.w	r3, #0
     390:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     392:	687b      	ldr	r3, [r7, #4]
     394:	ba1c      	rev	r4, r3
     396:	60fc      	str	r4, [r7, #12]
  return(result);
     398:	68fb      	ldr	r3, [r7, #12]
}
     39a:	4618      	mov	r0, r3
     39c:	f107 0710 	add.w	r7, r7, #16
     3a0:	46bd      	mov	sp, r7
     3a2:	bc90      	pop	{r4, r7}
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop

000003a8 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     3a8:	b490      	push	{r4, r7}
     3aa:	b084      	sub	sp, #16
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     3b2:	f04f 0300 	mov.w	r3, #0
     3b6:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     3b8:	88fb      	ldrh	r3, [r7, #6]
     3ba:	ba5c      	rev16	r4, r3
     3bc:	60fc      	str	r4, [r7, #12]
  return(result);
     3be:	68fb      	ldr	r3, [r7, #12]
}
     3c0:	4618      	mov	r0, r3
     3c2:	f107 0710 	add.w	r7, r7, #16
     3c6:	46bd      	mov	sp, r7
     3c8:	bc90      	pop	{r4, r7}
     3ca:	4770      	bx	lr

000003cc <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     3cc:	b490      	push	{r4, r7}
     3ce:	b084      	sub	sp, #16
     3d0:	af00      	add	r7, sp, #0
     3d2:	4603      	mov	r3, r0
     3d4:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     3d6:	f04f 0300 	mov.w	r3, #0
     3da:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     3dc:	88fb      	ldrh	r3, [r7, #6]
     3de:	badc      	revsh	r4, r3
     3e0:	60fc      	str	r4, [r7, #12]
  return(result);
     3e2:	68fb      	ldr	r3, [r7, #12]
}
     3e4:	4618      	mov	r0, r3
     3e6:	f107 0710 	add.w	r7, r7, #16
     3ea:	46bd      	mov	sp, r7
     3ec:	bc90      	pop	{r4, r7}
     3ee:	4770      	bx	lr

000003f0 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     3f0:	b490      	push	{r4, r7}
     3f2:	b084      	sub	sp, #16
     3f4:	af00      	add	r7, sp, #0
     3f6:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     3f8:	f04f 0300 	mov.w	r3, #0
     3fc:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	fa93 f4a3 	rbit	r4, r3
     404:	60fc      	str	r4, [r7, #12]
   return(result);
     406:	68fb      	ldr	r3, [r7, #12]
}
     408:	4618      	mov	r0, r3
     40a:	f107 0710 	add.w	r7, r7, #16
     40e:	46bd      	mov	sp, r7
     410:	bc90      	pop	{r4, r7}
     412:	4770      	bx	lr

00000414 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     414:	b490      	push	{r4, r7}
     416:	b084      	sub	sp, #16
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     41c:	f04f 0300 	mov.w	r3, #0
     420:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     422:	687b      	ldr	r3, [r7, #4]
     424:	e8d3 4f4f 	ldrexb	r4, [r3]
     428:	73fc      	strb	r4, [r7, #15]
   return(result);
     42a:	7bfb      	ldrb	r3, [r7, #15]
}
     42c:	4618      	mov	r0, r3
     42e:	f107 0710 	add.w	r7, r7, #16
     432:	46bd      	mov	sp, r7
     434:	bc90      	pop	{r4, r7}
     436:	4770      	bx	lr

00000438 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     438:	b490      	push	{r4, r7}
     43a:	b084      	sub	sp, #16
     43c:	af00      	add	r7, sp, #0
     43e:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     440:	f04f 0300 	mov.w	r3, #0
     444:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     446:	687b      	ldr	r3, [r7, #4]
     448:	e8d3 4f5f 	ldrexh	r4, [r3]
     44c:	81fc      	strh	r4, [r7, #14]
   return(result);
     44e:	89fb      	ldrh	r3, [r7, #14]
}
     450:	4618      	mov	r0, r3
     452:	f107 0710 	add.w	r7, r7, #16
     456:	46bd      	mov	sp, r7
     458:	bc90      	pop	{r4, r7}
     45a:	4770      	bx	lr

0000045c <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     45c:	b490      	push	{r4, r7}
     45e:	b084      	sub	sp, #16
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     464:	f04f 0300 	mov.w	r3, #0
     468:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	e853 4f00 	ldrex	r4, [r3]
     470:	60fc      	str	r4, [r7, #12]
   return(result);
     472:	68fb      	ldr	r3, [r7, #12]
}
     474:	4618      	mov	r0, r3
     476:	f107 0710 	add.w	r7, r7, #16
     47a:	46bd      	mov	sp, r7
     47c:	bc90      	pop	{r4, r7}
     47e:	4770      	bx	lr

00000480 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     480:	b490      	push	{r4, r7}
     482:	b084      	sub	sp, #16
     484:	af00      	add	r7, sp, #0
     486:	4603      	mov	r3, r0
     488:	6039      	str	r1, [r7, #0]
     48a:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     48c:	f04f 0300 	mov.w	r3, #0
     490:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     492:	683b      	ldr	r3, [r7, #0]
     494:	79fa      	ldrb	r2, [r7, #7]
     496:	e8c3 2f44 	strexb	r4, r2, [r3]
     49a:	60fc      	str	r4, [r7, #12]
   return(result);
     49c:	68fb      	ldr	r3, [r7, #12]
}
     49e:	4618      	mov	r0, r3
     4a0:	f107 0710 	add.w	r7, r7, #16
     4a4:	46bd      	mov	sp, r7
     4a6:	bc90      	pop	{r4, r7}
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop

000004ac <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     4ac:	b490      	push	{r4, r7}
     4ae:	b084      	sub	sp, #16
     4b0:	af00      	add	r7, sp, #0
     4b2:	4603      	mov	r3, r0
     4b4:	6039      	str	r1, [r7, #0]
     4b6:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     4b8:	f04f 0300 	mov.w	r3, #0
     4bc:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	88fa      	ldrh	r2, [r7, #6]
     4c2:	e8c3 2f54 	strexh	r4, r2, [r3]
     4c6:	60fc      	str	r4, [r7, #12]
   return(result);
     4c8:	68fb      	ldr	r3, [r7, #12]
}
     4ca:	4618      	mov	r0, r3
     4cc:	f107 0710 	add.w	r7, r7, #16
     4d0:	46bd      	mov	sp, r7
     4d2:	bc90      	pop	{r4, r7}
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop

000004d8 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     4d8:	b490      	push	{r4, r7}
     4da:	b084      	sub	sp, #16
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     4e2:	f04f 0300 	mov.w	r3, #0
     4e6:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	687a      	ldr	r2, [r7, #4]
     4ec:	e843 2400 	strex	r4, r2, [r3]
     4f0:	60fc      	str	r4, [r7, #12]
   return(result);
     4f2:	68fb      	ldr	r3, [r7, #12]
}
     4f4:	4618      	mov	r0, r3
     4f6:	f107 0710 	add.w	r7, r7, #16
     4fa:	46bd      	mov	sp, r7
     4fc:	bc90      	pop	{r4, r7}
     4fe:	4770      	bx	lr

00000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     500:	b580      	push	{r7, lr}
     502:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     508:	f2c4 0302 	movt	r3, #16386	; 0x4002
     50c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     510:	f2c4 0202 	movt	r2, #16386	; 0x4002
     514:	6812      	ldr	r2, [r2, #0]
     516:	f042 0201 	orr.w	r2, r2, #1
     51a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     51c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     520:	f2c4 0202 	movt	r2, #16386	; 0x4002
     524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     528:	f2c4 0302 	movt	r3, #16386	; 0x4002
     52c:	6859      	ldr	r1, [r3, #4]
     52e:	f04f 0300 	mov.w	r3, #0
     532:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     536:	400b      	ands	r3, r1
     538:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     550:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     554:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     55a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     562:	f2c4 0202 	movt	r2, #16386	; 0x4002
     566:	6812      	ldr	r2, [r2, #0]
     568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     56c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     56e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     572:	f2c4 0302 	movt	r3, #16386	; 0x4002
     576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     57a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     57e:	6852      	ldr	r2, [r2, #4]
     580:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     584:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     58a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     58e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     592:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     594:	f000 f8ac 	bl	6f0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     598:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     59c:	f2ce 0300 	movt	r3, #57344	; 0xe000
     5a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     5a4:	609a      	str	r2, [r3, #8]
#endif
}
     5a6:	bd80      	pop	{r7, pc}

000005a8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     5a8:	b480      	push	{r7}
     5aa:	b085      	sub	sp, #20
     5ac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     5ae:	f04f 0300 	mov.w	r3, #0
     5b2:	60fb      	str	r3, [r7, #12]
     5b4:	f04f 0300 	mov.w	r3, #0
     5b8:	60bb      	str	r3, [r7, #8]
     5ba:	f04f 0300 	mov.w	r3, #0
     5be:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     5c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c8:	685b      	ldr	r3, [r3, #4]
     5ca:	f003 030c 	and.w	r3, r3, #12
     5ce:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     5d0:	68fb      	ldr	r3, [r7, #12]
     5d2:	2b04      	cmp	r3, #4
     5d4:	d00d      	beq.n	5f2 <SystemCoreClockUpdate+0x4a>
     5d6:	2b08      	cmp	r3, #8
     5d8:	d015      	beq.n	606 <SystemCoreClockUpdate+0x5e>
     5da:	2b00      	cmp	r3, #0
     5dc:	d15c      	bne.n	698 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     5de:	f240 0308 	movw	r3, #8
     5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5e6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     5ea:	f2c0 027a 	movt	r2, #122	; 0x7a
     5ee:	601a      	str	r2, [r3, #0]
      break;
     5f0:	e05c      	b.n	6ac <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     5f2:	f240 0308 	movw	r3, #8
     5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5fa:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     5fe:	f2c0 027a 	movt	r2, #122	; 0x7a
     602:	601a      	str	r2, [r3, #0]
      break;
     604:	e052      	b.n	6ac <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     60e:	685b      	ldr	r3, [r3, #4]
     610:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     614:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     61a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     61e:	685b      	ldr	r3, [r3, #4]
     620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     624:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     626:	68bb      	ldr	r3, [r7, #8]
     628:	ea4f 4393 	mov.w	r3, r3, lsr #18
     62c:	f103 0302 	add.w	r3, r3, #2
     630:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     632:	687b      	ldr	r3, [r7, #4]
     634:	2b00      	cmp	r3, #0
     636:	d10c      	bne.n	652 <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     638:	68ba      	ldr	r2, [r7, #8]
     63a:	f44f 6310 	mov.w	r3, #2304	; 0x900
     63e:	f2c0 033d 	movt	r3, #61	; 0x3d
     642:	fb03 f202 	mul.w	r2, r3, r2
     646:	f240 0308 	movw	r3, #8
     64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     64e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     650:	e02c      	b.n	6ac <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	685b      	ldr	r3, [r3, #4]
     65c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     660:	2b00      	cmp	r3, #0
     662:	d00c      	beq.n	67e <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     664:	68ba      	ldr	r2, [r7, #8]
     666:	f44f 6310 	mov.w	r3, #2304	; 0x900
     66a:	f2c0 033d 	movt	r3, #61	; 0x3d
     66e:	fb03 f202 	mul.w	r2, r3, r2
     672:	f240 0308 	movw	r3, #8
     676:	f2c2 0300 	movt	r3, #8192	; 0x2000
     67a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     67c:	e016      	b.n	6ac <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     67e:	68ba      	ldr	r2, [r7, #8]
     680:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     684:	f2c0 037a 	movt	r3, #122	; 0x7a
     688:	fb03 f202 	mul.w	r2, r3, r2
     68c:	f240 0308 	movw	r3, #8
     690:	f2c2 0300 	movt	r3, #8192	; 0x2000
     694:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     696:	e009      	b.n	6ac <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
     698:	f240 0308 	movw	r3, #8
     69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6a0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     6a4:	f2c0 027a 	movt	r2, #122	; 0x7a
     6a8:	601a      	str	r2, [r3, #0]
      break;
     6aa:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	685b      	ldr	r3, [r3, #4]
     6b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     6ba:	ea4f 1213 	mov.w	r2, r3, lsr #4
     6be:	f240 030c 	movw	r3, #12
     6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6c6:	5c9b      	ldrb	r3, [r3, r2]
     6c8:	b2db      	uxtb	r3, r3
     6ca:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     6cc:	f240 0308 	movw	r3, #8
     6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6d4:	681a      	ldr	r2, [r3, #0]
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	fa22 f203 	lsr.w	r2, r2, r3
     6dc:	f240 0308 	movw	r3, #8
     6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6e4:	601a      	str	r2, [r3, #0]
}
     6e6:	f107 0714 	add.w	r7, r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	bc80      	pop	{r7}
     6ee:	4770      	bx	lr

000006f0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     6f4:	f000 f802 	bl	6fc <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     6f8:	bd80      	pop	{r7, pc}
     6fa:	bf00      	nop

000006fc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     6fc:	b480      	push	{r7}
     6fe:	b083      	sub	sp, #12
     700:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     702:	f04f 0300 	mov.w	r3, #0
     706:	607b      	str	r3, [r7, #4]
     708:	f04f 0300 	mov.w	r3, #0
     70c:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     70e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     712:	f2c4 0302 	movt	r3, #16386	; 0x4002
     716:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     71a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     71e:	6812      	ldr	r2, [r2, #0]
     720:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     724:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     72a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72e:	681b      	ldr	r3, [r3, #0]
     730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     734:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     736:	687b      	ldr	r3, [r7, #4]
     738:	f103 0301 	add.w	r3, r3, #1
     73c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     73e:	683b      	ldr	r3, [r7, #0]
     740:	2b00      	cmp	r3, #0
     742:	d103      	bne.n	74c <SetSysClockTo72+0x50>
     744:	687b      	ldr	r3, [r7, #4]
     746:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     74a:	d1ec      	bne.n	726 <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	681b      	ldr	r3, [r3, #0]
     756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     75a:	2b00      	cmp	r3, #0
     75c:	d003      	beq.n	766 <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     75e:	f04f 0301 	mov.w	r3, #1
     762:	603b      	str	r3, [r7, #0]
     764:	e002      	b.n	76c <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     766:	f04f 0300 	mov.w	r3, #0
     76a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     76c:	683b      	ldr	r3, [r7, #0]
     76e:	2b01      	cmp	r3, #1
     770:	f040 8094 	bne.w	89c <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     778:	f2c4 0302 	movt	r3, #16386	; 0x4002
     77c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     780:	f2c4 0202 	movt	r2, #16386	; 0x4002
     784:	6812      	ldr	r2, [r2, #0]
     786:	f042 0210 	orr.w	r2, r2, #16
     78a:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     78c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     790:	f2c4 0302 	movt	r3, #16386	; 0x4002
     794:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     798:	f2c4 0202 	movt	r2, #16386	; 0x4002
     79c:	6812      	ldr	r2, [r2, #0]
     79e:	f022 0203 	bic.w	r2, r2, #3
     7a2:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     7a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     7a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     7b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7b4:	6812      	ldr	r2, [r2, #0]
     7b6:	f042 0202 	orr.w	r2, r2, #2
     7ba:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     7bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7cc:	6852      	ldr	r2, [r2, #4]
     7ce:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7e0:	6852      	ldr	r2, [r2, #4]
     7e2:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7f4:	6852      	ldr	r2, [r2, #4]
     7f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     7fa:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     7fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     800:	f2c4 0302 	movt	r3, #16386	; 0x4002
     804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     808:	f2c4 0202 	movt	r2, #16386	; 0x4002
     80c:	6852      	ldr	r2, [r2, #4]
     80e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     812:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     818:	f2c4 0302 	movt	r3, #16386	; 0x4002
     81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     820:	f2c4 0202 	movt	r2, #16386	; 0x4002
     824:	6852      	ldr	r2, [r2, #4]
     826:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     82a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     830:	f2c4 0302 	movt	r3, #16386	; 0x4002
     834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     838:	f2c4 0202 	movt	r2, #16386	; 0x4002
     83c:	6812      	ldr	r2, [r2, #0]
     83e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     842:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     844:	bf00      	nop
     846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     84a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     84e:	681b      	ldr	r3, [r3, #0]
     850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     854:	2b00      	cmp	r3, #0
     856:	d0f6      	beq.n	846 <SetSysClockTo72+0x14a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     85c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     864:	f2c4 0202 	movt	r2, #16386	; 0x4002
     868:	6852      	ldr	r2, [r2, #4]
     86a:	f022 0203 	bic.w	r2, r2, #3
     86e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     874:	f2c4 0302 	movt	r3, #16386	; 0x4002
     878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     87c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     880:	6852      	ldr	r2, [r2, #4]
     882:	f042 0202 	orr.w	r2, r2, #2
     886:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     888:	bf00      	nop
     88a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     88e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     892:	685b      	ldr	r3, [r3, #4]
     894:	f003 030c 	and.w	r3, r3, #12
     898:	2b08      	cmp	r3, #8
     89a:	d1f6      	bne.n	88a <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     89c:	f107 070c 	add.w	r7, r7, #12
     8a0:	46bd      	mov	sp, r7
     8a2:	bc80      	pop	{r7}
     8a4:	4770      	bx	lr
     8a6:	bf00      	nop
     8a8:	00006617 	.word	0x00006617
     8ac:	20000000 	.word	0x20000000
     8b0:	20000038 	.word	0x20000038
     8b4:	20000040 	.word	0x20000040
     8b8:	20004e08 	.word	0x20004e08

000008bc <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     8bc:	b480      	push	{r7}
     8be:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     8cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     8d0:	6812      	ldr	r2, [r2, #0]
     8d2:	f042 0201 	orr.w	r2, r2, #1
     8d6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     8d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     8dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     8e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8e8:	6859      	ldr	r1, [r3, #4]
     8ea:	f04f 0300 	mov.w	r3, #0
     8ee:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     8f2:	400b      	ands	r3, r1
     8f4:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     8f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     902:	f2c4 0202 	movt	r2, #16386	; 0x4002
     906:	6812      	ldr	r2, [r2, #0]
     908:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     90c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     910:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     916:	f2c4 0302 	movt	r3, #16386	; 0x4002
     91a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     91e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     922:	6812      	ldr	r2, [r2, #0]
     924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     928:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     92a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     936:	f2c4 0202 	movt	r2, #16386	; 0x4002
     93a:	6852      	ldr	r2, [r2, #4]
     93c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     940:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     946:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     94e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     950:	46bd      	mov	sp, r7
     952:	bc80      	pop	{r7}
     954:	4770      	bx	lr
     956:	bf00      	nop

00000958 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     958:	b480      	push	{r7}
     95a:	b083      	sub	sp, #12
     95c:	af00      	add	r7, sp, #0
     95e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     96c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     970:	6812      	ldr	r2, [r2, #0]
     972:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     976:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     97c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     984:	f2c4 0202 	movt	r2, #16386	; 0x4002
     988:	6812      	ldr	r2, [r2, #0]
     98a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     98e:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     990:	687b      	ldr	r3, [r7, #4]
     992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     996:	d003      	beq.n	9a0 <RCC_HSEConfig+0x48>
     998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     99c:	d00d      	beq.n	9ba <RCC_HSEConfig+0x62>
     99e:	e019      	b.n	9d4 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     9a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
     9b0:	6812      	ldr	r2, [r2, #0]
     9b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     9b6:	601a      	str	r2, [r3, #0]
      break;
     9b8:	e00d      	b.n	9d6 <RCC_HSEConfig+0x7e>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9be:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     9ca:	6812      	ldr	r2, [r2, #0]
     9cc:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     9d0:	601a      	str	r2, [r3, #0]
      break;
     9d2:	e000      	b.n	9d6 <RCC_HSEConfig+0x7e>

    default:
      break;
     9d4:	bf00      	nop
  }
}
     9d6:	f107 070c 	add.w	r7, r7, #12
     9da:	46bd      	mov	sp, r7
     9dc:	bc80      	pop	{r7}
     9de:	4770      	bx	lr

000009e0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b082      	sub	sp, #8
     9e4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     9e6:	f04f 0300 	mov.w	r3, #0
     9ea:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     9ec:	f04f 0300 	mov.w	r3, #0
     9f0:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     9f2:	f04f 0300 	mov.w	r3, #0
     9f6:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     9f8:	f04f 0031 	mov.w	r0, #49	; 0x31
     9fc:	f000 fbce 	bl	119c <RCC_GetFlagStatus>
     a00:	4603      	mov	r3, r0
     a02:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     a04:	683b      	ldr	r3, [r7, #0]
     a06:	f103 0301 	add.w	r3, r3, #1
     a0a:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     a0c:	683b      	ldr	r3, [r7, #0]
     a0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     a12:	d002      	beq.n	a1a <RCC_WaitForHSEStartUp+0x3a>
     a14:	79bb      	ldrb	r3, [r7, #6]
     a16:	2b00      	cmp	r3, #0
     a18:	d0ee      	beq.n	9f8 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     a1a:	f04f 0031 	mov.w	r0, #49	; 0x31
     a1e:	f000 fbbd 	bl	119c <RCC_GetFlagStatus>
     a22:	4603      	mov	r3, r0
     a24:	2b00      	cmp	r3, #0
     a26:	d003      	beq.n	a30 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     a28:	f04f 0301 	mov.w	r3, #1
     a2c:	71fb      	strb	r3, [r7, #7]
     a2e:	e002      	b.n	a36 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     a30:	f04f 0300 	mov.w	r3, #0
     a34:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     a36:	79fb      	ldrb	r3, [r7, #7]
}
     a38:	4618      	mov	r0, r3
     a3a:	f107 0708 	add.w	r7, r7, #8
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	bf00      	nop

00000a44 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     a44:	b480      	push	{r7}
     a46:	b085      	sub	sp, #20
     a48:	af00      	add	r7, sp, #0
     a4a:	4603      	mov	r3, r0
     a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     a4e:	f04f 0300 	mov.w	r3, #0
     a52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a58:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     a66:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     a68:	79fb      	ldrb	r3, [r7, #7]
     a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	4313      	orrs	r3, r2
     a72:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a78:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	601a      	str	r2, [r3, #0]
}
     a80:	f107 0714 	add.w	r7, r7, #20
     a84:	46bd      	mov	sp, r7
     a86:	bc80      	pop	{r7}
     a88:	4770      	bx	lr
     a8a:	bf00      	nop

00000a8c <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     a8c:	b480      	push	{r7}
     a8e:	b083      	sub	sp, #12
     a90:	af00      	add	r7, sp, #0
     a92:	4603      	mov	r3, r0
     a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     a96:	f04f 0300 	mov.w	r3, #0
     a9a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     a9e:	79fa      	ldrb	r2, [r7, #7]
     aa0:	601a      	str	r2, [r3, #0]
}
     aa2:	f107 070c 	add.w	r7, r7, #12
     aa6:	46bd      	mov	sp, r7
     aa8:	bc80      	pop	{r7}
     aaa:	4770      	bx	lr

00000aac <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     aac:	b480      	push	{r7}
     aae:	b085      	sub	sp, #20
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     ab6:	f04f 0300 	mov.w	r3, #0
     aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac4:	685b      	ldr	r3, [r3, #4]
     ac6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     ace:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     ad0:	687a      	ldr	r2, [r7, #4]
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	4313      	orrs	r3, r2
     ad6:	68fa      	ldr	r2, [r7, #12]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	f107 0714 	add.w	r7, r7, #20
     aec:	46bd      	mov	sp, r7
     aee:	bc80      	pop	{r7}
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     afe:	f04f 0360 	mov.w	r3, #96	; 0x60
     b02:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b06:	79fa      	ldrb	r2, [r7, #7]
     b08:	601a      	str	r2, [r3, #0]
}
     b0a:	f107 070c 	add.w	r7, r7, #12
     b0e:	46bd      	mov	sp, r7
     b10:	bc80      	pop	{r7}
     b12:	4770      	bx	lr

00000b14 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     b14:	b480      	push	{r7}
     b16:	b085      	sub	sp, #20
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b1c:	f04f 0300 	mov.w	r3, #0
     b20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	685b      	ldr	r3, [r3, #4]
     b2c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	f023 0303 	bic.w	r3, r3, #3
     b34:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     b36:	68fa      	ldr	r2, [r7, #12]
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	4313      	orrs	r3, r2
     b3c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b46:	68fa      	ldr	r2, [r7, #12]
     b48:	605a      	str	r2, [r3, #4]
}
     b4a:	f107 0714 	add.w	r7, r7, #20
     b4e:	46bd      	mov	sp, r7
     b50:	bc80      	pop	{r7}
     b52:	4770      	bx	lr

00000b54 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     b54:	b480      	push	{r7}
     b56:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b60:	685b      	ldr	r3, [r3, #4]
     b62:	b2db      	uxtb	r3, r3
     b64:	f003 030c 	and.w	r3, r3, #12
     b68:	b2db      	uxtb	r3, r3
}
     b6a:	4618      	mov	r0, r3
     b6c:	46bd      	mov	sp, r7
     b6e:	bc80      	pop	{r7}
     b70:	4770      	bx	lr
     b72:	bf00      	nop

00000b74 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     b74:	b480      	push	{r7}
     b76:	b085      	sub	sp, #20
     b78:	af00      	add	r7, sp, #0
     b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b7c:	f04f 0300 	mov.w	r3, #0
     b80:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b8a:	685b      	ldr	r3, [r3, #4]
     b8c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     b8e:	68fb      	ldr	r3, [r7, #12]
     b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     b94:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     b96:	68fa      	ldr	r2, [r7, #12]
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	4313      	orrs	r3, r2
     b9c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba6:	68fa      	ldr	r2, [r7, #12]
     ba8:	605a      	str	r2, [r3, #4]
}
     baa:	f107 0714 	add.w	r7, r7, #20
     bae:	46bd      	mov	sp, r7
     bb0:	bc80      	pop	{r7}
     bb2:	4770      	bx	lr

00000bb4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     bb4:	b480      	push	{r7}
     bb6:	b085      	sub	sp, #20
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     bbc:	f04f 0300 	mov.w	r3, #0
     bc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bca:	685b      	ldr	r3, [r3, #4]
     bcc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     bd4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     bd6:	68fa      	ldr	r2, [r7, #12]
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	4313      	orrs	r3, r2
     bdc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     be2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     be6:	68fa      	ldr	r2, [r7, #12]
     be8:	605a      	str	r2, [r3, #4]
}
     bea:	f107 0714 	add.w	r7, r7, #20
     bee:	46bd      	mov	sp, r7
     bf0:	bc80      	pop	{r7}
     bf2:	4770      	bx	lr

00000bf4 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     bf4:	b480      	push	{r7}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     bfc:	f04f 0300 	mov.w	r3, #0
     c00:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0a:	685b      	ldr	r3, [r3, #4]
     c0c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     c0e:	68fb      	ldr	r3, [r7, #12]
     c10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     c14:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     c1c:	68fa      	ldr	r2, [r7, #12]
     c1e:	4313      	orrs	r3, r2
     c20:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c2a:	68fa      	ldr	r2, [r7, #12]
     c2c:	605a      	str	r2, [r3, #4]
}
     c2e:	f107 0714 	add.w	r7, r7, #20
     c32:	46bd      	mov	sp, r7
     c34:	bc80      	pop	{r7}
     c36:	4770      	bx	lr

00000c38 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     c38:	b480      	push	{r7}
     c3a:	b083      	sub	sp, #12
     c3c:	af00      	add	r7, sp, #0
     c3e:	4602      	mov	r2, r0
     c40:	460b      	mov	r3, r1
     c42:	71fa      	strb	r2, [r7, #7]
     c44:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     c46:	79bb      	ldrb	r3, [r7, #6]
     c48:	2b00      	cmp	r3, #0
     c4a:	d00e      	beq.n	c6a <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     c4c:	f241 0309 	movw	r3, #4105	; 0x1009
     c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c54:	f241 0209 	movw	r2, #4105	; 0x1009
     c58:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c5c:	7812      	ldrb	r2, [r2, #0]
     c5e:	b2d1      	uxtb	r1, r2
     c60:	79fa      	ldrb	r2, [r7, #7]
     c62:	430a      	orrs	r2, r1
     c64:	b2d2      	uxtb	r2, r2
     c66:	701a      	strb	r2, [r3, #0]
     c68:	e010      	b.n	c8c <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     c6a:	f241 0309 	movw	r3, #4105	; 0x1009
     c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c72:	f241 0209 	movw	r2, #4105	; 0x1009
     c76:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c7a:	7812      	ldrb	r2, [r2, #0]
     c7c:	b2d1      	uxtb	r1, r2
     c7e:	79fa      	ldrb	r2, [r7, #7]
     c80:	ea6f 0202 	mvn.w	r2, r2
     c84:	b2d2      	uxtb	r2, r2
     c86:	400a      	ands	r2, r1
     c88:	b2d2      	uxtb	r2, r2
     c8a:	701a      	strb	r2, [r3, #0]
  }
}
     c8c:	f107 070c 	add.w	r7, r7, #12
     c90:	46bd      	mov	sp, r7
     c92:	bc80      	pop	{r7}
     c94:	4770      	bx	lr
     c96:	bf00      	nop

00000c98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     c98:	b480      	push	{r7}
     c9a:	b083      	sub	sp, #12
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     ca0:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     ca4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	601a      	str	r2, [r3, #0]
}
     cac:	f107 070c 	add.w	r7, r7, #12
     cb0:	46bd      	mov	sp, r7
     cb2:	bc80      	pop	{r7}
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop

00000cb8 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     cb8:	b480      	push	{r7}
     cba:	b085      	sub	sp, #20
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     cc0:	f04f 0300 	mov.w	r3, #0
     cc4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     cd2:	68fb      	ldr	r3, [r7, #12]
     cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     cd8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     cda:	68fa      	ldr	r2, [r7, #12]
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	4313      	orrs	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cea:	68fa      	ldr	r2, [r7, #12]
     cec:	605a      	str	r2, [r3, #4]
}
     cee:	f107 0714 	add.w	r7, r7, #20
     cf2:	46bd      	mov	sp, r7
     cf4:	bc80      	pop	{r7}
     cf6:	4770      	bx	lr

00000cf8 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     cf8:	b480      	push	{r7}
     cfa:	b083      	sub	sp, #12
     cfc:	af00      	add	r7, sp, #0
     cfe:	4603      	mov	r3, r0
     d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     d02:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d0a:	f04f 0200 	mov.w	r2, #0
     d0e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     d10:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d18:	f04f 0200 	mov.w	r2, #0
     d1c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     d1e:	79fb      	ldrb	r3, [r7, #7]
     d20:	2b01      	cmp	r3, #1
     d22:	d002      	beq.n	d2a <RCC_LSEConfig+0x32>
     d24:	2b04      	cmp	r3, #4
     d26:	d008      	beq.n	d3a <RCC_LSEConfig+0x42>
     d28:	e00f      	b.n	d4a <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     d2a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     d2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d32:	f04f 0201 	mov.w	r2, #1
     d36:	701a      	strb	r2, [r3, #0]
      break;
     d38:	e008      	b.n	d4c <RCC_LSEConfig+0x54>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     d3a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     d3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d42:	f04f 0205 	mov.w	r2, #5
     d46:	701a      	strb	r2, [r3, #0]
      break;
     d48:	e000      	b.n	d4c <RCC_LSEConfig+0x54>

    default:
      break;
     d4a:	bf00      	nop
  }
}
     d4c:	f107 070c 	add.w	r7, r7, #12
     d50:	46bd      	mov	sp, r7
     d52:	bc80      	pop	{r7}
     d54:	4770      	bx	lr
     d56:	bf00      	nop

00000d58 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     d58:	b480      	push	{r7}
     d5a:	b083      	sub	sp, #12
     d5c:	af00      	add	r7, sp, #0
     d5e:	4603      	mov	r3, r0
     d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     d62:	f44f 6390 	mov.w	r3, #1152	; 0x480
     d66:	f2c4 2342 	movt	r3, #16962	; 0x4242
     d6a:	79fa      	ldrb	r2, [r7, #7]
     d6c:	601a      	str	r2, [r3, #0]
}
     d6e:	f107 070c 	add.w	r7, r7, #12
     d72:	46bd      	mov	sp, r7
     d74:	bc80      	pop	{r7}
     d76:	4770      	bx	lr

00000d78 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     d78:	b480      	push	{r7}
     d7a:	b083      	sub	sp, #12
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d84:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d90:	6a11      	ldr	r1, [r2, #32]
     d92:	687a      	ldr	r2, [r7, #4]
     d94:	430a      	orrs	r2, r1
     d96:	621a      	str	r2, [r3, #32]
}
     d98:	f107 070c 	add.w	r7, r7, #12
     d9c:	46bd      	mov	sp, r7
     d9e:	bc80      	pop	{r7}
     da0:	4770      	bx	lr
     da2:	bf00      	nop

00000da4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     da4:	b480      	push	{r7}
     da6:	b083      	sub	sp, #12
     da8:	af00      	add	r7, sp, #0
     daa:	4603      	mov	r3, r0
     dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     dae:	f240 433c 	movw	r3, #1084	; 0x43c
     db2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     db6:	79fa      	ldrb	r2, [r7, #7]
     db8:	601a      	str	r2, [r3, #0]
}
     dba:	f107 070c 	add.w	r7, r7, #12
     dbe:	46bd      	mov	sp, r7
     dc0:	bc80      	pop	{r7}
     dc2:	4770      	bx	lr

00000dc4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     dc4:	b480      	push	{r7}
     dc6:	b087      	sub	sp, #28
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     dcc:	f04f 0300 	mov.w	r3, #0
     dd0:	617b      	str	r3, [r7, #20]
     dd2:	f04f 0300 	mov.w	r3, #0
     dd6:	613b      	str	r3, [r7, #16]
     dd8:	f04f 0300 	mov.w	r3, #0
     ddc:	60fb      	str	r3, [r7, #12]
     dde:	f04f 0300 	mov.w	r3, #0
     de2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     de8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dec:	685b      	ldr	r3, [r3, #4]
     dee:	f003 030c 	and.w	r3, r3, #12
     df2:	617b      	str	r3, [r7, #20]

  switch (tmp)
     df4:	697b      	ldr	r3, [r7, #20]
     df6:	2b04      	cmp	r3, #4
     df8:	d00a      	beq.n	e10 <RCC_GetClocksFreq+0x4c>
     dfa:	2b08      	cmp	r3, #8
     dfc:	d00f      	beq.n	e1e <RCC_GetClocksFreq+0x5a>
     dfe:	2b00      	cmp	r3, #0
     e00:	d14d      	bne.n	e9e <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     e02:	687a      	ldr	r2, [r7, #4]
     e04:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     e08:	f2c0 037a 	movt	r3, #122	; 0x7a
     e0c:	6013      	str	r3, [r2, #0]
      break;
     e0e:	e04d      	b.n	eac <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     e10:	687a      	ldr	r2, [r7, #4]
     e12:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     e16:	f2c0 037a 	movt	r3, #122	; 0x7a
     e1a:	6013      	str	r3, [r2, #0]
      break;
     e1c:	e046      	b.n	eac <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e22:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e26:	685b      	ldr	r3, [r3, #4]
     e28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     e2c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e36:	685b      	ldr	r3, [r3, #4]
     e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     e3c:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     e3e:	693b      	ldr	r3, [r7, #16]
     e40:	ea4f 4393 	mov.w	r3, r3, lsr #18
     e44:	f103 0302 	add.w	r3, r3, #2
     e48:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d109      	bne.n	e64 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     e50:	693a      	ldr	r2, [r7, #16]
     e52:	f44f 6310 	mov.w	r3, #2304	; 0x900
     e56:	f2c0 033d 	movt	r3, #61	; 0x3d
     e5a:	fb03 f202 	mul.w	r2, r3, r2
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     e62:	e023      	b.n	eac <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e6c:	685b      	ldr	r3, [r3, #4]
     e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     e72:	2b00      	cmp	r3, #0
     e74:	d009      	beq.n	e8a <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     e76:	693a      	ldr	r2, [r7, #16]
     e78:	f44f 6310 	mov.w	r3, #2304	; 0x900
     e7c:	f2c0 033d 	movt	r3, #61	; 0x3d
     e80:	fb03 f202 	mul.w	r2, r3, r2
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     e88:	e010      	b.n	eac <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     e8a:	693a      	ldr	r2, [r7, #16]
     e8c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     e90:	f2c0 037a 	movt	r3, #122	; 0x7a
     e94:	fb03 f202 	mul.w	r2, r3, r2
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     e9c:	e006      	b.n	eac <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ea4:	f2c0 037a 	movt	r3, #122	; 0x7a
     ea8:	6013      	str	r3, [r2, #0]
      break;
     eaa:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eb4:	685b      	ldr	r3, [r3, #4]
     eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     eba:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ebc:	697b      	ldr	r3, [r7, #20]
     ebe:	ea4f 1313 	mov.w	r3, r3, lsr #4
     ec2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ec4:	f240 031c 	movw	r3, #28
     ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ecc:	697a      	ldr	r2, [r7, #20]
     ece:	189b      	adds	r3, r3, r2
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	b2db      	uxtb	r3, r3
     ed4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	681a      	ldr	r2, [r3, #0]
     eda:	68bb      	ldr	r3, [r7, #8]
     edc:	fa22 f203 	lsr.w	r2, r2, r3
     ee0:	687b      	ldr	r3, [r7, #4]
     ee2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eec:	685b      	ldr	r3, [r3, #4]
     eee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     ef2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     ef4:	697b      	ldr	r3, [r7, #20]
     ef6:	ea4f 2313 	mov.w	r3, r3, lsr #8
     efa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     efc:	f240 031c 	movw	r3, #28
     f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f04:	697a      	ldr	r2, [r7, #20]
     f06:	189b      	adds	r3, r3, r2
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	b2db      	uxtb	r3, r3
     f0c:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	685a      	ldr	r2, [r3, #4]
     f12:	68bb      	ldr	r3, [r7, #8]
     f14:	fa22 f203 	lsr.w	r2, r2, r3
     f18:	687b      	ldr	r3, [r7, #4]
     f1a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f20:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f24:	685b      	ldr	r3, [r3, #4]
     f26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     f2a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     f2c:	697b      	ldr	r3, [r7, #20]
     f2e:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     f32:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     f34:	f240 031c 	movw	r3, #28
     f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f3c:	697a      	ldr	r2, [r7, #20]
     f3e:	189b      	adds	r3, r3, r2
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	b2db      	uxtb	r3, r3
     f44:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	685a      	ldr	r2, [r3, #4]
     f4a:	68bb      	ldr	r3, [r7, #8]
     f4c:	fa22 f203 	lsr.w	r2, r2, r3
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f58:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f5c:	685b      	ldr	r3, [r3, #4]
     f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     f62:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     f64:	697b      	ldr	r3, [r7, #20]
     f66:	ea4f 3393 	mov.w	r3, r3, lsr #14
     f6a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     f6c:	f240 032c 	movw	r3, #44	; 0x2c
     f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f74:	697a      	ldr	r2, [r7, #20]
     f76:	189b      	adds	r3, r3, r2
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	68da      	ldr	r2, [r3, #12]
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	fbb2 f2f3 	udiv	r2, r2, r3
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	611a      	str	r2, [r3, #16]
}
     f8c:	f107 071c 	add.w	r7, r7, #28
     f90:	46bd      	mov	sp, r7
     f92:	bc80      	pop	{r7}
     f94:	4770      	bx	lr
     f96:	bf00      	nop

00000f98 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     f98:	b480      	push	{r7}
     f9a:	b083      	sub	sp, #12
     f9c:	af00      	add	r7, sp, #0
     f9e:	6078      	str	r0, [r7, #4]
     fa0:	460b      	mov	r3, r1
     fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     fa4:	78fb      	ldrb	r3, [r7, #3]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d00c      	beq.n	fc4 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fba:	6951      	ldr	r1, [r2, #20]
     fbc:	687a      	ldr	r2, [r7, #4]
     fbe:	430a      	orrs	r2, r1
     fc0:	615a      	str	r2, [r3, #20]
     fc2:	e00d      	b.n	fe0 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fd4:	6951      	ldr	r1, [r2, #20]
     fd6:	687a      	ldr	r2, [r7, #4]
     fd8:	ea6f 0202 	mvn.w	r2, r2
     fdc:	400a      	ands	r2, r1
     fde:	615a      	str	r2, [r3, #20]
  }
}
     fe0:	f107 070c 	add.w	r7, r7, #12
     fe4:	46bd      	mov	sp, r7
     fe6:	bc80      	pop	{r7}
     fe8:	4770      	bx	lr
     fea:	bf00      	nop

00000fec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     fec:	b480      	push	{r7}
     fee:	b083      	sub	sp, #12
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
     ff4:	460b      	mov	r3, r1
     ff6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ff8:	78fb      	ldrb	r3, [r7, #3]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d00c      	beq.n	1018 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1002:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    100a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    100e:	6991      	ldr	r1, [r2, #24]
    1010:	687a      	ldr	r2, [r7, #4]
    1012:	430a      	orrs	r2, r1
    1014:	619a      	str	r2, [r3, #24]
    1016:	e00d      	b.n	1034 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    1018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1024:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1028:	6991      	ldr	r1, [r2, #24]
    102a:	687a      	ldr	r2, [r7, #4]
    102c:	ea6f 0202 	mvn.w	r2, r2
    1030:	400a      	ands	r2, r1
    1032:	619a      	str	r2, [r3, #24]
  }
}
    1034:	f107 070c 	add.w	r7, r7, #12
    1038:	46bd      	mov	sp, r7
    103a:	bc80      	pop	{r7}
    103c:	4770      	bx	lr
    103e:	bf00      	nop

00001040 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
    1048:	460b      	mov	r3, r1
    104a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    104c:	78fb      	ldrb	r3, [r7, #3]
    104e:	2b00      	cmp	r3, #0
    1050:	d00c      	beq.n	106c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    1052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1056:	f2c4 0302 	movt	r3, #16386	; 0x4002
    105a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    105e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1062:	69d1      	ldr	r1, [r2, #28]
    1064:	687a      	ldr	r2, [r7, #4]
    1066:	430a      	orrs	r2, r1
    1068:	61da      	str	r2, [r3, #28]
    106a:	e00d      	b.n	1088 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1070:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1078:	f2c4 0202 	movt	r2, #16386	; 0x4002
    107c:	69d1      	ldr	r1, [r2, #28]
    107e:	687a      	ldr	r2, [r7, #4]
    1080:	ea6f 0202 	mvn.w	r2, r2
    1084:	400a      	ands	r2, r1
    1086:	61da      	str	r2, [r3, #28]
  }
}
    1088:	f107 070c 	add.w	r7, r7, #12
    108c:	46bd      	mov	sp, r7
    108e:	bc80      	pop	{r7}
    1090:	4770      	bx	lr
    1092:	bf00      	nop

00001094 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1094:	b480      	push	{r7}
    1096:	b083      	sub	sp, #12
    1098:	af00      	add	r7, sp, #0
    109a:	6078      	str	r0, [r7, #4]
    109c:	460b      	mov	r3, r1
    109e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    10a0:	78fb      	ldrb	r3, [r7, #3]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d00c      	beq.n	10c0 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    10a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10b6:	68d1      	ldr	r1, [r2, #12]
    10b8:	687a      	ldr	r2, [r7, #4]
    10ba:	430a      	orrs	r2, r1
    10bc:	60da      	str	r2, [r3, #12]
    10be:	e00d      	b.n	10dc <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    10c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10d0:	68d1      	ldr	r1, [r2, #12]
    10d2:	687a      	ldr	r2, [r7, #4]
    10d4:	ea6f 0202 	mvn.w	r2, r2
    10d8:	400a      	ands	r2, r1
    10da:	60da      	str	r2, [r3, #12]
  }
}
    10dc:	f107 070c 	add.w	r7, r7, #12
    10e0:	46bd      	mov	sp, r7
    10e2:	bc80      	pop	{r7}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    10e8:	b480      	push	{r7}
    10ea:	b083      	sub	sp, #12
    10ec:	af00      	add	r7, sp, #0
    10ee:	6078      	str	r0, [r7, #4]
    10f0:	460b      	mov	r3, r1
    10f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    10f4:	78fb      	ldrb	r3, [r7, #3]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d00c      	beq.n	1114 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    10fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1102:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1106:	f2c4 0202 	movt	r2, #16386	; 0x4002
    110a:	6911      	ldr	r1, [r2, #16]
    110c:	687a      	ldr	r2, [r7, #4]
    110e:	430a      	orrs	r2, r1
    1110:	611a      	str	r2, [r3, #16]
    1112:	e00d      	b.n	1130 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    1114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1118:	f2c4 0302 	movt	r3, #16386	; 0x4002
    111c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1120:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1124:	6911      	ldr	r1, [r2, #16]
    1126:	687a      	ldr	r2, [r7, #4]
    1128:	ea6f 0202 	mvn.w	r2, r2
    112c:	400a      	ands	r2, r1
    112e:	611a      	str	r2, [r3, #16]
  }
}
    1130:	f107 070c 	add.w	r7, r7, #12
    1134:	46bd      	mov	sp, r7
    1136:	bc80      	pop	{r7}
    1138:	4770      	bx	lr
    113a:	bf00      	nop

0000113c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    113c:	b480      	push	{r7}
    113e:	b083      	sub	sp, #12
    1140:	af00      	add	r7, sp, #0
    1142:	4603      	mov	r3, r0
    1144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    1146:	f44f 6388 	mov.w	r3, #1088	; 0x440
    114a:	f2c4 2342 	movt	r3, #16962	; 0x4242
    114e:	79fa      	ldrb	r2, [r7, #7]
    1150:	601a      	str	r2, [r3, #0]
}
    1152:	f107 070c 	add.w	r7, r7, #12
    1156:	46bd      	mov	sp, r7
    1158:	bc80      	pop	{r7}
    115a:	4770      	bx	lr

0000115c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    115c:	b480      	push	{r7}
    115e:	b083      	sub	sp, #12
    1160:	af00      	add	r7, sp, #0
    1162:	4603      	mov	r3, r0
    1164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    1166:	f04f 034c 	mov.w	r3, #76	; 0x4c
    116a:	f2c4 2342 	movt	r3, #16962	; 0x4242
    116e:	79fa      	ldrb	r2, [r7, #7]
    1170:	601a      	str	r2, [r3, #0]
}
    1172:	f107 070c 	add.w	r7, r7, #12
    1176:	46bd      	mov	sp, r7
    1178:	bc80      	pop	{r7}
    117a:	4770      	bx	lr

0000117c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    117c:	b480      	push	{r7}
    117e:	b083      	sub	sp, #12
    1180:	af00      	add	r7, sp, #0
    1182:	4603      	mov	r3, r0
    1184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    1186:	f241 0307 	movw	r3, #4103	; 0x1007
    118a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    118e:	79fa      	ldrb	r2, [r7, #7]
    1190:	701a      	strb	r2, [r3, #0]
}
    1192:	f107 070c 	add.w	r7, r7, #12
    1196:	46bd      	mov	sp, r7
    1198:	bc80      	pop	{r7}
    119a:	4770      	bx	lr

0000119c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    119c:	b480      	push	{r7}
    119e:	b087      	sub	sp, #28
    11a0:	af00      	add	r7, sp, #0
    11a2:	4603      	mov	r3, r0
    11a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    11a6:	f04f 0300 	mov.w	r3, #0
    11aa:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    11ac:	f04f 0300 	mov.w	r3, #0
    11b0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    11b2:	f04f 0300 	mov.w	r3, #0
    11b6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    11b8:	79fb      	ldrb	r3, [r7, #7]
    11ba:	ea4f 1353 	mov.w	r3, r3, lsr #5
    11be:	b2db      	uxtb	r3, r3
    11c0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	2b01      	cmp	r3, #1
    11c6:	d106      	bne.n	11d6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    11c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	617b      	str	r3, [r7, #20]
    11d4:	e00f      	b.n	11f6 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	2b02      	cmp	r3, #2
    11da:	d106      	bne.n	11ea <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    11dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    11e4:	6a1b      	ldr	r3, [r3, #32]
    11e6:	617b      	str	r3, [r7, #20]
    11e8:	e005      	b.n	11f6 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    11ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
    11f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11f4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    11f6:	79fb      	ldrb	r3, [r7, #7]
    11f8:	f003 031f 	and.w	r3, r3, #31
    11fc:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    11fe:	68fb      	ldr	r3, [r7, #12]
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	fa22 f303 	lsr.w	r3, r2, r3
    1206:	f003 0301 	and.w	r3, r3, #1
    120a:	b2db      	uxtb	r3, r3
    120c:	2b00      	cmp	r3, #0
    120e:	d003      	beq.n	1218 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    1210:	f04f 0301 	mov.w	r3, #1
    1214:	74fb      	strb	r3, [r7, #19]
    1216:	e002      	b.n	121e <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    1218:	f04f 0300 	mov.w	r3, #0
    121c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    121e:	7cfb      	ldrb	r3, [r7, #19]
}
    1220:	4618      	mov	r0, r3
    1222:	f107 071c 	add.w	r7, r7, #28
    1226:	46bd      	mov	sp, r7
    1228:	bc80      	pop	{r7}
    122a:	4770      	bx	lr

0000122c <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    122c:	b480      	push	{r7}
    122e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1234:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    123c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1240:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1242:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1246:	625a      	str	r2, [r3, #36]	; 0x24
}
    1248:	46bd      	mov	sp, r7
    124a:	bc80      	pop	{r7}
    124c:	4770      	bx	lr
    124e:	bf00      	nop

00001250 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1250:	b480      	push	{r7}
    1252:	b085      	sub	sp, #20
    1254:	af00      	add	r7, sp, #0
    1256:	4603      	mov	r3, r0
    1258:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    125a:	f04f 0300 	mov.w	r3, #0
    125e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1264:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1268:	689a      	ldr	r2, [r3, #8]
    126a:	79fb      	ldrb	r3, [r7, #7]
    126c:	4013      	ands	r3, r2
    126e:	2b00      	cmp	r3, #0
    1270:	d003      	beq.n	127a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    1272:	f04f 0301 	mov.w	r3, #1
    1276:	73fb      	strb	r3, [r7, #15]
    1278:	e002      	b.n	1280 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    127a:	f04f 0300 	mov.w	r3, #0
    127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1280:	7bfb      	ldrb	r3, [r7, #15]
}
    1282:	4618      	mov	r0, r3
    1284:	f107 0714 	add.w	r7, r7, #20
    1288:	46bd      	mov	sp, r7
    128a:	bc80      	pop	{r7}
    128c:	4770      	bx	lr
    128e:	bf00      	nop

00001290 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1290:	b480      	push	{r7}
    1292:	b083      	sub	sp, #12
    1294:	af00      	add	r7, sp, #0
    1296:	4603      	mov	r3, r0
    1298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    129a:	f241 030a 	movw	r3, #4106	; 0x100a
    129e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    12a2:	79fa      	ldrb	r2, [r7, #7]
    12a4:	701a      	strb	r2, [r3, #0]
}
    12a6:	f107 070c 	add.w	r7, r7, #12
    12aa:	46bd      	mov	sp, r7
    12ac:	bc80      	pop	{r7}
    12ae:	4770      	bx	lr

000012b0 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	b082      	sub	sp, #8
    12b4:	af00      	add	r7, sp, #0
    12b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    12b8:	687a      	ldr	r2, [r7, #4]
    12ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
    12be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    12c2:	429a      	cmp	r2, r3
    12c4:	d10c      	bne.n	12e0 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    12c6:	f04f 0004 	mov.w	r0, #4
    12ca:	f04f 0101 	mov.w	r1, #1
    12ce:	f7ff fee1 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    12d2:	f04f 0004 	mov.w	r0, #4
    12d6:	f04f 0100 	mov.w	r1, #0
    12da:	f7ff fedb 	bl	1094 <RCC_APB2PeriphResetCmd>
    12de:	e076      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    12e0:	687a      	ldr	r2, [r7, #4]
    12e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    12e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    12ea:	429a      	cmp	r2, r3
    12ec:	d10c      	bne.n	1308 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    12ee:	f04f 0008 	mov.w	r0, #8
    12f2:	f04f 0101 	mov.w	r1, #1
    12f6:	f7ff fecd 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    12fa:	f04f 0008 	mov.w	r0, #8
    12fe:	f04f 0100 	mov.w	r1, #0
    1302:	f7ff fec7 	bl	1094 <RCC_APB2PeriphResetCmd>
    1306:	e062      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    1308:	687a      	ldr	r2, [r7, #4]
    130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    130e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1312:	429a      	cmp	r2, r3
    1314:	d10c      	bne.n	1330 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1316:	f04f 0010 	mov.w	r0, #16
    131a:	f04f 0101 	mov.w	r1, #1
    131e:	f7ff feb9 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    1322:	f04f 0010 	mov.w	r0, #16
    1326:	f04f 0100 	mov.w	r1, #0
    132a:	f7ff feb3 	bl	1094 <RCC_APB2PeriphResetCmd>
    132e:	e04e      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    1330:	687a      	ldr	r2, [r7, #4]
    1332:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1336:	f2c4 0301 	movt	r3, #16385	; 0x4001
    133a:	429a      	cmp	r2, r3
    133c:	d10c      	bne.n	1358 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    133e:	f04f 0020 	mov.w	r0, #32
    1342:	f04f 0101 	mov.w	r1, #1
    1346:	f7ff fea5 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    134a:	f04f 0020 	mov.w	r0, #32
    134e:	f04f 0100 	mov.w	r1, #0
    1352:	f7ff fe9f 	bl	1094 <RCC_APB2PeriphResetCmd>
    1356:	e03a      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOE)
    1358:	687a      	ldr	r2, [r7, #4]
    135a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    135e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1362:	429a      	cmp	r2, r3
    1364:	d10c      	bne.n	1380 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1366:	f04f 0040 	mov.w	r0, #64	; 0x40
    136a:	f04f 0101 	mov.w	r1, #1
    136e:	f7ff fe91 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    1372:	f04f 0040 	mov.w	r0, #64	; 0x40
    1376:	f04f 0100 	mov.w	r1, #0
    137a:	f7ff fe8b 	bl	1094 <RCC_APB2PeriphResetCmd>
    137e:	e026      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOF)
    1380:	687a      	ldr	r2, [r7, #4]
    1382:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    1386:	f2c4 0301 	movt	r3, #16385	; 0x4001
    138a:	429a      	cmp	r2, r3
    138c:	d10c      	bne.n	13a8 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    138e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1392:	f04f 0101 	mov.w	r1, #1
    1396:	f7ff fe7d 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    139a:	f04f 0080 	mov.w	r0, #128	; 0x80
    139e:	f04f 0100 	mov.w	r1, #0
    13a2:	f7ff fe77 	bl	1094 <RCC_APB2PeriphResetCmd>
    13a6:	e012      	b.n	13ce <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    13a8:	687a      	ldr	r2, [r7, #4]
    13aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    13ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    13b2:	429a      	cmp	r2, r3
    13b4:	d10b      	bne.n	13ce <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    13b6:	f44f 7080 	mov.w	r0, #256	; 0x100
    13ba:	f04f 0101 	mov.w	r1, #1
    13be:	f7ff fe69 	bl	1094 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    13c2:	f44f 7080 	mov.w	r0, #256	; 0x100
    13c6:	f04f 0100 	mov.w	r1, #0
    13ca:	f7ff fe63 	bl	1094 <RCC_APB2PeriphResetCmd>
    }
  }
}
    13ce:	f107 0708 	add.w	r7, r7, #8
    13d2:	46bd      	mov	sp, r7
    13d4:	bd80      	pop	{r7, pc}
    13d6:	bf00      	nop

000013d8 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    13d8:	b580      	push	{r7, lr}
    13da:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    13dc:	f04f 0001 	mov.w	r0, #1
    13e0:	f04f 0101 	mov.w	r1, #1
    13e4:	f7ff fe56 	bl	1094 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    13e8:	f04f 0001 	mov.w	r0, #1
    13ec:	f04f 0100 	mov.w	r1, #0
    13f0:	f7ff fe50 	bl	1094 <RCC_APB2PeriphResetCmd>
}
    13f4:	bd80      	pop	{r7, pc}
    13f6:	bf00      	nop

000013f8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    13f8:	b480      	push	{r7}
    13fa:	b089      	sub	sp, #36	; 0x24
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    1400:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1402:	f04f 0300 	mov.w	r3, #0
    1406:	61fb      	str	r3, [r7, #28]
    1408:	f04f 0300 	mov.w	r3, #0
    140c:	613b      	str	r3, [r7, #16]
    140e:	f04f 0300 	mov.w	r3, #0
    1412:	61bb      	str	r3, [r7, #24]
    1414:	f04f 0300 	mov.w	r3, #0
    1418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    141a:	f04f 0300 	mov.w	r3, #0
    141e:	617b      	str	r3, [r7, #20]
    1420:	f04f 0300 	mov.w	r3, #0
    1424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1426:	683b      	ldr	r3, [r7, #0]
    1428:	78db      	ldrb	r3, [r3, #3]
    142a:	f003 030f 	and.w	r3, r3, #15
    142e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1430:	683b      	ldr	r3, [r7, #0]
    1432:	78db      	ldrb	r3, [r3, #3]
    1434:	f003 0310 	and.w	r3, r3, #16
    1438:	2b00      	cmp	r3, #0
    143a:	d004      	beq.n	1446 <GPIO_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	789b      	ldrb	r3, [r3, #2]
    1440:	69fa      	ldr	r2, [r7, #28]
    1442:	4313      	orrs	r3, r2
    1444:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1446:	683b      	ldr	r3, [r7, #0]
    1448:	881b      	ldrh	r3, [r3, #0]
    144a:	b2db      	uxtb	r3, r3
    144c:	2b00      	cmp	r3, #0
    144e:	d04e      	beq.n	14ee <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1456:	f04f 0300 	mov.w	r3, #0
    145a:	61bb      	str	r3, [r7, #24]
    145c:	e041      	b.n	14e2 <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    145e:	69bb      	ldr	r3, [r7, #24]
    1460:	f04f 0201 	mov.w	r2, #1
    1464:	fa02 f303 	lsl.w	r3, r2, r3
    1468:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	881b      	ldrh	r3, [r3, #0]
    146e:	461a      	mov	r2, r3
    1470:	68fb      	ldr	r3, [r7, #12]
    1472:	4013      	ands	r3, r2
    1474:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1476:	693a      	ldr	r2, [r7, #16]
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	429a      	cmp	r2, r3
    147c:	d12d      	bne.n	14da <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    147e:	69bb      	ldr	r3, [r7, #24]
    1480:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1484:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	f04f 020f 	mov.w	r2, #15
    148c:	fa02 f303 	lsl.w	r3, r2, r3
    1490:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	ea6f 0303 	mvn.w	r3, r3
    1498:	697a      	ldr	r2, [r7, #20]
    149a:	4013      	ands	r3, r2
    149c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    149e:	68fb      	ldr	r3, [r7, #12]
    14a0:	69fa      	ldr	r2, [r7, #28]
    14a2:	fa02 f303 	lsl.w	r3, r2, r3
    14a6:	697a      	ldr	r2, [r7, #20]
    14a8:	4313      	orrs	r3, r2
    14aa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	78db      	ldrb	r3, [r3, #3]
    14b0:	2b28      	cmp	r3, #40	; 0x28
    14b2:	d107      	bne.n	14c4 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    14b4:	69bb      	ldr	r3, [r7, #24]
    14b6:	f04f 0201 	mov.w	r2, #1
    14ba:	fa02 f203 	lsl.w	r2, r2, r3
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	615a      	str	r2, [r3, #20]
    14c2:	e00a      	b.n	14da <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    14c4:	683b      	ldr	r3, [r7, #0]
    14c6:	78db      	ldrb	r3, [r3, #3]
    14c8:	2b48      	cmp	r3, #72	; 0x48
    14ca:	d106      	bne.n	14da <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    14cc:	69bb      	ldr	r3, [r7, #24]
    14ce:	f04f 0201 	mov.w	r2, #1
    14d2:	fa02 f203 	lsl.w	r2, r2, r3
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    14da:	69bb      	ldr	r3, [r7, #24]
    14dc:	f103 0301 	add.w	r3, r3, #1
    14e0:	61bb      	str	r3, [r7, #24]
    14e2:	69bb      	ldr	r3, [r7, #24]
    14e4:	2b07      	cmp	r3, #7
    14e6:	d9ba      	bls.n	145e <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	697a      	ldr	r2, [r7, #20]
    14ec:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    14ee:	683b      	ldr	r3, [r7, #0]
    14f0:	881b      	ldrh	r3, [r3, #0]
    14f2:	2bff      	cmp	r3, #255	; 0xff
    14f4:	d953      	bls.n	159e <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	685b      	ldr	r3, [r3, #4]
    14fa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    14fc:	f04f 0300 	mov.w	r3, #0
    1500:	61bb      	str	r3, [r7, #24]
    1502:	e046      	b.n	1592 <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1504:	69bb      	ldr	r3, [r7, #24]
    1506:	f103 0308 	add.w	r3, r3, #8
    150a:	f04f 0201 	mov.w	r2, #1
    150e:	fa02 f303 	lsl.w	r3, r2, r3
    1512:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1514:	683b      	ldr	r3, [r7, #0]
    1516:	881b      	ldrh	r3, [r3, #0]
    1518:	461a      	mov	r2, r3
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	4013      	ands	r3, r2
    151e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1520:	693a      	ldr	r2, [r7, #16]
    1522:	68fb      	ldr	r3, [r7, #12]
    1524:	429a      	cmp	r2, r3
    1526:	d130      	bne.n	158a <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    1528:	69bb      	ldr	r3, [r7, #24]
    152a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    152e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	f04f 020f 	mov.w	r2, #15
    1536:	fa02 f303 	lsl.w	r3, r2, r3
    153a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    153c:	68bb      	ldr	r3, [r7, #8]
    153e:	ea6f 0303 	mvn.w	r3, r3
    1542:	697a      	ldr	r2, [r7, #20]
    1544:	4013      	ands	r3, r2
    1546:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1548:	68fb      	ldr	r3, [r7, #12]
    154a:	69fa      	ldr	r2, [r7, #28]
    154c:	fa02 f303 	lsl.w	r3, r2, r3
    1550:	697a      	ldr	r2, [r7, #20]
    1552:	4313      	orrs	r3, r2
    1554:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1556:	683b      	ldr	r3, [r7, #0]
    1558:	78db      	ldrb	r3, [r3, #3]
    155a:	2b28      	cmp	r3, #40	; 0x28
    155c:	d108      	bne.n	1570 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    155e:	69bb      	ldr	r3, [r7, #24]
    1560:	f103 0308 	add.w	r3, r3, #8
    1564:	f04f 0201 	mov.w	r2, #1
    1568:	fa02 f203 	lsl.w	r2, r2, r3
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1570:	683b      	ldr	r3, [r7, #0]
    1572:	78db      	ldrb	r3, [r3, #3]
    1574:	2b48      	cmp	r3, #72	; 0x48
    1576:	d108      	bne.n	158a <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1578:	69bb      	ldr	r3, [r7, #24]
    157a:	f103 0308 	add.w	r3, r3, #8
    157e:	f04f 0201 	mov.w	r2, #1
    1582:	fa02 f203 	lsl.w	r2, r2, r3
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    158a:	69bb      	ldr	r3, [r7, #24]
    158c:	f103 0301 	add.w	r3, r3, #1
    1590:	61bb      	str	r3, [r7, #24]
    1592:	69bb      	ldr	r3, [r7, #24]
    1594:	2b07      	cmp	r3, #7
    1596:	d9b5      	bls.n	1504 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	697a      	ldr	r2, [r7, #20]
    159c:	605a      	str	r2, [r3, #4]
  }
}
    159e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    15a2:	46bd      	mov	sp, r7
    15a4:	bc80      	pop	{r7}
    15a6:	4770      	bx	lr

000015a8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    15a8:	b480      	push	{r7}
    15aa:	b083      	sub	sp, #12
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    15b6:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	f04f 0202 	mov.w	r2, #2
    15be:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    15c0:	687b      	ldr	r3, [r7, #4]
    15c2:	f04f 0204 	mov.w	r2, #4
    15c6:	70da      	strb	r2, [r3, #3]
}
    15c8:	f107 070c 	add.w	r7, r7, #12
    15cc:	46bd      	mov	sp, r7
    15ce:	bc80      	pop	{r7}
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop

000015d4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    15d4:	b480      	push	{r7}
    15d6:	b085      	sub	sp, #20
    15d8:	af00      	add	r7, sp, #0
    15da:	6078      	str	r0, [r7, #4]
    15dc:	460b      	mov	r3, r1
    15de:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    15e0:	f04f 0300 	mov.w	r3, #0
    15e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	689a      	ldr	r2, [r3, #8]
    15ea:	887b      	ldrh	r3, [r7, #2]
    15ec:	4013      	ands	r3, r2
    15ee:	2b00      	cmp	r3, #0
    15f0:	d003      	beq.n	15fa <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    15f2:	f04f 0301 	mov.w	r3, #1
    15f6:	73fb      	strb	r3, [r7, #15]
    15f8:	e002      	b.n	1600 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    15fa:	f04f 0300 	mov.w	r3, #0
    15fe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1600:	7bfb      	ldrb	r3, [r7, #15]
}
    1602:	4618      	mov	r0, r3
    1604:	f107 0714 	add.w	r7, r7, #20
    1608:	46bd      	mov	sp, r7
    160a:	bc80      	pop	{r7}
    160c:	4770      	bx	lr
    160e:	bf00      	nop

00001610 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1610:	b480      	push	{r7}
    1612:	b083      	sub	sp, #12
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	689b      	ldr	r3, [r3, #8]
    161c:	b29b      	uxth	r3, r3
}
    161e:	4618      	mov	r0, r3
    1620:	f107 070c 	add.w	r7, r7, #12
    1624:	46bd      	mov	sp, r7
    1626:	bc80      	pop	{r7}
    1628:	4770      	bx	lr
    162a:	bf00      	nop

0000162c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    162c:	b480      	push	{r7}
    162e:	b085      	sub	sp, #20
    1630:	af00      	add	r7, sp, #0
    1632:	6078      	str	r0, [r7, #4]
    1634:	460b      	mov	r3, r1
    1636:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1638:	f04f 0300 	mov.w	r3, #0
    163c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	68da      	ldr	r2, [r3, #12]
    1642:	887b      	ldrh	r3, [r7, #2]
    1644:	4013      	ands	r3, r2
    1646:	2b00      	cmp	r3, #0
    1648:	d003      	beq.n	1652 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    164a:	f04f 0301 	mov.w	r3, #1
    164e:	73fb      	strb	r3, [r7, #15]
    1650:	e002      	b.n	1658 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1652:	f04f 0300 	mov.w	r3, #0
    1656:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1658:	7bfb      	ldrb	r3, [r7, #15]
}
    165a:	4618      	mov	r0, r3
    165c:	f107 0714 	add.w	r7, r7, #20
    1660:	46bd      	mov	sp, r7
    1662:	bc80      	pop	{r7}
    1664:	4770      	bx	lr
    1666:	bf00      	nop

00001668 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1668:	b480      	push	{r7}
    166a:	b083      	sub	sp, #12
    166c:	af00      	add	r7, sp, #0
    166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	68db      	ldr	r3, [r3, #12]
    1674:	b29b      	uxth	r3, r3
}
    1676:	4618      	mov	r0, r3
    1678:	f107 070c 	add.w	r7, r7, #12
    167c:	46bd      	mov	sp, r7
    167e:	bc80      	pop	{r7}
    1680:	4770      	bx	lr
    1682:	bf00      	nop

00001684 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1684:	b480      	push	{r7}
    1686:	b083      	sub	sp, #12
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
    168c:	460b      	mov	r3, r1
    168e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1690:	887a      	ldrh	r2, [r7, #2]
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	611a      	str	r2, [r3, #16]
}
    1696:	f107 070c 	add.w	r7, r7, #12
    169a:	46bd      	mov	sp, r7
    169c:	bc80      	pop	{r7}
    169e:	4770      	bx	lr

000016a0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    16a0:	b480      	push	{r7}
    16a2:	b083      	sub	sp, #12
    16a4:	af00      	add	r7, sp, #0
    16a6:	6078      	str	r0, [r7, #4]
    16a8:	460b      	mov	r3, r1
    16aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    16ac:	887a      	ldrh	r2, [r7, #2]
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	615a      	str	r2, [r3, #20]
}
    16b2:	f107 070c 	add.w	r7, r7, #12
    16b6:	46bd      	mov	sp, r7
    16b8:	bc80      	pop	{r7}
    16ba:	4770      	bx	lr

000016bc <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    16bc:	b480      	push	{r7}
    16be:	b083      	sub	sp, #12
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	4613      	mov	r3, r2
    16c6:	460a      	mov	r2, r1
    16c8:	807a      	strh	r2, [r7, #2]
    16ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    16cc:	787b      	ldrb	r3, [r7, #1]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d003      	beq.n	16da <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    16d2:	887a      	ldrh	r2, [r7, #2]
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	611a      	str	r2, [r3, #16]
    16d8:	e002      	b.n	16e0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    16da:	887a      	ldrh	r2, [r7, #2]
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	615a      	str	r2, [r3, #20]
  }
}
    16e0:	f107 070c 	add.w	r7, r7, #12
    16e4:	46bd      	mov	sp, r7
    16e6:	bc80      	pop	{r7}
    16e8:	4770      	bx	lr
    16ea:	bf00      	nop

000016ec <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    16ec:	b480      	push	{r7}
    16ee:	b083      	sub	sp, #12
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
    16f4:	460b      	mov	r3, r1
    16f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    16f8:	887a      	ldrh	r2, [r7, #2]
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	60da      	str	r2, [r3, #12]
}
    16fe:	f107 070c 	add.w	r7, r7, #12
    1702:	46bd      	mov	sp, r7
    1704:	bc80      	pop	{r7}
    1706:	4770      	bx	lr

00001708 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1708:	b480      	push	{r7}
    170a:	b085      	sub	sp, #20
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	460b      	mov	r3, r1
    1712:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1718:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    171a:	887b      	ldrh	r3, [r7, #2]
    171c:	68fa      	ldr	r2, [r7, #12]
    171e:	4313      	orrs	r3, r2
    1720:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	68fa      	ldr	r2, [r7, #12]
    1726:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1728:	887a      	ldrh	r2, [r7, #2]
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	68fa      	ldr	r2, [r7, #12]
    1732:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	699b      	ldr	r3, [r3, #24]
    1738:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	699b      	ldr	r3, [r3, #24]
    173e:	60fb      	str	r3, [r7, #12]
}
    1740:	f107 0714 	add.w	r7, r7, #20
    1744:	46bd      	mov	sp, r7
    1746:	bc80      	pop	{r7}
    1748:	4770      	bx	lr
    174a:	bf00      	nop

0000174c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    174c:	b480      	push	{r7}
    174e:	b085      	sub	sp, #20
    1750:	af00      	add	r7, sp, #0
    1752:	4602      	mov	r2, r0
    1754:	460b      	mov	r3, r1
    1756:	71fa      	strb	r2, [r7, #7]
    1758:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    175a:	f04f 0300 	mov.w	r3, #0
    175e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    176c:	68fa      	ldr	r2, [r7, #12]
    176e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1772:	4013      	ands	r3, r2
    1774:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1776:	79fb      	ldrb	r3, [r7, #7]
    1778:	ea4f 1303 	mov.w	r3, r3, lsl #4
    177c:	68fa      	ldr	r2, [r7, #12]
    177e:	4313      	orrs	r3, r2
    1780:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1782:	79bb      	ldrb	r3, [r7, #6]
    1784:	68fa      	ldr	r2, [r7, #12]
    1786:	4313      	orrs	r3, r2
    1788:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    178a:	f04f 0300 	mov.w	r3, #0
    178e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1792:	68fa      	ldr	r2, [r7, #12]
    1794:	601a      	str	r2, [r3, #0]
}
    1796:	f107 0714 	add.w	r7, r7, #20
    179a:	46bd      	mov	sp, r7
    179c:	bc80      	pop	{r7}
    179e:	4770      	bx	lr

000017a0 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    17a0:	b480      	push	{r7}
    17a2:	b083      	sub	sp, #12
    17a4:	af00      	add	r7, sp, #0
    17a6:	4603      	mov	r3, r0
    17a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    17aa:	f04f 031c 	mov.w	r3, #28
    17ae:	f2c4 2320 	movt	r3, #16928	; 0x4220
    17b2:	79fa      	ldrb	r2, [r7, #7]
    17b4:	601a      	str	r2, [r3, #0]
}
    17b6:	f107 070c 	add.w	r7, r7, #12
    17ba:	46bd      	mov	sp, r7
    17bc:	bc80      	pop	{r7}
    17be:	4770      	bx	lr

000017c0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    17c0:	b480      	push	{r7}
    17c2:	b087      	sub	sp, #28
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
    17c8:	460b      	mov	r3, r1
    17ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    17cc:	f04f 0300 	mov.w	r3, #0
    17d0:	613b      	str	r3, [r7, #16]
    17d2:	f04f 0300 	mov.w	r3, #0
    17d6:	60fb      	str	r3, [r7, #12]
    17d8:	f04f 0300 	mov.w	r3, #0
    17dc:	617b      	str	r3, [r7, #20]
    17de:	f04f 0300 	mov.w	r3, #0
    17e2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	2b00      	cmp	r3, #0
    17e8:	da06      	bge.n	17f8 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    17ea:	f04f 0300 	mov.w	r3, #0
    17ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17f2:	69db      	ldr	r3, [r3, #28]
    17f4:	617b      	str	r3, [r7, #20]
    17f6:	e005      	b.n	1804 <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    17f8:	f04f 0300 	mov.w	r3, #0
    17fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    180a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    180e:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1810:	687b      	ldr	r3, [r7, #4]
    1812:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1816:	ea4f 4313 	mov.w	r3, r3, lsr #16
    181a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1822:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1826:	d110      	bne.n	184a <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1828:	697b      	ldr	r3, [r7, #20]
    182a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    182e:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1830:	f04f 0300 	mov.w	r3, #0
    1834:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1838:	f04f 0200 	mov.w	r2, #0
    183c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1840:	6852      	ldr	r2, [r2, #4]
    1842:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    1846:	605a      	str	r2, [r3, #4]
    1848:	e026      	b.n	1898 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1850:	2b00      	cmp	r3, #0
    1852:	d010      	beq.n	1876 <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1854:	68bb      	ldr	r3, [r7, #8]
    1856:	f04f 0203 	mov.w	r2, #3
    185a:	fa02 f303 	lsl.w	r3, r2, r3
    185e:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	ea6f 0303 	mvn.w	r3, r3
    1866:	697a      	ldr	r2, [r7, #20]
    1868:	4013      	ands	r3, r2
    186a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    186c:	697b      	ldr	r3, [r7, #20]
    186e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1872:	617b      	str	r3, [r7, #20]
    1874:	e010      	b.n	1898 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	ea4f 5353 	mov.w	r3, r3, lsr #21
    187c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1880:	693a      	ldr	r2, [r7, #16]
    1882:	fa02 f303 	lsl.w	r3, r2, r3
    1886:	ea6f 0303 	mvn.w	r3, r3
    188a:	697a      	ldr	r2, [r7, #20]
    188c:	4013      	ands	r3, r2
    188e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1890:	697b      	ldr	r3, [r7, #20]
    1892:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1896:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1898:	78fb      	ldrb	r3, [r7, #3]
    189a:	2b00      	cmp	r3, #0
    189c:	d00a      	beq.n	18b4 <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	ea4f 5353 	mov.w	r3, r3, lsr #21
    18a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    18a8:	693a      	ldr	r2, [r7, #16]
    18aa:	fa02 f303 	lsl.w	r3, r2, r3
    18ae:	697a      	ldr	r2, [r7, #20]
    18b0:	4313      	orrs	r3, r2
    18b2:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	2b00      	cmp	r3, #0
    18b8:	da06      	bge.n	18c8 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    18ba:	f04f 0300 	mov.w	r3, #0
    18be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    18c2:	697a      	ldr	r2, [r7, #20]
    18c4:	61da      	str	r2, [r3, #28]
    18c6:	e005      	b.n	18d4 <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    18c8:	f04f 0300 	mov.w	r3, #0
    18cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    18d0:	697a      	ldr	r2, [r7, #20]
    18d2:	605a      	str	r2, [r3, #4]
  }
}
    18d4:	f107 071c 	add.w	r7, r7, #28
    18d8:	46bd      	mov	sp, r7
    18da:	bc80      	pop	{r7}
    18dc:	4770      	bx	lr
    18de:	bf00      	nop

000018e0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    18e0:	b490      	push	{r4, r7}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	4602      	mov	r2, r0
    18e8:	460b      	mov	r3, r1
    18ea:	71fa      	strb	r2, [r7, #7]
    18ec:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    18ee:	f04f 0300 	mov.w	r3, #0
    18f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    18f4:	79bb      	ldrb	r3, [r7, #6]
    18f6:	f003 0303 	and.w	r3, r3, #3
    18fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    18fe:	f04f 020f 	mov.w	r2, #15
    1902:	fa02 f303 	lsl.w	r3, r2, r3
    1906:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1908:	f04f 0300 	mov.w	r3, #0
    190c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1910:	79ba      	ldrb	r2, [r7, #6]
    1912:	ea4f 0292 	mov.w	r2, r2, lsr #2
    1916:	b2d2      	uxtb	r2, r2
    1918:	4610      	mov	r0, r2
    191a:	f04f 0200 	mov.w	r2, #0
    191e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1922:	79b9      	ldrb	r1, [r7, #6]
    1924:	ea4f 0191 	mov.w	r1, r1, lsr #2
    1928:	b2c9      	uxtb	r1, r1
    192a:	f101 0102 	add.w	r1, r1, #2
    192e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1932:	68fa      	ldr	r2, [r7, #12]
    1934:	ea6f 0202 	mvn.w	r2, r2
    1938:	4011      	ands	r1, r2
    193a:	f100 0202 	add.w	r2, r0, #2
    193e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1942:	f04f 0300 	mov.w	r3, #0
    1946:	f2c4 0301 	movt	r3, #16385	; 0x4001
    194a:	79ba      	ldrb	r2, [r7, #6]
    194c:	ea4f 0292 	mov.w	r2, r2, lsr #2
    1950:	b2d2      	uxtb	r2, r2
    1952:	4610      	mov	r0, r2
    1954:	f04f 0200 	mov.w	r2, #0
    1958:	f2c4 0201 	movt	r2, #16385	; 0x4001
    195c:	79b9      	ldrb	r1, [r7, #6]
    195e:	ea4f 0191 	mov.w	r1, r1, lsr #2
    1962:	b2c9      	uxtb	r1, r1
    1964:	f101 0102 	add.w	r1, r1, #2
    1968:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    196c:	79fc      	ldrb	r4, [r7, #7]
    196e:	79ba      	ldrb	r2, [r7, #6]
    1970:	f002 0203 	and.w	r2, r2, #3
    1974:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1978:	fa04 f202 	lsl.w	r2, r4, r2
    197c:	4311      	orrs	r1, r2
    197e:	f100 0202 	add.w	r2, r0, #2
    1982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1986:	f107 0710 	add.w	r7, r7, #16
    198a:	46bd      	mov	sp, r7
    198c:	bc90      	pop	{r4, r7}
    198e:	4770      	bx	lr

00001990 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1990:	b480      	push	{r7}
    1992:	b083      	sub	sp, #12
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1998:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    199c:	f2c4 2320 	movt	r3, #16928	; 0x4220
    19a0:	687a      	ldr	r2, [r7, #4]
    19a2:	601a      	str	r2, [r3, #0]
}
    19a4:	f107 070c 	add.w	r7, r7, #12
    19a8:	46bd      	mov	sp, r7
    19aa:	bc80      	pop	{r7}
    19ac:	4770      	bx	lr
    19ae:	bf00      	nop

000019b0 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	af00      	add	r7, sp, #0
    19b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    19b8:	687a      	ldr	r2, [r7, #4]
    19ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    19be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19c2:	429a      	cmp	r2, r3
    19c4:	d10c      	bne.n	19e0 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    19c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    19ca:	f04f 0101 	mov.w	r1, #1
    19ce:	f7ff fb61 	bl	1094 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    19d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    19d6:	f04f 0100 	mov.w	r1, #0
    19da:	f7ff fb5b 	bl	1094 <RCC_APB2PeriphResetCmd>
    19de:	e04e      	b.n	1a7e <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    19e0:	687a      	ldr	r2, [r7, #4]
    19e2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    19e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    19ea:	429a      	cmp	r2, r3
    19ec:	d10c      	bne.n	1a08 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    19ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    19f2:	f04f 0101 	mov.w	r1, #1
    19f6:	f7ff fb77 	bl	10e8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    19fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    19fe:	f04f 0100 	mov.w	r1, #0
    1a02:	f7ff fb71 	bl	10e8 <RCC_APB1PeriphResetCmd>
    1a06:	e03a      	b.n	1a7e <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    1a08:	687a      	ldr	r2, [r7, #4]
    1a0a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    1a0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a12:	429a      	cmp	r2, r3
    1a14:	d10c      	bne.n	1a30 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    1a16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1a1a:	f04f 0101 	mov.w	r1, #1
    1a1e:	f7ff fb63 	bl	10e8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    1a22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1a26:	f04f 0100 	mov.w	r1, #0
    1a2a:	f7ff fb5d 	bl	10e8 <RCC_APB1PeriphResetCmd>
    1a2e:	e026      	b.n	1a7e <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
    1a30:	687a      	ldr	r2, [r7, #4]
    1a32:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    1a36:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a3a:	429a      	cmp	r2, r3
    1a3c:	d10c      	bne.n	1a58 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    1a3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a42:	f04f 0101 	mov.w	r1, #1
    1a46:	f7ff fb4f 	bl	10e8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1a4a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a4e:	f04f 0100 	mov.w	r1, #0
    1a52:	f7ff fb49 	bl	10e8 <RCC_APB1PeriphResetCmd>
    1a56:	e012      	b.n	1a7e <USART_DeInit+0xce>
  }
  else
  {
    if (USARTx == UART5)
    1a58:	687a      	ldr	r2, [r7, #4]
    1a5a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1a5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1a62:	429a      	cmp	r2, r3
    1a64:	d10b      	bne.n	1a7e <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    1a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1a6a:	f04f 0101 	mov.w	r1, #1
    1a6e:	f7ff fb3b 	bl	10e8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1a72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1a76:	f04f 0100 	mov.w	r1, #0
    1a7a:	f7ff fb35 	bl	10e8 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1a7e:	f107 0708 	add.w	r7, r7, #8
    1a82:	46bd      	mov	sp, r7
    1a84:	bd80      	pop	{r7, pc}
    1a86:	bf00      	nop

00001a88 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	b08c      	sub	sp, #48	; 0x30
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
    1a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1a92:	f04f 0300 	mov.w	r3, #0
    1a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a98:	f04f 0300 	mov.w	r3, #0
    1a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1a9e:	f04f 0300 	mov.w	r3, #0
    1aa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    1aa4:	f04f 0300 	mov.w	r3, #0
    1aa8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1aaa:	f04f 0300 	mov.w	r3, #0
    1aae:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	8a1b      	ldrh	r3, [r3, #16]
    1ab8:	b29b      	uxth	r3, r3
    1aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1abe:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1ac2:	4013      	ands	r3, r2
    1ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    1ac6:	683b      	ldr	r3, [r7, #0]
    1ac8:	88db      	ldrh	r3, [r3, #6]
    1aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1acc:	4313      	orrs	r3, r2
    1ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ad2:	b29a      	uxth	r2, r3
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	899b      	ldrh	r3, [r3, #12]
    1adc:	b29b      	uxth	r3, r3
    1ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ae2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    1ae6:	4013      	ands	r3, r2
    1ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1aea:	683b      	ldr	r3, [r7, #0]
    1aec:	889a      	ldrh	r2, [r3, #4]
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	891b      	ldrh	r3, [r3, #8]
    1af2:	4313      	orrs	r3, r2
    1af4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    1af6:	683b      	ldr	r3, [r7, #0]
    1af8:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1afa:	4313      	orrs	r3, r2
    1afc:	b29b      	uxth	r3, r3
    1afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b00:	4313      	orrs	r3, r2
    1b02:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    1b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b06:	b29a      	uxth	r2, r3
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	8a9b      	ldrh	r3, [r3, #20]
    1b10:	b29b      	uxth	r3, r3
    1b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    1b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b16:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    1b1a:	4013      	ands	r3, r2
    1b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    1b1e:	683b      	ldr	r3, [r7, #0]
    1b20:	899b      	ldrh	r3, [r3, #12]
    1b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b24:	4313      	orrs	r3, r2
    1b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    1b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    1b30:	f107 0308 	add.w	r3, r7, #8
    1b34:	4618      	mov	r0, r3
    1b36:	f7ff f945 	bl	dc4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    1b3a:	69fa      	ldr	r2, [r7, #28]
    1b3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1b40:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b44:	429a      	cmp	r2, r3
    1b46:	d102      	bne.n	1b4e <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    1b48:	697b      	ldr	r3, [r7, #20]
    1b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    1b4c:	e001      	b.n	1b52 <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    1b4e:	693b      	ldr	r3, [r7, #16]
    1b50:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	899b      	ldrh	r3, [r3, #12]
    1b56:	b29b      	uxth	r3, r3
    1b58:	b29b      	uxth	r3, r3
    1b5a:	b21b      	sxth	r3, r3
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	da0f      	bge.n	1b80 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1b62:	4613      	mov	r3, r2
    1b64:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b68:	189b      	adds	r3, r3, r2
    1b6a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b6e:	189a      	adds	r2, r3, r2
    1b70:	683b      	ldr	r3, [r7, #0]
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1b78:	fbb2 f3f3 	udiv	r3, r2, r3
    1b7c:	627b      	str	r3, [r7, #36]	; 0x24
    1b7e:	e00e      	b.n	1b9e <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1b82:	4613      	mov	r3, r2
    1b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b88:	189b      	adds	r3, r3, r2
    1b8a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b8e:	189a      	adds	r2, r3, r2
    1b90:	683b      	ldr	r3, [r7, #0]
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b98:	fbb2 f3f3 	udiv	r3, r2, r3
    1b9c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ba0:	f248 531f 	movw	r3, #34079	; 0x851f
    1ba4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1ba8:	fba3 1302 	umull	r1, r3, r3, r2
    1bac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1bb0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bb8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1bbc:	f04f 0264 	mov.w	r2, #100	; 0x64
    1bc0:	fb02 f303 	mul.w	r3, r2, r3
    1bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1bc6:	1ad3      	subs	r3, r2, r3
    1bc8:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	899b      	ldrh	r3, [r3, #12]
    1bce:	b29b      	uxth	r3, r3
    1bd0:	b29b      	uxth	r3, r3
    1bd2:	b21b      	sxth	r3, r3
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	da12      	bge.n	1bfe <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1bd8:	6a3b      	ldr	r3, [r7, #32]
    1bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1bde:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1be2:	f248 531f 	movw	r3, #34079	; 0x851f
    1be6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1bea:	fba3 1302 	umull	r1, r3, r3, r2
    1bee:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1bf2:	f003 0307 	and.w	r3, r3, #7
    1bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1bf8:	4313      	orrs	r3, r2
    1bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    1bfc:	e011      	b.n	1c22 <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1bfe:	6a3b      	ldr	r3, [r7, #32]
    1c00:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1c04:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1c08:	f248 531f 	movw	r3, #34079	; 0x851f
    1c0c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1c10:	fba3 1302 	umull	r1, r3, r3, r2
    1c14:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1c18:	f003 030f 	and.w	r3, r3, #15
    1c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c1e:	4313      	orrs	r3, r2
    1c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c24:	b29a      	uxth	r2, r3
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	811a      	strh	r2, [r3, #8]
}
    1c2a:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1c2e:	46bd      	mov	sp, r7
    1c30:	bd80      	pop	{r7, pc}
    1c32:	bf00      	nop

00001c34 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1c34:	b480      	push	{r7}
    1c36:	b083      	sub	sp, #12
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1c42:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	f04f 0200 	mov.w	r2, #0
    1c4a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	f04f 0200 	mov.w	r2, #0
    1c52:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	f04f 0200 	mov.w	r2, #0
    1c5a:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	f04f 020c 	mov.w	r2, #12
    1c62:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	f04f 0200 	mov.w	r2, #0
    1c6a:	819a      	strh	r2, [r3, #12]
}
    1c6c:	f107 070c 	add.w	r7, r7, #12
    1c70:	46bd      	mov	sp, r7
    1c72:	bc80      	pop	{r7}
    1c74:	4770      	bx	lr
    1c76:	bf00      	nop

00001c78 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1c78:	b480      	push	{r7}
    1c7a:	b085      	sub	sp, #20
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
    1c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1c82:	f04f 0300 	mov.w	r3, #0
    1c86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	8a1b      	ldrh	r3, [r3, #16]
    1c8c:	b29b      	uxth	r3, r3
    1c8e:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1c90:	68fa      	ldr	r2, [r7, #12]
    1c92:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1c96:	4013      	ands	r3, r2
    1c98:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	881a      	ldrh	r2, [r3, #0]
    1c9e:	683b      	ldr	r3, [r7, #0]
    1ca0:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1ca2:	4313      	orrs	r3, r2
    1ca4:	b29a      	uxth	r2, r3
    1ca6:	683b      	ldr	r3, [r7, #0]
    1ca8:	889b      	ldrh	r3, [r3, #4]
    1caa:	4313      	orrs	r3, r2
    1cac:	b29a      	uxth	r2, r3
    1cae:	683b      	ldr	r3, [r7, #0]
    1cb0:	88db      	ldrh	r3, [r3, #6]
    1cb2:	4313      	orrs	r3, r2
    1cb4:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1cb6:	68fa      	ldr	r2, [r7, #12]
    1cb8:	4313      	orrs	r3, r2
    1cba:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	821a      	strh	r2, [r3, #16]
}
    1cc4:	f107 0714 	add.w	r7, r7, #20
    1cc8:	46bd      	mov	sp, r7
    1cca:	bc80      	pop	{r7}
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	f04f 0200 	mov.w	r2, #0
    1cde:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	f04f 0200 	mov.w	r2, #0
    1ce6:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	f04f 0200 	mov.w	r2, #0
    1cee:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	f04f 0200 	mov.w	r2, #0
    1cf6:	80da      	strh	r2, [r3, #6]
}
    1cf8:	f107 070c 	add.w	r7, r7, #12
    1cfc:	46bd      	mov	sp, r7
    1cfe:	bc80      	pop	{r7}
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop

00001d04 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d04:	b480      	push	{r7}
    1d06:	b083      	sub	sp, #12
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
    1d0c:	460b      	mov	r3, r1
    1d0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d10:	78fb      	ldrb	r3, [r7, #3]
    1d12:	2b00      	cmp	r3, #0
    1d14:	d008      	beq.n	1d28 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	899b      	ldrh	r3, [r3, #12]
    1d1a:	b29b      	uxth	r3, r3
    1d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1d20:	b29a      	uxth	r2, r3
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	819a      	strh	r2, [r3, #12]
    1d26:	e007      	b.n	1d38 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	899b      	ldrh	r3, [r3, #12]
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1d32:	b29a      	uxth	r2, r3
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	819a      	strh	r2, [r3, #12]
  }
}
    1d38:	f107 070c 	add.w	r7, r7, #12
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bc80      	pop	{r7}
    1d40:	4770      	bx	lr
    1d42:	bf00      	nop

00001d44 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1d44:	b480      	push	{r7}
    1d46:	b087      	sub	sp, #28
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
    1d4c:	4613      	mov	r3, r2
    1d4e:	460a      	mov	r2, r1
    1d50:	807a      	strh	r2, [r7, #2]
    1d52:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1d54:	f04f 0300 	mov.w	r3, #0
    1d58:	613b      	str	r3, [r7, #16]
    1d5a:	f04f 0300 	mov.w	r3, #0
    1d5e:	60fb      	str	r3, [r7, #12]
    1d60:	f04f 0300 	mov.w	r3, #0
    1d64:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1d66:	f04f 0300 	mov.w	r3, #0
    1d6a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1d70:	887b      	ldrh	r3, [r7, #2]
    1d72:	b2db      	uxtb	r3, r3
    1d74:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1d78:	b2db      	uxtb	r3, r3
    1d7a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1d7c:	887b      	ldrh	r3, [r7, #2]
    1d7e:	f003 031f 	and.w	r3, r3, #31
    1d82:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1d84:	68fb      	ldr	r3, [r7, #12]
    1d86:	f04f 0201 	mov.w	r2, #1
    1d8a:	fa02 f303 	lsl.w	r3, r2, r3
    1d8e:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    1d90:	693b      	ldr	r3, [r7, #16]
    1d92:	2b01      	cmp	r3, #1
    1d94:	d104      	bne.n	1da0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1d96:	697b      	ldr	r3, [r7, #20]
    1d98:	f103 030c 	add.w	r3, r3, #12
    1d9c:	617b      	str	r3, [r7, #20]
    1d9e:	e00b      	b.n	1db8 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1da0:	693b      	ldr	r3, [r7, #16]
    1da2:	2b02      	cmp	r3, #2
    1da4:	d104      	bne.n	1db0 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1da6:	697b      	ldr	r3, [r7, #20]
    1da8:	f103 0310 	add.w	r3, r3, #16
    1dac:	617b      	str	r3, [r7, #20]
    1dae:	e003      	b.n	1db8 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1db0:	697b      	ldr	r3, [r7, #20]
    1db2:	f103 0314 	add.w	r3, r3, #20
    1db6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1db8:	787b      	ldrb	r3, [r7, #1]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d006      	beq.n	1dcc <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1dbe:	697b      	ldr	r3, [r7, #20]
    1dc0:	697a      	ldr	r2, [r7, #20]
    1dc2:	6811      	ldr	r1, [r2, #0]
    1dc4:	68ba      	ldr	r2, [r7, #8]
    1dc6:	430a      	orrs	r2, r1
    1dc8:	601a      	str	r2, [r3, #0]
    1dca:	e007      	b.n	1ddc <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	697a      	ldr	r2, [r7, #20]
    1dd0:	6811      	ldr	r1, [r2, #0]
    1dd2:	68ba      	ldr	r2, [r7, #8]
    1dd4:	ea6f 0202 	mvn.w	r2, r2
    1dd8:	400a      	ands	r2, r1
    1dda:	601a      	str	r2, [r3, #0]
  }
}
    1ddc:	f107 071c 	add.w	r7, r7, #28
    1de0:	46bd      	mov	sp, r7
    1de2:	bc80      	pop	{r7}
    1de4:	4770      	bx	lr
    1de6:	bf00      	nop

00001de8 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1de8:	b480      	push	{r7}
    1dea:	b083      	sub	sp, #12
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]
    1df0:	4613      	mov	r3, r2
    1df2:	460a      	mov	r2, r1
    1df4:	807a      	strh	r2, [r7, #2]
    1df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1df8:	787b      	ldrb	r3, [r7, #1]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d008      	beq.n	1e10 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	8a9b      	ldrh	r3, [r3, #20]
    1e02:	b29a      	uxth	r2, r3
    1e04:	887b      	ldrh	r3, [r7, #2]
    1e06:	4313      	orrs	r3, r2
    1e08:	b29a      	uxth	r2, r3
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	829a      	strh	r2, [r3, #20]
    1e0e:	e00a      	b.n	1e26 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	8a9b      	ldrh	r3, [r3, #20]
    1e14:	b29a      	uxth	r2, r3
    1e16:	887b      	ldrh	r3, [r7, #2]
    1e18:	ea6f 0303 	mvn.w	r3, r3
    1e1c:	b29b      	uxth	r3, r3
    1e1e:	4013      	ands	r3, r2
    1e20:	b29a      	uxth	r2, r3
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	829a      	strh	r2, [r3, #20]
  }
}
    1e26:	f107 070c 	add.w	r7, r7, #12
    1e2a:	46bd      	mov	sp, r7
    1e2c:	bc80      	pop	{r7}
    1e2e:	4770      	bx	lr

00001e30 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1e30:	b480      	push	{r7}
    1e32:	b083      	sub	sp, #12
    1e34:	af00      	add	r7, sp, #0
    1e36:	6078      	str	r0, [r7, #4]
    1e38:	460b      	mov	r3, r1
    1e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	8a1b      	ldrh	r3, [r3, #16]
    1e40:	b29b      	uxth	r3, r3
    1e42:	f023 030f 	bic.w	r3, r3, #15
    1e46:	b29a      	uxth	r2, r3
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	8a1b      	ldrh	r3, [r3, #16]
    1e50:	b29a      	uxth	r2, r3
    1e52:	78fb      	ldrb	r3, [r7, #3]
    1e54:	b29b      	uxth	r3, r3
    1e56:	4313      	orrs	r3, r2
    1e58:	b29a      	uxth	r2, r3
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	821a      	strh	r2, [r3, #16]
}
    1e5e:	f107 070c 	add.w	r7, r7, #12
    1e62:	46bd      	mov	sp, r7
    1e64:	bc80      	pop	{r7}
    1e66:	4770      	bx	lr

00001e68 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1e68:	b480      	push	{r7}
    1e6a:	b083      	sub	sp, #12
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	6078      	str	r0, [r7, #4]
    1e70:	460b      	mov	r3, r1
    1e72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	899b      	ldrh	r3, [r3, #12]
    1e78:	b29b      	uxth	r3, r3
    1e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1e7e:	b29a      	uxth	r2, r3
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	899b      	ldrh	r3, [r3, #12]
    1e88:	b29a      	uxth	r2, r3
    1e8a:	887b      	ldrh	r3, [r7, #2]
    1e8c:	4313      	orrs	r3, r2
    1e8e:	b29a      	uxth	r2, r3
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	819a      	strh	r2, [r3, #12]
}
    1e94:	f107 070c 	add.w	r7, r7, #12
    1e98:	46bd      	mov	sp, r7
    1e9a:	bc80      	pop	{r7}
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop

00001ea0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ea0:	b480      	push	{r7}
    1ea2:	b083      	sub	sp, #12
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
    1ea8:	460b      	mov	r3, r1
    1eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1eac:	78fb      	ldrb	r3, [r7, #3]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d008      	beq.n	1ec4 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	899b      	ldrh	r3, [r3, #12]
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	f043 0302 	orr.w	r3, r3, #2
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	819a      	strh	r2, [r3, #12]
    1ec2:	e007      	b.n	1ed4 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	899b      	ldrh	r3, [r3, #12]
    1ec8:	b29b      	uxth	r3, r3
    1eca:	f023 0302 	bic.w	r3, r3, #2
    1ece:	b29a      	uxth	r2, r3
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	819a      	strh	r2, [r3, #12]
  }
}
    1ed4:	f107 070c 	add.w	r7, r7, #12
    1ed8:	46bd      	mov	sp, r7
    1eda:	bc80      	pop	{r7}
    1edc:	4770      	bx	lr
    1ede:	bf00      	nop

00001ee0 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1ee0:	b480      	push	{r7}
    1ee2:	b083      	sub	sp, #12
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
    1ee8:	460b      	mov	r3, r1
    1eea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	8a1b      	ldrh	r3, [r3, #16]
    1ef0:	b29b      	uxth	r3, r3
    1ef2:	f023 0320 	bic.w	r3, r3, #32
    1ef6:	b29a      	uxth	r2, r3
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	8a1b      	ldrh	r3, [r3, #16]
    1f00:	b29a      	uxth	r2, r3
    1f02:	887b      	ldrh	r3, [r7, #2]
    1f04:	4313      	orrs	r3, r2
    1f06:	b29a      	uxth	r2, r3
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	821a      	strh	r2, [r3, #16]
}
    1f0c:	f107 070c 	add.w	r7, r7, #12
    1f10:	46bd      	mov	sp, r7
    1f12:	bc80      	pop	{r7}
    1f14:	4770      	bx	lr
    1f16:	bf00      	nop

00001f18 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f18:	b480      	push	{r7}
    1f1a:	b083      	sub	sp, #12
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	6078      	str	r0, [r7, #4]
    1f20:	460b      	mov	r3, r1
    1f22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f24:	78fb      	ldrb	r3, [r7, #3]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d008      	beq.n	1f3c <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	8a1b      	ldrh	r3, [r3, #16]
    1f2e:	b29b      	uxth	r3, r3
    1f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1f34:	b29a      	uxth	r2, r3
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	821a      	strh	r2, [r3, #16]
    1f3a:	e007      	b.n	1f4c <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	8a1b      	ldrh	r3, [r3, #16]
    1f40:	b29b      	uxth	r3, r3
    1f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1f46:	b29a      	uxth	r2, r3
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	821a      	strh	r2, [r3, #16]
  }
}
    1f4c:	f107 070c 	add.w	r7, r7, #12
    1f50:	46bd      	mov	sp, r7
    1f52:	bc80      	pop	{r7}
    1f54:	4770      	bx	lr
    1f56:	bf00      	nop

00001f58 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1f58:	b480      	push	{r7}
    1f5a:	b083      	sub	sp, #12
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	6078      	str	r0, [r7, #4]
    1f60:	460b      	mov	r3, r1
    1f62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1f64:	887b      	ldrh	r3, [r7, #2]
    1f66:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1f6a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1f6e:	b29a      	uxth	r2, r3
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	809a      	strh	r2, [r3, #4]
}
    1f74:	f107 070c 	add.w	r7, r7, #12
    1f78:	46bd      	mov	sp, r7
    1f7a:	bc80      	pop	{r7}
    1f7c:	4770      	bx	lr
    1f7e:	bf00      	nop

00001f80 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1f80:	b480      	push	{r7}
    1f82:	b083      	sub	sp, #12
    1f84:	af00      	add	r7, sp, #0
    1f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	889b      	ldrh	r3, [r3, #4]
    1f8c:	b29b      	uxth	r3, r3
    1f8e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1f92:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1f96:	b29b      	uxth	r3, r3
}
    1f98:	4618      	mov	r0, r3
    1f9a:	f107 070c 	add.w	r7, r7, #12
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bc80      	pop	{r7}
    1fa2:	4770      	bx	lr

00001fa4 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1fa4:	b480      	push	{r7}
    1fa6:	b083      	sub	sp, #12
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	899b      	ldrh	r3, [r3, #12]
    1fb0:	b29b      	uxth	r3, r3
    1fb2:	f043 0301 	orr.w	r3, r3, #1
    1fb6:	b29a      	uxth	r2, r3
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	819a      	strh	r2, [r3, #12]
}
    1fbc:	f107 070c 	add.w	r7, r7, #12
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bc80      	pop	{r7}
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop

00001fc8 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1fc8:	b480      	push	{r7}
    1fca:	b083      	sub	sp, #12
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
    1fd0:	460b      	mov	r3, r1
    1fd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	8b1b      	ldrh	r3, [r3, #24]
    1fd8:	b29b      	uxth	r3, r3
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	b29a      	uxth	r2, r3
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	8b1b      	ldrh	r3, [r3, #24]
    1fe6:	b29a      	uxth	r2, r3
    1fe8:	78fb      	ldrb	r3, [r7, #3]
    1fea:	b29b      	uxth	r3, r3
    1fec:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1ff0:	b29b      	uxth	r3, r3
    1ff2:	4313      	orrs	r3, r2
    1ff4:	b29a      	uxth	r2, r3
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	831a      	strh	r2, [r3, #24]
}
    1ffa:	f107 070c 	add.w	r7, r7, #12
    1ffe:	46bd      	mov	sp, r7
    2000:	bc80      	pop	{r7}
    2002:	4770      	bx	lr

00002004 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    2004:	b480      	push	{r7}
    2006:	b083      	sub	sp, #12
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
    200c:	460b      	mov	r3, r1
    200e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	8b1b      	ldrh	r3, [r3, #24]
    2014:	b29b      	uxth	r3, r3
    2016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    201a:	b29a      	uxth	r2, r3
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	8b1b      	ldrh	r3, [r3, #24]
    2024:	b29a      	uxth	r2, r3
    2026:	78fb      	ldrb	r3, [r7, #3]
    2028:	b29b      	uxth	r3, r3
    202a:	4313      	orrs	r3, r2
    202c:	b29a      	uxth	r2, r3
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	831a      	strh	r2, [r3, #24]
}
    2032:	f107 070c 	add.w	r7, r7, #12
    2036:	46bd      	mov	sp, r7
    2038:	bc80      	pop	{r7}
    203a:	4770      	bx	lr

0000203c <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    203c:	b480      	push	{r7}
    203e:	b083      	sub	sp, #12
    2040:	af00      	add	r7, sp, #0
    2042:	6078      	str	r0, [r7, #4]
    2044:	460b      	mov	r3, r1
    2046:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2048:	78fb      	ldrb	r3, [r7, #3]
    204a:	2b00      	cmp	r3, #0
    204c:	d008      	beq.n	2060 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	8a9b      	ldrh	r3, [r3, #20]
    2052:	b29b      	uxth	r3, r3
    2054:	f043 0320 	orr.w	r3, r3, #32
    2058:	b29a      	uxth	r2, r3
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	829a      	strh	r2, [r3, #20]
    205e:	e007      	b.n	2070 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    2060:	687b      	ldr	r3, [r7, #4]
    2062:	8a9b      	ldrh	r3, [r3, #20]
    2064:	b29b      	uxth	r3, r3
    2066:	f023 0320 	bic.w	r3, r3, #32
    206a:	b29a      	uxth	r2, r3
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	829a      	strh	r2, [r3, #20]
  }
}
    2070:	f107 070c 	add.w	r7, r7, #12
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	bf00      	nop

0000207c <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    207c:	b480      	push	{r7}
    207e:	b083      	sub	sp, #12
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
    2084:	460b      	mov	r3, r1
    2086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2088:	78fb      	ldrb	r3, [r7, #3]
    208a:	2b00      	cmp	r3, #0
    208c:	d008      	beq.n	20a0 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    208e:	687b      	ldr	r3, [r7, #4]
    2090:	8a9b      	ldrh	r3, [r3, #20]
    2092:	b29b      	uxth	r3, r3
    2094:	f043 0310 	orr.w	r3, r3, #16
    2098:	b29a      	uxth	r2, r3
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	829a      	strh	r2, [r3, #20]
    209e:	e007      	b.n	20b0 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	8a9b      	ldrh	r3, [r3, #20]
    20a4:	b29b      	uxth	r3, r3
    20a6:	f023 0310 	bic.w	r3, r3, #16
    20aa:	b29a      	uxth	r2, r3
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	829a      	strh	r2, [r3, #20]
  }
}
    20b0:	f107 070c 	add.w	r7, r7, #12
    20b4:	46bd      	mov	sp, r7
    20b6:	bc80      	pop	{r7}
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop

000020bc <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    20bc:	b480      	push	{r7}
    20be:	b083      	sub	sp, #12
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
    20c4:	460b      	mov	r3, r1
    20c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    20c8:	78fb      	ldrb	r3, [r7, #3]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d008      	beq.n	20e0 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	8a9b      	ldrh	r3, [r3, #20]
    20d2:	b29b      	uxth	r3, r3
    20d4:	f043 0308 	orr.w	r3, r3, #8
    20d8:	b29a      	uxth	r2, r3
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	829a      	strh	r2, [r3, #20]
    20de:	e007      	b.n	20f0 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	8a9b      	ldrh	r3, [r3, #20]
    20e4:	b29b      	uxth	r3, r3
    20e6:	f023 0308 	bic.w	r3, r3, #8
    20ea:	b29a      	uxth	r2, r3
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	829a      	strh	r2, [r3, #20]
  }
}
    20f0:	f107 070c 	add.w	r7, r7, #12
    20f4:	46bd      	mov	sp, r7
    20f6:	bc80      	pop	{r7}
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop

000020fc <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    20fc:	b480      	push	{r7}
    20fe:	b083      	sub	sp, #12
    2100:	af00      	add	r7, sp, #0
    2102:	6078      	str	r0, [r7, #4]
    2104:	460b      	mov	r3, r1
    2106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2108:	78fb      	ldrb	r3, [r7, #3]
    210a:	2b00      	cmp	r3, #0
    210c:	d00a      	beq.n	2124 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	899b      	ldrh	r3, [r3, #12]
    2112:	b29b      	uxth	r3, r3
    2114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    2118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    211c:	b29a      	uxth	r2, r3
    211e:	687b      	ldr	r3, [r7, #4]
    2120:	819a      	strh	r2, [r3, #12]
    2122:	e009      	b.n	2138 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	899b      	ldrh	r3, [r3, #12]
    2128:	b29b      	uxth	r3, r3
    212a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    212e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2132:	b29a      	uxth	r2, r3
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	819a      	strh	r2, [r3, #12]
  }
}
    2138:	f107 070c 	add.w	r7, r7, #12
    213c:	46bd      	mov	sp, r7
    213e:	bc80      	pop	{r7}
    2140:	4770      	bx	lr
    2142:	bf00      	nop

00002144 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
    214c:	460b      	mov	r3, r1
    214e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2150:	78fb      	ldrb	r3, [r7, #3]
    2152:	2b00      	cmp	r3, #0
    2154:	d008      	beq.n	2168 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	8a9b      	ldrh	r3, [r3, #20]
    215a:	b29b      	uxth	r3, r3
    215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2160:	b29a      	uxth	r2, r3
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	829a      	strh	r2, [r3, #20]
    2166:	e007      	b.n	2178 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	8a9b      	ldrh	r3, [r3, #20]
    216c:	b29b      	uxth	r3, r3
    216e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2172:	b29a      	uxth	r2, r3
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	829a      	strh	r2, [r3, #20]
  }
}
    2178:	f107 070c 	add.w	r7, r7, #12
    217c:	46bd      	mov	sp, r7
    217e:	bc80      	pop	{r7}
    2180:	4770      	bx	lr
    2182:	bf00      	nop

00002184 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    2184:	b480      	push	{r7}
    2186:	b083      	sub	sp, #12
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
    218c:	460b      	mov	r3, r1
    218e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	8a9b      	ldrh	r3, [r3, #20]
    2194:	b29b      	uxth	r3, r3
    2196:	f023 0304 	bic.w	r3, r3, #4
    219a:	b29a      	uxth	r2, r3
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	8a9b      	ldrh	r3, [r3, #20]
    21a4:	b29a      	uxth	r2, r3
    21a6:	887b      	ldrh	r3, [r7, #2]
    21a8:	4313      	orrs	r3, r2
    21aa:	b29a      	uxth	r2, r3
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	829a      	strh	r2, [r3, #20]
}
    21b0:	f107 070c 	add.w	r7, r7, #12
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    21bc:	b480      	push	{r7}
    21be:	b083      	sub	sp, #12
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	460b      	mov	r3, r1
    21c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    21c8:	78fb      	ldrb	r3, [r7, #3]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d008      	beq.n	21e0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	8a9b      	ldrh	r3, [r3, #20]
    21d2:	b29b      	uxth	r3, r3
    21d4:	f043 0302 	orr.w	r3, r3, #2
    21d8:	b29a      	uxth	r2, r3
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	829a      	strh	r2, [r3, #20]
    21de:	e007      	b.n	21f0 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	8a9b      	ldrh	r3, [r3, #20]
    21e4:	b29b      	uxth	r3, r3
    21e6:	f023 0302 	bic.w	r3, r3, #2
    21ea:	b29a      	uxth	r2, r3
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	829a      	strh	r2, [r3, #20]
  }
}
    21f0:	f107 070c 	add.w	r7, r7, #12
    21f4:	46bd      	mov	sp, r7
    21f6:	bc80      	pop	{r7}
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop

000021fc <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    21fc:	b480      	push	{r7}
    21fe:	b085      	sub	sp, #20
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
    2204:	460b      	mov	r3, r1
    2206:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    2208:	f04f 0300 	mov.w	r3, #0
    220c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	881b      	ldrh	r3, [r3, #0]
    2212:	b29a      	uxth	r2, r3
    2214:	887b      	ldrh	r3, [r7, #2]
    2216:	4013      	ands	r3, r2
    2218:	b29b      	uxth	r3, r3
    221a:	2b00      	cmp	r3, #0
    221c:	d003      	beq.n	2226 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    221e:	f04f 0301 	mov.w	r3, #1
    2222:	73fb      	strb	r3, [r7, #15]
    2224:	e002      	b.n	222c <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    2226:	f04f 0300 	mov.w	r3, #0
    222a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    222c:	7bfb      	ldrb	r3, [r7, #15]
}
    222e:	4618      	mov	r0, r3
    2230:	f107 0714 	add.w	r7, r7, #20
    2234:	46bd      	mov	sp, r7
    2236:	bc80      	pop	{r7}
    2238:	4770      	bx	lr
    223a:	bf00      	nop

0000223c <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    223c:	b480      	push	{r7}
    223e:	b083      	sub	sp, #12
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
    2244:	460b      	mov	r3, r1
    2246:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    2248:	887b      	ldrh	r3, [r7, #2]
    224a:	ea6f 0303 	mvn.w	r3, r3
    224e:	b29a      	uxth	r2, r3
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	801a      	strh	r2, [r3, #0]
}
    2254:	f107 070c 	add.w	r7, r7, #12
    2258:	46bd      	mov	sp, r7
    225a:	bc80      	pop	{r7}
    225c:	4770      	bx	lr
    225e:	bf00      	nop

00002260 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2260:	b480      	push	{r7}
    2262:	b087      	sub	sp, #28
    2264:	af00      	add	r7, sp, #0
    2266:	6078      	str	r0, [r7, #4]
    2268:	460b      	mov	r3, r1
    226a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    226c:	f04f 0300 	mov.w	r3, #0
    2270:	60fb      	str	r3, [r7, #12]
    2272:	f04f 0300 	mov.w	r3, #0
    2276:	617b      	str	r3, [r7, #20]
    2278:	f04f 0300 	mov.w	r3, #0
    227c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    227e:	f04f 0300 	mov.w	r3, #0
    2282:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2284:	887b      	ldrh	r3, [r7, #2]
    2286:	b2db      	uxtb	r3, r3
    2288:	ea4f 1353 	mov.w	r3, r3, lsr #5
    228c:	b2db      	uxtb	r3, r3
    228e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2290:	887b      	ldrh	r3, [r7, #2]
    2292:	f003 031f 	and.w	r3, r3, #31
    2296:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2298:	697b      	ldr	r3, [r7, #20]
    229a:	f04f 0201 	mov.w	r2, #1
    229e:	fa02 f303 	lsl.w	r3, r2, r3
    22a2:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    22a4:	68bb      	ldr	r3, [r7, #8]
    22a6:	2b01      	cmp	r3, #1
    22a8:	d106      	bne.n	22b8 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	899b      	ldrh	r3, [r3, #12]
    22ae:	b29b      	uxth	r3, r3
    22b0:	697a      	ldr	r2, [r7, #20]
    22b2:	4013      	ands	r3, r2
    22b4:	617b      	str	r3, [r7, #20]
    22b6:	e00f      	b.n	22d8 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    22b8:	68bb      	ldr	r3, [r7, #8]
    22ba:	2b02      	cmp	r3, #2
    22bc:	d106      	bne.n	22cc <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	8a1b      	ldrh	r3, [r3, #16]
    22c2:	b29b      	uxth	r3, r3
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	4013      	ands	r3, r2
    22c8:	617b      	str	r3, [r7, #20]
    22ca:	e005      	b.n	22d8 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    22cc:	687b      	ldr	r3, [r7, #4]
    22ce:	8a9b      	ldrh	r3, [r3, #20]
    22d0:	b29b      	uxth	r3, r3
    22d2:	697a      	ldr	r2, [r7, #20]
    22d4:	4013      	ands	r3, r2
    22d6:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    22d8:	887b      	ldrh	r3, [r7, #2]
    22da:	ea4f 2313 	mov.w	r3, r3, lsr #8
    22de:	b29b      	uxth	r3, r3
    22e0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    22e2:	68fb      	ldr	r3, [r7, #12]
    22e4:	f04f 0201 	mov.w	r2, #1
    22e8:	fa02 f303 	lsl.w	r3, r2, r3
    22ec:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	881b      	ldrh	r3, [r3, #0]
    22f2:	b29b      	uxth	r3, r3
    22f4:	68fa      	ldr	r2, [r7, #12]
    22f6:	4013      	ands	r3, r2
    22f8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    22fa:	697b      	ldr	r3, [r7, #20]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d006      	beq.n	230e <USART_GetITStatus+0xae>
    2300:	68fb      	ldr	r3, [r7, #12]
    2302:	2b00      	cmp	r3, #0
    2304:	d003      	beq.n	230e <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    2306:	f04f 0301 	mov.w	r3, #1
    230a:	74fb      	strb	r3, [r7, #19]
    230c:	e002      	b.n	2314 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    230e:	f04f 0300 	mov.w	r3, #0
    2312:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    2314:	7cfb      	ldrb	r3, [r7, #19]
}
    2316:	4618      	mov	r0, r3
    2318:	f107 071c 	add.w	r7, r7, #28
    231c:	46bd      	mov	sp, r7
    231e:	bc80      	pop	{r7}
    2320:	4770      	bx	lr
    2322:	bf00      	nop

00002324 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2324:	b480      	push	{r7}
    2326:	b085      	sub	sp, #20
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
    232c:	460b      	mov	r3, r1
    232e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    2330:	f04f 0300 	mov.w	r3, #0
    2334:	81fb      	strh	r3, [r7, #14]
    2336:	f04f 0300 	mov.w	r3, #0
    233a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    233c:	887b      	ldrh	r3, [r7, #2]
    233e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2342:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    2344:	89fb      	ldrh	r3, [r7, #14]
    2346:	f04f 0201 	mov.w	r2, #1
    234a:	fa02 f303 	lsl.w	r3, r2, r3
    234e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    2350:	89bb      	ldrh	r3, [r7, #12]
    2352:	ea6f 0303 	mvn.w	r3, r3
    2356:	b29a      	uxth	r2, r3
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	801a      	strh	r2, [r3, #0]
}
    235c:	f107 0714 	add.w	r7, r7, #20
    2360:	46bd      	mov	sp, r7
    2362:	bc80      	pop	{r7}
    2364:	4770      	bx	lr
    2366:	bf00      	nop

00002368 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2368:	b480      	push	{r7}
    236a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    236c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2370:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2374:	f04f 0200 	mov.w	r2, #0
    2378:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    237e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2382:	f04f 0200 	mov.w	r2, #0
    2386:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    2388:	f44f 6380 	mov.w	r3, #1024	; 0x400
    238c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2390:	f04f 0200 	mov.w	r2, #0
    2394:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    2396:	f44f 6380 	mov.w	r3, #1024	; 0x400
    239a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    239e:	f04f 0200 	mov.w	r2, #0
    23a2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    23a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    23b0:	f2c0 020f 	movt	r2, #15
    23b4:	615a      	str	r2, [r3, #20]
}
    23b6:	46bd      	mov	sp, r7
    23b8:	bc80      	pop	{r7}
    23ba:	4770      	bx	lr

000023bc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    23bc:	b480      	push	{r7}
    23be:	b085      	sub	sp, #20
    23c0:	af00      	add	r7, sp, #0
    23c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    23c4:	f04f 0300 	mov.w	r3, #0
    23c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    23ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23d2:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	799b      	ldrb	r3, [r3, #6]
    23d8:	2b00      	cmp	r3, #0
    23da:	d078      	beq.n	24ce <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    23dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23ec:	6811      	ldr	r1, [r2, #0]
    23ee:	687a      	ldr	r2, [r7, #4]
    23f0:	6812      	ldr	r2, [r2, #0]
    23f2:	ea6f 0202 	mvn.w	r2, r2
    23f6:	400a      	ands	r2, r1
    23f8:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2402:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2406:	f2c4 0201 	movt	r2, #16385	; 0x4001
    240a:	6851      	ldr	r1, [r2, #4]
    240c:	687a      	ldr	r2, [r7, #4]
    240e:	6812      	ldr	r2, [r2, #0]
    2410:	ea6f 0202 	mvn.w	r2, r2
    2414:	400a      	ands	r2, r1
    2416:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	791b      	ldrb	r3, [r3, #4]
    241c:	68fa      	ldr	r2, [r7, #12]
    241e:	18d3      	adds	r3, r2, r3
    2420:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	68fa      	ldr	r2, [r7, #12]
    2426:	6811      	ldr	r1, [r2, #0]
    2428:	687a      	ldr	r2, [r7, #4]
    242a:	6812      	ldr	r2, [r2, #0]
    242c:	430a      	orrs	r2, r1
    242e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    2430:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2434:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2438:	f44f 6280 	mov.w	r2, #1024	; 0x400
    243c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2440:	6891      	ldr	r1, [r2, #8]
    2442:	687a      	ldr	r2, [r7, #4]
    2444:	6812      	ldr	r2, [r2, #0]
    2446:	ea6f 0202 	mvn.w	r2, r2
    244a:	400a      	ands	r2, r1
    244c:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    244e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2452:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2456:	f44f 6280 	mov.w	r2, #1024	; 0x400
    245a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    245e:	68d1      	ldr	r1, [r2, #12]
    2460:	687a      	ldr	r2, [r7, #4]
    2462:	6812      	ldr	r2, [r2, #0]
    2464:	ea6f 0202 	mvn.w	r2, r2
    2468:	400a      	ands	r2, r1
    246a:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	795b      	ldrb	r3, [r3, #5]
    2470:	2b10      	cmp	r3, #16
    2472:	d11a      	bne.n	24aa <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    2474:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2478:	f2c4 0301 	movt	r3, #16385	; 0x4001
    247c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2480:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2484:	6891      	ldr	r1, [r2, #8]
    2486:	687a      	ldr	r2, [r7, #4]
    2488:	6812      	ldr	r2, [r2, #0]
    248a:	430a      	orrs	r2, r1
    248c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    248e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2492:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2496:	f44f 6280 	mov.w	r2, #1024	; 0x400
    249a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    249e:	68d1      	ldr	r1, [r2, #12]
    24a0:	687a      	ldr	r2, [r7, #4]
    24a2:	6812      	ldr	r2, [r2, #0]
    24a4:	430a      	orrs	r2, r1
    24a6:	60da      	str	r2, [r3, #12]
    24a8:	e01f      	b.n	24ea <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    24aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    24ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24b2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	795b      	ldrb	r3, [r3, #5]
    24b8:	68fa      	ldr	r2, [r7, #12]
    24ba:	18d3      	adds	r3, r2, r3
    24bc:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	68fa      	ldr	r2, [r7, #12]
    24c2:	6811      	ldr	r1, [r2, #0]
    24c4:	687a      	ldr	r2, [r7, #4]
    24c6:	6812      	ldr	r2, [r2, #0]
    24c8:	430a      	orrs	r2, r1
    24ca:	601a      	str	r2, [r3, #0]
    24cc:	e00d      	b.n	24ea <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	791b      	ldrb	r3, [r3, #4]
    24d2:	68fa      	ldr	r2, [r7, #12]
    24d4:	18d3      	adds	r3, r2, r3
    24d6:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    24d8:	68fb      	ldr	r3, [r7, #12]
    24da:	68fa      	ldr	r2, [r7, #12]
    24dc:	6811      	ldr	r1, [r2, #0]
    24de:	687a      	ldr	r2, [r7, #4]
    24e0:	6812      	ldr	r2, [r2, #0]
    24e2:	ea6f 0202 	mvn.w	r2, r2
    24e6:	400a      	ands	r2, r1
    24e8:	601a      	str	r2, [r3, #0]
  }
}
    24ea:	f107 0714 	add.w	r7, r7, #20
    24ee:	46bd      	mov	sp, r7
    24f0:	bc80      	pop	{r7}
    24f2:	4770      	bx	lr

000024f4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    24f4:	b480      	push	{r7}
    24f6:	b083      	sub	sp, #12
    24f8:	af00      	add	r7, sp, #0
    24fa:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	f04f 0200 	mov.w	r2, #0
    2502:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	f04f 0200 	mov.w	r2, #0
    250a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	f04f 020c 	mov.w	r2, #12
    2512:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2514:	687b      	ldr	r3, [r7, #4]
    2516:	f04f 0200 	mov.w	r2, #0
    251a:	719a      	strb	r2, [r3, #6]
}
    251c:	f107 070c 	add.w	r7, r7, #12
    2520:	46bd      	mov	sp, r7
    2522:	bc80      	pop	{r7}
    2524:	4770      	bx	lr
    2526:	bf00      	nop

00002528 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2528:	b480      	push	{r7}
    252a:	b083      	sub	sp, #12
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    2530:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2534:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2538:	f44f 6280 	mov.w	r2, #1024	; 0x400
    253c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2540:	6911      	ldr	r1, [r2, #16]
    2542:	687a      	ldr	r2, [r7, #4]
    2544:	430a      	orrs	r2, r1
    2546:	611a      	str	r2, [r3, #16]
}
    2548:	f107 070c 	add.w	r7, r7, #12
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	bf00      	nop

00002554 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2554:	b480      	push	{r7}
    2556:	b085      	sub	sp, #20
    2558:	af00      	add	r7, sp, #0
    255a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    255c:	f04f 0300 	mov.w	r3, #0
    2560:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    2562:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2566:	f2c4 0301 	movt	r3, #16385	; 0x4001
    256a:	695a      	ldr	r2, [r3, #20]
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	4013      	ands	r3, r2
    2570:	2b00      	cmp	r3, #0
    2572:	d003      	beq.n	257c <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    2574:	f04f 0301 	mov.w	r3, #1
    2578:	73fb      	strb	r3, [r7, #15]
    257a:	e002      	b.n	2582 <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    257c:	f04f 0300 	mov.w	r3, #0
    2580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2582:	7bfb      	ldrb	r3, [r7, #15]
}
    2584:	4618      	mov	r0, r3
    2586:	f107 0714 	add.w	r7, r7, #20
    258a:	46bd      	mov	sp, r7
    258c:	bc80      	pop	{r7}
    258e:	4770      	bx	lr

00002590 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2590:	b480      	push	{r7}
    2592:	b083      	sub	sp, #12
    2594:	af00      	add	r7, sp, #0
    2596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2598:	f44f 6380 	mov.w	r3, #1024	; 0x400
    259c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25a0:	687a      	ldr	r2, [r7, #4]
    25a2:	615a      	str	r2, [r3, #20]
}
    25a4:	f107 070c 	add.w	r7, r7, #12
    25a8:	46bd      	mov	sp, r7
    25aa:	bc80      	pop	{r7}
    25ac:	4770      	bx	lr
    25ae:	bf00      	nop

000025b0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    25b0:	b480      	push	{r7}
    25b2:	b085      	sub	sp, #20
    25b4:	af00      	add	r7, sp, #0
    25b6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    25b8:	f04f 0300 	mov.w	r3, #0
    25bc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    25be:	f04f 0300 	mov.w	r3, #0
    25c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    25c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25cc:	681a      	ldr	r2, [r3, #0]
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	4013      	ands	r3, r2
    25d2:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    25d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    25d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    25dc:	695a      	ldr	r2, [r3, #20]
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	4013      	ands	r3, r2
    25e2:	2b00      	cmp	r3, #0
    25e4:	d006      	beq.n	25f4 <EXTI_GetITStatus+0x44>
    25e6:	68bb      	ldr	r3, [r7, #8]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d003      	beq.n	25f4 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    25ec:	f04f 0301 	mov.w	r3, #1
    25f0:	73fb      	strb	r3, [r7, #15]
    25f2:	e002      	b.n	25fa <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    25f4:	f04f 0300 	mov.w	r3, #0
    25f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    25fa:	7bfb      	ldrb	r3, [r7, #15]
}
    25fc:	4618      	mov	r0, r3
    25fe:	f107 0714 	add.w	r7, r7, #20
    2602:	46bd      	mov	sp, r7
    2604:	bc80      	pop	{r7}
    2606:	4770      	bx	lr

00002608 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2608:	b480      	push	{r7}
    260a:	b083      	sub	sp, #12
    260c:	af00      	add	r7, sp, #0
    260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2610:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2614:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2618:	687a      	ldr	r2, [r7, #4]
    261a:	615a      	str	r2, [r3, #20]
}
    261c:	f107 070c 	add.w	r7, r7, #12
    2620:	46bd      	mov	sp, r7
    2622:	bc80      	pop	{r7}
    2624:	4770      	bx	lr
    2626:	bf00      	nop

00002628 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2628:	b480      	push	{r7}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2630:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2634:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2638:	687a      	ldr	r2, [r7, #4]
    263a:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    263e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    2642:	60da      	str	r2, [r3, #12]
}
    2644:	f107 070c 	add.w	r7, r7, #12
    2648:	46bd      	mov	sp, r7
    264a:	bc80      	pop	{r7}
    264c:	4770      	bx	lr
    264e:	bf00      	nop

00002650 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2650:	b480      	push	{r7}
    2652:	b087      	sub	sp, #28
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2658:	f04f 0300 	mov.w	r3, #0
    265c:	617b      	str	r3, [r7, #20]
    265e:	f04f 0300 	mov.w	r3, #0
    2662:	613b      	str	r3, [r7, #16]
    2664:	f04f 030f 	mov.w	r3, #15
    2668:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	78db      	ldrb	r3, [r3, #3]
    266e:	2b00      	cmp	r3, #0
    2670:	d047      	beq.n	2702 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    2672:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2676:	f2ce 0300 	movt	r3, #57344	; 0xe000
    267a:	68db      	ldr	r3, [r3, #12]
    267c:	ea6f 0303 	mvn.w	r3, r3
    2680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2684:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2688:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    268a:	697b      	ldr	r3, [r7, #20]
    268c:	f1c3 0304 	rsb	r3, r3, #4
    2690:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2692:	697b      	ldr	r3, [r7, #20]
    2694:	68fa      	ldr	r2, [r7, #12]
    2696:	fa22 f303 	lsr.w	r3, r2, r3
    269a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	785b      	ldrb	r3, [r3, #1]
    26a0:	461a      	mov	r2, r3
    26a2:	693b      	ldr	r3, [r7, #16]
    26a4:	fa02 f303 	lsl.w	r3, r2, r3
    26a8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	789b      	ldrb	r3, [r3, #2]
    26ae:	461a      	mov	r2, r3
    26b0:	68fb      	ldr	r3, [r7, #12]
    26b2:	4013      	ands	r3, r2
    26b4:	697a      	ldr	r2, [r7, #20]
    26b6:	4313      	orrs	r3, r2
    26b8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    26ba:	697b      	ldr	r3, [r7, #20]
    26bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    26c0:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    26c2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    26c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    26ca:	687a      	ldr	r2, [r7, #4]
    26cc:	7812      	ldrb	r2, [r2, #0]
    26ce:	4611      	mov	r1, r2
    26d0:	697a      	ldr	r2, [r7, #20]
    26d2:	b2d2      	uxtb	r2, r2
    26d4:	185b      	adds	r3, r3, r1
    26d6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    26da:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    26de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    26e2:	687a      	ldr	r2, [r7, #4]
    26e4:	7812      	ldrb	r2, [r2, #0]
    26e6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    26ea:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    26ec:	6879      	ldr	r1, [r7, #4]
    26ee:	7809      	ldrb	r1, [r1, #0]
    26f0:	f001 011f 	and.w	r1, r1, #31
    26f4:	f04f 0001 	mov.w	r0, #1
    26f8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    26fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2700:	e014      	b.n	272c <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2702:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2706:	f2ce 0300 	movt	r3, #57344	; 0xe000
    270a:	687a      	ldr	r2, [r7, #4]
    270c:	7812      	ldrb	r2, [r2, #0]
    270e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2712:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2714:	6879      	ldr	r1, [r7, #4]
    2716:	7809      	ldrb	r1, [r1, #0]
    2718:	f001 011f 	and.w	r1, r1, #31
    271c:	f04f 0001 	mov.w	r0, #1
    2720:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2724:	f102 0220 	add.w	r2, r2, #32
    2728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    272c:	f107 071c 	add.w	r7, r7, #28
    2730:	46bd      	mov	sp, r7
    2732:	bc80      	pop	{r7}
    2734:	4770      	bx	lr
    2736:	bf00      	nop

00002738 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2738:	b480      	push	{r7}
    273a:	b083      	sub	sp, #12
    273c:	af00      	add	r7, sp, #0
    273e:	6078      	str	r0, [r7, #4]
    2740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    2742:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2746:	f2ce 0300 	movt	r3, #57344	; 0xe000
    274a:	683a      	ldr	r2, [r7, #0]
    274c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2750:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2754:	6879      	ldr	r1, [r7, #4]
    2756:	430a      	orrs	r2, r1
    2758:	609a      	str	r2, [r3, #8]
}
    275a:	f107 070c 	add.w	r7, r7, #12
    275e:	46bd      	mov	sp, r7
    2760:	bc80      	pop	{r7}
    2762:	4770      	bx	lr

00002764 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    2764:	b480      	push	{r7}
    2766:	b083      	sub	sp, #12
    2768:	af00      	add	r7, sp, #0
    276a:	4602      	mov	r2, r0
    276c:	460b      	mov	r3, r1
    276e:	71fa      	strb	r2, [r7, #7]
    2770:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2772:	79bb      	ldrb	r3, [r7, #6]
    2774:	2b00      	cmp	r3, #0
    2776:	d00c      	beq.n	2792 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2778:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    277c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2780:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2784:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2788:	6911      	ldr	r1, [r2, #16]
    278a:	79fa      	ldrb	r2, [r7, #7]
    278c:	430a      	orrs	r2, r1
    278e:	611a      	str	r2, [r3, #16]
    2790:	e00d      	b.n	27ae <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    2792:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2796:	f2ce 0300 	movt	r3, #57344	; 0xe000
    279a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    279e:	f2ce 0200 	movt	r2, #57344	; 0xe000
    27a2:	6911      	ldr	r1, [r2, #16]
    27a4:	79fa      	ldrb	r2, [r7, #7]
    27a6:	ea6f 0202 	mvn.w	r2, r2
    27aa:	400a      	ands	r2, r1
    27ac:	611a      	str	r2, [r3, #16]
  }
}
    27ae:	f107 070c 	add.w	r7, r7, #12
    27b2:	46bd      	mov	sp, r7
    27b4:	bc80      	pop	{r7}
    27b6:	4770      	bx	lr

000027b8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    27b8:	b480      	push	{r7}
    27ba:	b083      	sub	sp, #12
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	2b04      	cmp	r3, #4
    27c4:	d10c      	bne.n	27e0 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    27c6:	f24e 0310 	movw	r3, #57360	; 0xe010
    27ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    27ce:	f24e 0210 	movw	r2, #57360	; 0xe010
    27d2:	f2ce 0200 	movt	r2, #57344	; 0xe000
    27d6:	6812      	ldr	r2, [r2, #0]
    27d8:	f042 0204 	orr.w	r2, r2, #4
    27dc:	601a      	str	r2, [r3, #0]
    27de:	e00b      	b.n	27f8 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    27e0:	f24e 0310 	movw	r3, #57360	; 0xe010
    27e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    27e8:	f24e 0210 	movw	r2, #57360	; 0xe010
    27ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    27f0:	6812      	ldr	r2, [r2, #0]
    27f2:	f022 0204 	bic.w	r2, r2, #4
    27f6:	601a      	str	r2, [r3, #0]
  }
}
    27f8:	f107 070c 	add.w	r7, r7, #12
    27fc:	46bd      	mov	sp, r7
    27fe:	bc80      	pop	{r7}
    2800:	4770      	bx	lr
    2802:	bf00      	nop

00002804 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    2804:	b580      	push	{r7, lr}
    2806:	b086      	sub	sp, #24
    2808:	af00      	add	r7, sp, #0
    280a:	60f8      	str	r0, [r7, #12]
    280c:	60b9      	str	r1, [r7, #8]
    280e:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    2810:	f04f 0038 	mov.w	r0, #56	; 0x38
    2814:	f002 fa54 	bl	4cc0 <pvPortMalloc>
    2818:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    281a:	693b      	ldr	r3, [r7, #16]
    281c:	2b00      	cmp	r3, #0
    281e:	d061      	beq.n	28e4 <xCoRoutineCreate+0xe0>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2820:	f240 4398 	movw	r3, #1176	; 0x498
    2824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d107      	bne.n	283e <xCoRoutineCreate+0x3a>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    282e:	f240 4398 	movw	r3, #1176	; 0x498
    2832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2836:	693a      	ldr	r2, [r7, #16]
    2838:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    283a:	f000 fa35 	bl	2ca8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    283e:	68bb      	ldr	r3, [r7, #8]
    2840:	2b01      	cmp	r3, #1
    2842:	d902      	bls.n	284a <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    2844:	f04f 0301 	mov.w	r3, #1
    2848:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    284a:	693b      	ldr	r3, [r7, #16]
    284c:	f04f 0200 	mov.w	r2, #0
    2850:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2852:	693b      	ldr	r3, [r7, #16]
    2854:	68ba      	ldr	r2, [r7, #8]
    2856:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    2858:	693b      	ldr	r3, [r7, #16]
    285a:	687a      	ldr	r2, [r7, #4]
    285c:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    285e:	693b      	ldr	r3, [r7, #16]
    2860:	68fa      	ldr	r2, [r7, #12]
    2862:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2864:	693b      	ldr	r3, [r7, #16]
    2866:	f103 0304 	add.w	r3, r3, #4
    286a:	4618      	mov	r0, r3
    286c:	f000 fab2 	bl	2dd4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2870:	693b      	ldr	r3, [r7, #16]
    2872:	f103 0318 	add.w	r3, r3, #24
    2876:	4618      	mov	r0, r3
    2878:	f000 faac 	bl	2dd4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    287c:	693b      	ldr	r3, [r7, #16]
    287e:	693a      	ldr	r2, [r7, #16]
    2880:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2882:	693b      	ldr	r3, [r7, #16]
    2884:	693a      	ldr	r2, [r7, #16]
    2886:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2888:	68bb      	ldr	r3, [r7, #8]
    288a:	f1c3 0205 	rsb	r2, r3, #5
    288e:	693b      	ldr	r3, [r7, #16]
    2890:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2892:	693b      	ldr	r3, [r7, #16]
    2894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2896:	f240 439c 	movw	r3, #1180	; 0x49c
    289a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	429a      	cmp	r2, r3
    28a2:	d906      	bls.n	28b2 <xCoRoutineCreate+0xae>
    28a4:	693b      	ldr	r3, [r7, #16]
    28a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28a8:	f240 439c 	movw	r3, #1180	; 0x49c
    28ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28b0:	601a      	str	r2, [r3, #0]
    28b2:	693b      	ldr	r3, [r7, #16]
    28b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28b6:	4613      	mov	r3, r2
    28b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28bc:	189b      	adds	r3, r3, r2
    28be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28c2:	461a      	mov	r2, r3
    28c4:	f240 432c 	movw	r3, #1068	; 0x42c
    28c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28cc:	18d2      	adds	r2, r2, r3
    28ce:	693b      	ldr	r3, [r7, #16]
    28d0:	f103 0304 	add.w	r3, r3, #4
    28d4:	4610      	mov	r0, r2
    28d6:	4619      	mov	r1, r3
    28d8:	f000 fa8a 	bl	2df0 <vListInsertEnd>

		xReturn = pdPASS;
    28dc:	f04f 0301 	mov.w	r3, #1
    28e0:	617b      	str	r3, [r7, #20]
    28e2:	e002      	b.n	28ea <xCoRoutineCreate+0xe6>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    28e4:	f04f 33ff 	mov.w	r3, #4294967295
    28e8:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    28ea:	697b      	ldr	r3, [r7, #20]
}
    28ec:	4618      	mov	r0, r3
    28ee:	f107 0718 	add.w	r7, r7, #24
    28f2:	46bd      	mov	sp, r7
    28f4:	bd80      	pop	{r7, pc}
    28f6:	bf00      	nop

000028f8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b084      	sub	sp, #16
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    2900:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2902:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    290a:	681a      	ldr	r2, [r3, #0]
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	18d3      	adds	r3, r2, r3
    2910:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2912:	f240 4398 	movw	r3, #1176	; 0x498
    2916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	f103 0304 	add.w	r3, r3, #4
    2920:	4618      	mov	r0, r3
    2922:	f000 fac7 	bl	2eb4 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    2926:	f240 4398 	movw	r3, #1176	; 0x498
    292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	68fa      	ldr	r2, [r7, #12]
    2932:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2934:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	68fa      	ldr	r2, [r7, #12]
    2940:	429a      	cmp	r2, r3
    2942:	d210      	bcs.n	2966 <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2944:	f240 4380 	movw	r3, #1152	; 0x480
    2948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294c:	681a      	ldr	r2, [r3, #0]
    294e:	f240 4398 	movw	r3, #1176	; 0x498
    2952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2956:	681b      	ldr	r3, [r3, #0]
    2958:	f103 0304 	add.w	r3, r3, #4
    295c:	4610      	mov	r0, r2
    295e:	4619      	mov	r1, r3
    2960:	f000 fa6e 	bl	2e40 <vListInsert>
    2964:	e00f      	b.n	2986 <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2966:	f240 437c 	movw	r3, #1148	; 0x47c
    296a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    296e:	681a      	ldr	r2, [r3, #0]
    2970:	f240 4398 	movw	r3, #1176	; 0x498
    2974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	f103 0304 	add.w	r3, r3, #4
    297e:	4610      	mov	r0, r2
    2980:	4619      	mov	r1, r3
    2982:	f000 fa5d 	bl	2e40 <vListInsert>
	}

	if( pxEventList )
    2986:	683b      	ldr	r3, [r7, #0]
    2988:	2b00      	cmp	r3, #0
    298a:	d00a      	beq.n	29a2 <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    298c:	f240 4398 	movw	r3, #1176	; 0x498
    2990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2994:	681b      	ldr	r3, [r3, #0]
    2996:	f103 0318 	add.w	r3, r3, #24
    299a:	6838      	ldr	r0, [r7, #0]
    299c:	4619      	mov	r1, r3
    299e:	f000 fa4f 	bl	2e40 <vListInsert>
	}
}
    29a2:	f107 0710 	add.w	r7, r7, #16
    29a6:	46bd      	mov	sp, r7
    29a8:	bd80      	pop	{r7, pc}
    29aa:	bf00      	nop

000029ac <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    29ac:	b580      	push	{r7, lr}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    29b2:	e03f      	b.n	2a34 <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    29b4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    29b8:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    29bc:	f240 4384 	movw	r3, #1156	; 0x484
    29c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29c4:	68db      	ldr	r3, [r3, #12]
    29c6:	68db      	ldr	r3, [r3, #12]
    29c8:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    29ca:	687b      	ldr	r3, [r7, #4]
    29cc:	f103 0318 	add.w	r3, r3, #24
    29d0:	4618      	mov	r0, r3
    29d2:	f000 fa6f 	bl	2eb4 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    29d6:	f04f 0000 	mov.w	r0, #0
    29da:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	f103 0304 	add.w	r3, r3, #4
    29e4:	4618      	mov	r0, r3
    29e6:	f000 fa65 	bl	2eb4 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ee:	f240 439c 	movw	r3, #1180	; 0x49c
    29f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	429a      	cmp	r2, r3
    29fa:	d906      	bls.n	2a0a <prvCheckPendingReadyList+0x5e>
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a00:	f240 439c 	movw	r3, #1180	; 0x49c
    2a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a08:	601a      	str	r2, [r3, #0]
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a0e:	4613      	mov	r3, r2
    2a10:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a14:	189b      	adds	r3, r3, r2
    2a16:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a1a:	461a      	mov	r2, r3
    2a1c:	f240 432c 	movw	r3, #1068	; 0x42c
    2a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a24:	18d2      	adds	r2, r2, r3
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	f103 0304 	add.w	r3, r3, #4
    2a2c:	4610      	mov	r0, r2
    2a2e:	4619      	mov	r1, r3
    2a30:	f000 f9de 	bl	2df0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2a34:	f240 4384 	movw	r3, #1156	; 0x484
    2a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d1b8      	bne.n	29b4 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2a42:	f107 0708 	add.w	r7, r7, #8
    2a46:	46bd      	mov	sp, r7
    2a48:	bd80      	pop	{r7, pc}
    2a4a:	bf00      	nop

00002a4c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b082      	sub	sp, #8
    2a50:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2a52:	f001 fb55 	bl	4100 <xTaskGetTickCount>
    2a56:	4602      	mov	r2, r0
    2a58:	f240 43a4 	movw	r3, #1188	; 0x4a4
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	1ad2      	subs	r2, r2, r3
    2a64:	f240 43a8 	movw	r3, #1192	; 0x4a8
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2a6e:	e08f      	b.n	2b90 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
    2a70:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	f103 0201 	add.w	r2, r3, #1
    2a7e:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a86:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2a88:	f240 43a8 	movw	r3, #1192	; 0x4a8
    2a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a90:	681b      	ldr	r3, [r3, #0]
    2a92:	f103 32ff 	add.w	r2, r3, #4294967295
    2a96:	f240 43a8 	movw	r3, #1192	; 0x4a8
    2a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a9e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2aa0:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d165      	bne.n	2b7a <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2aae:	f240 437c 	movw	r3, #1148	; 0x47c
    2ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2aba:	f240 4380 	movw	r3, #1152	; 0x480
    2abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ac2:	681a      	ldr	r2, [r3, #0]
    2ac4:	f240 437c 	movw	r3, #1148	; 0x47c
    2ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2acc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2ace:	f240 4380 	movw	r3, #1152	; 0x480
    2ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad6:	687a      	ldr	r2, [r7, #4]
    2ad8:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2ada:	e04e      	b.n	2b7a <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2adc:	f240 437c 	movw	r3, #1148	; 0x47c
    2ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ae4:	681b      	ldr	r3, [r3, #0]
    2ae6:	68db      	ldr	r3, [r3, #12]
    2ae8:	68db      	ldr	r3, [r3, #12]
    2aea:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	685a      	ldr	r2, [r3, #4]
    2af0:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	429a      	cmp	r2, r3
    2afc:	d847      	bhi.n	2b8e <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    2afe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2b02:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    2b06:	683b      	ldr	r3, [r7, #0]
    2b08:	f103 0304 	add.w	r3, r3, #4
    2b0c:	4618      	mov	r0, r3
    2b0e:	f000 f9d1 	bl	2eb4 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2b12:	683b      	ldr	r3, [r7, #0]
    2b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b16:	2b00      	cmp	r3, #0
    2b18:	d005      	beq.n	2b26 <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    2b1a:	683b      	ldr	r3, [r7, #0]
    2b1c:	f103 0318 	add.w	r3, r3, #24
    2b20:	4618      	mov	r0, r3
    2b22:	f000 f9c7 	bl	2eb4 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2b26:	f04f 0000 	mov.w	r0, #0
    2b2a:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2b2e:	683b      	ldr	r3, [r7, #0]
    2b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b32:	f240 439c 	movw	r3, #1180	; 0x49c
    2b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	429a      	cmp	r2, r3
    2b3e:	d906      	bls.n	2b4e <prvCheckDelayedList+0x102>
    2b40:	683b      	ldr	r3, [r7, #0]
    2b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b44:	f240 439c 	movw	r3, #1180	; 0x49c
    2b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b4c:	601a      	str	r2, [r3, #0]
    2b4e:	683b      	ldr	r3, [r7, #0]
    2b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b52:	4613      	mov	r3, r2
    2b54:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b58:	189b      	adds	r3, r3, r2
    2b5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b5e:	461a      	mov	r2, r3
    2b60:	f240 432c 	movw	r3, #1068	; 0x42c
    2b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b68:	18d2      	adds	r2, r2, r3
    2b6a:	683b      	ldr	r3, [r7, #0]
    2b6c:	f103 0304 	add.w	r3, r3, #4
    2b70:	4610      	mov	r0, r2
    2b72:	4619      	mov	r1, r3
    2b74:	f000 f93c 	bl	2df0 <vListInsertEnd>
    2b78:	e000      	b.n	2b7c <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2b7a:	bf00      	nop
    2b7c:	f240 437c 	movw	r3, #1148	; 0x47c
    2b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1a7      	bne.n	2adc <prvCheckDelayedList+0x90>
    2b8c:	e000      	b.n	2b90 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2b8e:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2b90:	f240 43a8 	movw	r3, #1192	; 0x4a8
    2b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	f47f af68 	bne.w	2a70 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2ba0:	f240 43a0 	movw	r3, #1184	; 0x4a0
    2ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ba8:	681a      	ldr	r2, [r3, #0]
    2baa:	f240 43a4 	movw	r3, #1188	; 0x4a4
    2bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bb2:	601a      	str	r2, [r3, #0]
}
    2bb4:	f107 0708 	add.w	r7, r7, #8
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd80      	pop	{r7, pc}

00002bbc <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2bc2:	f7ff fef3 	bl	29ac <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2bc6:	f7ff ff41 	bl	2a4c <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2bca:	e012      	b.n	2bf2 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2bcc:	f240 439c 	movw	r3, #1180	; 0x49c
    2bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d060      	beq.n	2c9c <vCoRoutineSchedule+0xe0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2bda:	f240 439c 	movw	r3, #1180	; 0x49c
    2bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2be2:	681b      	ldr	r3, [r3, #0]
    2be4:	f103 32ff 	add.w	r2, r3, #4294967295
    2be8:	f240 439c 	movw	r3, #1180	; 0x49c
    2bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf0:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2bf2:	f240 439c 	movw	r3, #1180	; 0x49c
    2bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bfa:	681a      	ldr	r2, [r3, #0]
    2bfc:	4613      	mov	r3, r2
    2bfe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c02:	189b      	adds	r3, r3, r2
    2c04:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c08:	461a      	mov	r2, r3
    2c0a:	f240 432c 	movw	r3, #1068	; 0x42c
    2c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c12:	18d3      	adds	r3, r2, r3
    2c14:	681b      	ldr	r3, [r3, #0]
    2c16:	2b00      	cmp	r3, #0
    2c18:	d0d8      	beq.n	2bcc <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2c1a:	f240 439c 	movw	r3, #1180	; 0x49c
    2c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c22:	681a      	ldr	r2, [r3, #0]
    2c24:	4613      	mov	r3, r2
    2c26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c2a:	189b      	adds	r3, r3, r2
    2c2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c30:	461a      	mov	r2, r3
    2c32:	f240 432c 	movw	r3, #1068	; 0x42c
    2c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c3a:	18d3      	adds	r3, r2, r3
    2c3c:	607b      	str	r3, [r7, #4]
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	685b      	ldr	r3, [r3, #4]
    2c42:	685a      	ldr	r2, [r3, #4]
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	605a      	str	r2, [r3, #4]
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	685a      	ldr	r2, [r3, #4]
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	f103 0308 	add.w	r3, r3, #8
    2c52:	429a      	cmp	r2, r3
    2c54:	d104      	bne.n	2c60 <vCoRoutineSchedule+0xa4>
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	685b      	ldr	r3, [r3, #4]
    2c5a:	685a      	ldr	r2, [r3, #4]
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	605a      	str	r2, [r3, #4]
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	685b      	ldr	r3, [r3, #4]
    2c64:	68da      	ldr	r2, [r3, #12]
    2c66:	f240 4398 	movw	r3, #1176	; 0x498
    2c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6e:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2c70:	f240 4398 	movw	r3, #1176	; 0x498
    2c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c78:	681b      	ldr	r3, [r3, #0]
    2c7a:	681a      	ldr	r2, [r3, #0]
    2c7c:	f240 4398 	movw	r3, #1176	; 0x498
    2c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c84:	6819      	ldr	r1, [r3, #0]
    2c86:	f240 4398 	movw	r3, #1176	; 0x498
    2c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c8e:	681b      	ldr	r3, [r3, #0]
    2c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c92:	4608      	mov	r0, r1
    2c94:	4619      	mov	r1, r3
    2c96:	4790      	blx	r2

	return;
    2c98:	bf00      	nop
    2c9a:	e000      	b.n	2c9e <vCoRoutineSchedule+0xe2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    2c9c:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    2c9e:	f107 0708 	add.w	r7, r7, #8
    2ca2:	46bd      	mov	sp, r7
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	bf00      	nop

00002ca8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b082      	sub	sp, #8
    2cac:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2cae:	f04f 0300 	mov.w	r3, #0
    2cb2:	607b      	str	r3, [r7, #4]
    2cb4:	e013      	b.n	2cde <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2cb6:	687a      	ldr	r2, [r7, #4]
    2cb8:	4613      	mov	r3, r2
    2cba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cbe:	189b      	adds	r3, r3, r2
    2cc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cc4:	461a      	mov	r2, r3
    2cc6:	f240 432c 	movw	r3, #1068	; 0x42c
    2cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cce:	18d3      	adds	r3, r2, r3
    2cd0:	4618      	mov	r0, r3
    2cd2:	f000 f85f 	bl	2d94 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	f103 0301 	add.w	r3, r3, #1
    2cdc:	607b      	str	r3, [r7, #4]
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	2b01      	cmp	r3, #1
    2ce2:	d9e8      	bls.n	2cb6 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2ce4:	f240 4054 	movw	r0, #1108	; 0x454
    2ce8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2cec:	f000 f852 	bl	2d94 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2cf0:	f240 4068 	movw	r0, #1128	; 0x468
    2cf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2cf8:	f000 f84c 	bl	2d94 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2cfc:	f240 4084 	movw	r0, #1156	; 0x484
    2d00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2d04:	f000 f846 	bl	2d94 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2d08:	f240 437c 	movw	r3, #1148	; 0x47c
    2d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d10:	f240 4254 	movw	r2, #1108	; 0x454
    2d14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2d18:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2d1a:	f240 4380 	movw	r3, #1152	; 0x480
    2d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d22:	f240 4268 	movw	r2, #1128	; 0x468
    2d26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2d2a:	601a      	str	r2, [r3, #0]
}
    2d2c:	f107 0708 	add.w	r7, r7, #8
    2d30:	46bd      	mov	sp, r7
    2d32:	bd80      	pop	{r7, pc}

00002d34 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b084      	sub	sp, #16
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	68db      	ldr	r3, [r3, #12]
    2d40:	68db      	ldr	r3, [r3, #12]
    2d42:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2d44:	68bb      	ldr	r3, [r7, #8]
    2d46:	f103 0318 	add.w	r3, r3, #24
    2d4a:	4618      	mov	r0, r3
    2d4c:	f000 f8b2 	bl	2eb4 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2d50:	68bb      	ldr	r3, [r7, #8]
    2d52:	f103 0318 	add.w	r3, r3, #24
    2d56:	f240 4084 	movw	r0, #1156	; 0x484
    2d5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2d5e:	4619      	mov	r1, r3
    2d60:	f000 f846 	bl	2df0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2d64:	68bb      	ldr	r3, [r7, #8]
    2d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d68:	f240 4398 	movw	r3, #1176	; 0x498
    2d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d74:	429a      	cmp	r2, r3
    2d76:	d303      	bcc.n	2d80 <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
    2d78:	f04f 0301 	mov.w	r3, #1
    2d7c:	60fb      	str	r3, [r7, #12]
    2d7e:	e002      	b.n	2d86 <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
    2d80:	f04f 0300 	mov.w	r3, #0
    2d84:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    2d86:	68fb      	ldr	r3, [r7, #12]
}
    2d88:	4618      	mov	r0, r3
    2d8a:	f107 0710 	add.w	r7, r7, #16
    2d8e:	46bd      	mov	sp, r7
    2d90:	bd80      	pop	{r7, pc}
    2d92:	bf00      	nop

00002d94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2d94:	b480      	push	{r7}
    2d96:	b083      	sub	sp, #12
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	f103 0208 	add.w	r2, r3, #8
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	f04f 32ff 	mov.w	r2, #4294967295
    2dac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	f103 0208 	add.w	r2, r3, #8
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	f103 0208 	add.w	r2, r3, #8
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	f04f 0200 	mov.w	r2, #0
    2dc8:	601a      	str	r2, [r3, #0]
}
    2dca:	f107 070c 	add.w	r7, r7, #12
    2dce:	46bd      	mov	sp, r7
    2dd0:	bc80      	pop	{r7}
    2dd2:	4770      	bx	lr

00002dd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2dd4:	b480      	push	{r7}
    2dd6:	b083      	sub	sp, #12
    2dd8:	af00      	add	r7, sp, #0
    2dda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	f04f 0200 	mov.w	r2, #0
    2de2:	611a      	str	r2, [r3, #16]
}
    2de4:	f107 070c 	add.w	r7, r7, #12
    2de8:	46bd      	mov	sp, r7
    2dea:	bc80      	pop	{r7}
    2dec:	4770      	bx	lr
    2dee:	bf00      	nop

00002df0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2df0:	b480      	push	{r7}
    2df2:	b085      	sub	sp, #20
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
    2df8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	685b      	ldr	r3, [r3, #4]
    2dfe:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2e00:	68fb      	ldr	r3, [r7, #12]
    2e02:	685a      	ldr	r2, [r3, #4]
    2e04:	683b      	ldr	r3, [r7, #0]
    2e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	685a      	ldr	r2, [r3, #4]
    2e0c:	683b      	ldr	r3, [r7, #0]
    2e0e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e10:	68fb      	ldr	r3, [r7, #12]
    2e12:	685b      	ldr	r3, [r3, #4]
    2e14:	683a      	ldr	r2, [r7, #0]
    2e16:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e18:	68fb      	ldr	r3, [r7, #12]
    2e1a:	683a      	ldr	r2, [r7, #0]
    2e1c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	683a      	ldr	r2, [r7, #0]
    2e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e24:	683b      	ldr	r3, [r7, #0]
    2e26:	687a      	ldr	r2, [r7, #4]
    2e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	f103 0201 	add.w	r2, r3, #1
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	601a      	str	r2, [r3, #0]
}
    2e36:	f107 0714 	add.w	r7, r7, #20
    2e3a:	46bd      	mov	sp, r7
    2e3c:	bc80      	pop	{r7}
    2e3e:	4770      	bx	lr

00002e40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2e40:	b480      	push	{r7}
    2e42:	b085      	sub	sp, #20
    2e44:	af00      	add	r7, sp, #0
    2e46:	6078      	str	r0, [r7, #4]
    2e48:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2e50:	68bb      	ldr	r3, [r7, #8]
    2e52:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e56:	d103      	bne.n	2e60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2e58:	687b      	ldr	r3, [r7, #4]
    2e5a:	691b      	ldr	r3, [r3, #16]
    2e5c:	60fb      	str	r3, [r7, #12]
    2e5e:	e00d      	b.n	2e7c <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	f103 0308 	add.w	r3, r3, #8
    2e66:	60fb      	str	r3, [r7, #12]
    2e68:	e002      	b.n	2e70 <vListInsert+0x30>
    2e6a:	68fb      	ldr	r3, [r7, #12]
    2e6c:	685b      	ldr	r3, [r3, #4]
    2e6e:	60fb      	str	r3, [r7, #12]
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	685b      	ldr	r3, [r3, #4]
    2e74:	681a      	ldr	r2, [r3, #0]
    2e76:	68bb      	ldr	r3, [r7, #8]
    2e78:	429a      	cmp	r2, r3
    2e7a:	d9f6      	bls.n	2e6a <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	685a      	ldr	r2, [r3, #4]
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e84:	683b      	ldr	r3, [r7, #0]
    2e86:	685b      	ldr	r3, [r3, #4]
    2e88:	683a      	ldr	r2, [r7, #0]
    2e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	68fa      	ldr	r2, [r7, #12]
    2e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e92:	68fb      	ldr	r3, [r7, #12]
    2e94:	683a      	ldr	r2, [r7, #0]
    2e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e98:	683b      	ldr	r3, [r7, #0]
    2e9a:	687a      	ldr	r2, [r7, #4]
    2e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	f103 0201 	add.w	r2, r3, #1
    2ea6:	687b      	ldr	r3, [r7, #4]
    2ea8:	601a      	str	r2, [r3, #0]
}
    2eaa:	f107 0714 	add.w	r7, r7, #20
    2eae:	46bd      	mov	sp, r7
    2eb0:	bc80      	pop	{r7}
    2eb2:	4770      	bx	lr

00002eb4 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2eb4:	b480      	push	{r7}
    2eb6:	b085      	sub	sp, #20
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	685b      	ldr	r3, [r3, #4]
    2ec0:	687a      	ldr	r2, [r7, #4]
    2ec2:	6892      	ldr	r2, [r2, #8]
    2ec4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	689b      	ldr	r3, [r3, #8]
    2eca:	687a      	ldr	r2, [r7, #4]
    2ecc:	6852      	ldr	r2, [r2, #4]
    2ece:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	691b      	ldr	r3, [r3, #16]
    2ed4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2ed6:	68fb      	ldr	r3, [r7, #12]
    2ed8:	685a      	ldr	r2, [r3, #4]
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	429a      	cmp	r2, r3
    2ede:	d103      	bne.n	2ee8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	689a      	ldr	r2, [r3, #8]
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	f04f 0200 	mov.w	r2, #0
    2eee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2ef0:	68fb      	ldr	r3, [r7, #12]
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	f103 32ff 	add.w	r2, r3, #4294967295
    2ef8:	68fb      	ldr	r3, [r7, #12]
    2efa:	601a      	str	r2, [r3, #0]
}
    2efc:	f107 0714 	add.w	r7, r7, #20
    2f00:	46bd      	mov	sp, r7
    2f02:	bc80      	pop	{r7}
    2f04:	4770      	bx	lr
    2f06:	bf00      	nop

00002f08 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2f08:	b580      	push	{r7, lr}
    2f0a:	b084      	sub	sp, #16
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	6078      	str	r0, [r7, #4]
    2f10:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2f12:	f04f 0301 	mov.w	r3, #1
    2f16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2f18:	683b      	ldr	r3, [r7, #0]
    2f1a:	2b01      	cmp	r3, #1
    2f1c:	d00d      	beq.n	2f3a <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f22:	2b00      	cmp	r3, #0
    2f24:	d002      	beq.n	2f2c <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    2f26:	f04f 0300 	mov.w	r3, #0
    2f2a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	691b      	ldr	r3, [r3, #16]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d002      	beq.n	2f3a <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    2f34:	f04f 0300 	mov.w	r3, #0
    2f38:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d133      	bne.n	2fa8 <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	681a      	ldr	r2, [r3, #0]
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2f48:	6879      	ldr	r1, [r7, #4]
    2f4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2f4c:	fb01 f303 	mul.w	r3, r1, r3
    2f50:	18d2      	adds	r2, r2, r3
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	f04f 0200 	mov.w	r2, #0
    2f5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	681a      	ldr	r2, [r3, #0]
    2f62:	687b      	ldr	r3, [r7, #4]
    2f64:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	681a      	ldr	r2, [r3, #0]
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2f6e:	f103 33ff 	add.w	r3, r3, #4294967295
    2f72:	6879      	ldr	r1, [r7, #4]
    2f74:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2f76:	fb01 f303 	mul.w	r3, r1, r3
    2f7a:	18d2      	adds	r2, r2, r3
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	f04f 32ff 	mov.w	r2, #4294967295
    2f86:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	f04f 32ff 	mov.w	r2, #4294967295
    2f8e:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	f103 0310 	add.w	r3, r3, #16
    2f96:	4618      	mov	r0, r3
    2f98:	f7ff fefc 	bl	2d94 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2fa2:	4618      	mov	r0, r3
    2fa4:	f7ff fef6 	bl	2d94 <vListInitialise>
	}

	return xReturn;
    2fa8:	68fb      	ldr	r3, [r7, #12]
}
    2faa:	4618      	mov	r0, r3
    2fac:	f107 0710 	add.w	r7, r7, #16
    2fb0:	46bd      	mov	sp, r7
    2fb2:	bd80      	pop	{r7, pc}

00002fb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b088      	sub	sp, #32
    2fb8:	af00      	add	r7, sp, #0
    2fba:	60f8      	str	r0, [r7, #12]
    2fbc:	60b9      	str	r1, [r7, #8]
    2fbe:	4613      	mov	r3, r2
    2fc0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2fc2:	f04f 0300 	mov.w	r3, #0
    2fc6:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2fc8:	68fb      	ldr	r3, [r7, #12]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d029      	beq.n	3022 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2fce:	f04f 004c 	mov.w	r0, #76	; 0x4c
    2fd2:	f001 fe75 	bl	4cc0 <pvPortMalloc>
    2fd6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2fd8:	69bb      	ldr	r3, [r7, #24]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d021      	beq.n	3022 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	68ba      	ldr	r2, [r7, #8]
    2fe2:	fb02 f303 	mul.w	r3, r2, r3
    2fe6:	f103 0301 	add.w	r3, r3, #1
    2fea:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2fec:	6978      	ldr	r0, [r7, #20]
    2fee:	f001 fe67 	bl	4cc0 <pvPortMalloc>
    2ff2:	4602      	mov	r2, r0
    2ff4:	69bb      	ldr	r3, [r7, #24]
    2ff6:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2ff8:	69bb      	ldr	r3, [r7, #24]
    2ffa:	681b      	ldr	r3, [r3, #0]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d00d      	beq.n	301c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3000:	69bb      	ldr	r3, [r7, #24]
    3002:	68fa      	ldr	r2, [r7, #12]
    3004:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3006:	69bb      	ldr	r3, [r7, #24]
    3008:	68ba      	ldr	r2, [r7, #8]
    300a:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    300c:	69b8      	ldr	r0, [r7, #24]
    300e:	f04f 0101 	mov.w	r1, #1
    3012:	f7ff ff79 	bl	2f08 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3016:	69bb      	ldr	r3, [r7, #24]
    3018:	61fb      	str	r3, [r7, #28]
    301a:	e002      	b.n	3022 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    301c:	69b8      	ldr	r0, [r7, #24]
    301e:	f001 fe9b 	bl	4d58 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3022:	69fb      	ldr	r3, [r7, #28]
}
    3024:	4618      	mov	r0, r3
    3026:	f107 0720 	add.w	r7, r7, #32
    302a:	46bd      	mov	sp, r7
    302c:	bd80      	pop	{r7, pc}
    302e:	bf00      	nop

00003030 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3030:	b580      	push	{r7, lr}
    3032:	b084      	sub	sp, #16
    3034:	af00      	add	r7, sp, #0
    3036:	4603      	mov	r3, r0
    3038:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    303a:	f04f 004c 	mov.w	r0, #76	; 0x4c
    303e:	f001 fe3f 	bl	4cc0 <pvPortMalloc>
    3042:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3044:	68fb      	ldr	r3, [r7, #12]
    3046:	2b00      	cmp	r3, #0
    3048:	d038      	beq.n	30bc <xQueueCreateMutex+0x8c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	f04f 0200 	mov.w	r2, #0
    3050:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	f04f 0200 	mov.w	r2, #0
    3058:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	f04f 0200 	mov.w	r2, #0
    3060:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3062:	68fb      	ldr	r3, [r7, #12]
    3064:	f04f 0200 	mov.w	r2, #0
    3068:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	f04f 0200 	mov.w	r2, #0
    3070:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3072:	68fb      	ldr	r3, [r7, #12]
    3074:	f04f 0201 	mov.w	r2, #1
    3078:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	f04f 0200 	mov.w	r2, #0
    3080:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3082:	68fb      	ldr	r3, [r7, #12]
    3084:	f04f 32ff 	mov.w	r2, #4294967295
    3088:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    308a:	68fb      	ldr	r3, [r7, #12]
    308c:	f04f 32ff 	mov.w	r2, #4294967295
    3090:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3092:	68fb      	ldr	r3, [r7, #12]
    3094:	f103 0310 	add.w	r3, r3, #16
    3098:	4618      	mov	r0, r3
    309a:	f7ff fe7b 	bl	2d94 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    30a4:	4618      	mov	r0, r3
    30a6:	f7ff fe75 	bl	2d94 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    30aa:	68f8      	ldr	r0, [r7, #12]
    30ac:	f04f 0100 	mov.w	r1, #0
    30b0:	f04f 0200 	mov.w	r2, #0
    30b4:	f04f 0300 	mov.w	r3, #0
    30b8:	f000 f820 	bl	30fc <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    30bc:	68fb      	ldr	r3, [r7, #12]
	}
    30be:	4618      	mov	r0, r3
    30c0:	f107 0710 	add.w	r7, r7, #16
    30c4:	46bd      	mov	sp, r7
    30c6:	bd80      	pop	{r7, pc}

000030c8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    30c8:	b580      	push	{r7, lr}
    30ca:	b084      	sub	sp, #16
    30cc:	af00      	add	r7, sp, #0
    30ce:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    30d0:	f001 fd72 	bl	4bb8 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	2b00      	cmp	r3, #0
    30da:	d103      	bne.n	30e4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	685b      	ldr	r3, [r3, #4]
    30e0:	60fb      	str	r3, [r7, #12]
    30e2:	e002      	b.n	30ea <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    30e4:	f04f 0300 	mov.w	r3, #0
    30e8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    30ea:	f001 fd7b 	bl	4be4 <vPortExitCritical>
		
		return pxReturn;
    30ee:	68fb      	ldr	r3, [r7, #12]
	}
    30f0:	4618      	mov	r0, r3
    30f2:	f107 0710 	add.w	r7, r7, #16
    30f6:	46bd      	mov	sp, r7
    30f8:	bd80      	pop	{r7, pc}
    30fa:	bf00      	nop

000030fc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b088      	sub	sp, #32
    3100:	af00      	add	r7, sp, #0
    3102:	60f8      	str	r0, [r7, #12]
    3104:	60b9      	str	r1, [r7, #8]
    3106:	607a      	str	r2, [r7, #4]
    3108:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    310a:	f04f 0300 	mov.w	r3, #0
    310e:	61fb      	str	r3, [r7, #28]
    3110:	e000      	b.n	3114 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3112:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3114:	f001 fd50 	bl	4bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3118:	68fb      	ldr	r3, [r7, #12]
    311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3120:	429a      	cmp	r2, r3
    3122:	d218      	bcs.n	3156 <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3124:	68f8      	ldr	r0, [r7, #12]
    3126:	68b9      	ldr	r1, [r7, #8]
    3128:	683a      	ldr	r2, [r7, #0]
    312a:	f000 f9fd 	bl	3528 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3132:	2b00      	cmp	r3, #0
    3134:	d00a      	beq.n	314c <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3136:	68fb      	ldr	r3, [r7, #12]
    3138:	f103 0324 	add.w	r3, r3, #36	; 0x24
    313c:	4618      	mov	r0, r3
    313e:	f001 f9a1 	bl	4484 <xTaskRemoveFromEventList>
    3142:	4603      	mov	r3, r0
    3144:	2b01      	cmp	r3, #1
    3146:	d101      	bne.n	314c <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3148:	f001 fd2a 	bl	4ba0 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    314c:	f001 fd4a 	bl	4be4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3150:	f04f 0301 	mov.w	r3, #1
    3154:	e05d      	b.n	3212 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	2b00      	cmp	r3, #0
    315a:	d104      	bne.n	3166 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    315c:	f001 fd42 	bl	4be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3160:	f04f 0300 	mov.w	r3, #0
    3164:	e055      	b.n	3212 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    3166:	69fb      	ldr	r3, [r7, #28]
    3168:	2b00      	cmp	r3, #0
    316a:	d107      	bne.n	317c <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    316c:	f107 0314 	add.w	r3, r7, #20
    3170:	4618      	mov	r0, r3
    3172:	f001 f9e9 	bl	4548 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3176:	f04f 0301 	mov.w	r3, #1
    317a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    317c:	f001 fd32 	bl	4be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3180:	f000 ff02 	bl	3f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3184:	f001 fd18 	bl	4bb8 <vPortEnterCritical>
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    318c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3190:	d103      	bne.n	319a <xQueueGenericSend+0x9e>
    3192:	68fb      	ldr	r3, [r7, #12]
    3194:	f04f 0200 	mov.w	r2, #0
    3198:	645a      	str	r2, [r3, #68]	; 0x44
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    319e:	f1b3 3fff 	cmp.w	r3, #4294967295
    31a2:	d103      	bne.n	31ac <xQueueGenericSend+0xb0>
    31a4:	68fb      	ldr	r3, [r7, #12]
    31a6:	f04f 0200 	mov.w	r2, #0
    31aa:	649a      	str	r2, [r3, #72]	; 0x48
    31ac:	f001 fd1a 	bl	4be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    31b0:	f107 0314 	add.w	r3, r7, #20
    31b4:	4618      	mov	r0, r3
    31b6:	f107 0304 	add.w	r3, r7, #4
    31ba:	4619      	mov	r1, r3
    31bc:	f001 f9dc 	bl	4578 <xTaskCheckForTimeOut>
    31c0:	4603      	mov	r3, r0
    31c2:	2b00      	cmp	r3, #0
    31c4:	d11e      	bne.n	3204 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    31c6:	68f8      	ldr	r0, [r7, #12]
    31c8:	f000 fab2 	bl	3730 <prvIsQueueFull>
    31cc:	4603      	mov	r3, r0
    31ce:	2b00      	cmp	r3, #0
    31d0:	d012      	beq.n	31f8 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    31d2:	68fb      	ldr	r3, [r7, #12]
    31d4:	f103 0210 	add.w	r2, r3, #16
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	4610      	mov	r0, r2
    31dc:	4619      	mov	r1, r3
    31de:	f001 f915 	bl	440c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    31e2:	68f8      	ldr	r0, [r7, #12]
    31e4:	f000 fa2c 	bl	3640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    31e8:	f000 fee0 	bl	3fac <xTaskResumeAll>
    31ec:	4603      	mov	r3, r0
    31ee:	2b00      	cmp	r3, #0
    31f0:	d18f      	bne.n	3112 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    31f2:	f001 fcd5 	bl	4ba0 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    31f6:	e78c      	b.n	3112 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    31f8:	68f8      	ldr	r0, [r7, #12]
    31fa:	f000 fa21 	bl	3640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    31fe:	f000 fed5 	bl	3fac <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3202:	e786      	b.n	3112 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3204:	68f8      	ldr	r0, [r7, #12]
    3206:	f000 fa1b 	bl	3640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    320a:	f000 fecf 	bl	3fac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    320e:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    3212:	4618      	mov	r0, r3
    3214:	f107 0720 	add.w	r7, r7, #32
    3218:	46bd      	mov	sp, r7
    321a:	bd80      	pop	{r7, pc}

0000321c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    321c:	b580      	push	{r7, lr}
    321e:	b086      	sub	sp, #24
    3220:	af00      	add	r7, sp, #0
    3222:	60f8      	str	r0, [r7, #12]
    3224:	60b9      	str	r1, [r7, #8]
    3226:	607a      	str	r2, [r7, #4]
    3228:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    322a:	f04f 0300 	mov.w	r3, #0
    322e:	613b      	str	r3, [r7, #16]
    3230:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3234:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3238:	68fb      	ldr	r3, [r7, #12]
    323a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    323c:	68fb      	ldr	r3, [r7, #12]
    323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3240:	429a      	cmp	r2, r3
    3242:	d225      	bcs.n	3290 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	68b9      	ldr	r1, [r7, #8]
    3248:	683a      	ldr	r2, [r7, #0]
    324a:	f000 f96d 	bl	3528 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    324e:	68fb      	ldr	r3, [r7, #12]
    3250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3252:	f1b3 3fff 	cmp.w	r3, #4294967295
    3256:	d111      	bne.n	327c <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3258:	68fb      	ldr	r3, [r7, #12]
    325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    325c:	2b00      	cmp	r3, #0
    325e:	d013      	beq.n	3288 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3260:	68fb      	ldr	r3, [r7, #12]
    3262:	f103 0324 	add.w	r3, r3, #36	; 0x24
    3266:	4618      	mov	r0, r3
    3268:	f001 f90c 	bl	4484 <xTaskRemoveFromEventList>
    326c:	4603      	mov	r3, r0
    326e:	2b00      	cmp	r3, #0
    3270:	d00a      	beq.n	3288 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	f04f 0201 	mov.w	r2, #1
    3278:	601a      	str	r2, [r3, #0]
    327a:	e005      	b.n	3288 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    327c:	68fb      	ldr	r3, [r7, #12]
    327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3280:	f103 0201 	add.w	r2, r3, #1
    3284:	68fb      	ldr	r3, [r7, #12]
    3286:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3288:	f04f 0301 	mov.w	r3, #1
    328c:	617b      	str	r3, [r7, #20]
    328e:	e002      	b.n	3296 <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3290:	f04f 0300 	mov.w	r3, #0
    3294:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3296:	f04f 0000 	mov.w	r0, #0
    329a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    329e:	697b      	ldr	r3, [r7, #20]
}
    32a0:	4618      	mov	r0, r3
    32a2:	f107 0718 	add.w	r7, r7, #24
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
    32aa:	bf00      	nop

000032ac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b088      	sub	sp, #32
    32b0:	af00      	add	r7, sp, #0
    32b2:	60f8      	str	r0, [r7, #12]
    32b4:	60b9      	str	r1, [r7, #8]
    32b6:	607a      	str	r2, [r7, #4]
    32b8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    32ba:	f04f 0300 	mov.w	r3, #0
    32be:	61fb      	str	r3, [r7, #28]
    32c0:	e000      	b.n	32c4 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32c2:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    32c4:	f001 fc78 	bl	4bb8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    32c8:	68fb      	ldr	r3, [r7, #12]
    32ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32cc:	2b00      	cmp	r3, #0
    32ce:	d03f      	beq.n	3350 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    32d0:	68fb      	ldr	r3, [r7, #12]
    32d2:	68db      	ldr	r3, [r3, #12]
    32d4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    32d6:	68f8      	ldr	r0, [r7, #12]
    32d8:	68b9      	ldr	r1, [r7, #8]
    32da:	f000 f989 	bl	35f0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    32de:	683b      	ldr	r3, [r7, #0]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d11e      	bne.n	3322 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32e8:	f103 32ff 	add.w	r2, r3, #4294967295
    32ec:	68fb      	ldr	r3, [r7, #12]
    32ee:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    32f0:	68fb      	ldr	r3, [r7, #12]
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d104      	bne.n	3302 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    32f8:	f001 fb16 	bl	4928 <xTaskGetCurrentTaskHandle>
    32fc:	4602      	mov	r2, r0
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	691b      	ldr	r3, [r3, #16]
    3306:	2b00      	cmp	r3, #0
    3308:	d01d      	beq.n	3346 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    330a:	68fb      	ldr	r3, [r7, #12]
    330c:	f103 0310 	add.w	r3, r3, #16
    3310:	4618      	mov	r0, r3
    3312:	f001 f8b7 	bl	4484 <xTaskRemoveFromEventList>
    3316:	4603      	mov	r3, r0
    3318:	2b01      	cmp	r3, #1
    331a:	d114      	bne.n	3346 <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
    331c:	f001 fc40 	bl	4ba0 <vPortYieldFromISR>
    3320:	e011      	b.n	3346 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3322:	68fb      	ldr	r3, [r7, #12]
    3324:	69ba      	ldr	r2, [r7, #24]
    3326:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3328:	68fb      	ldr	r3, [r7, #12]
    332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    332c:	2b00      	cmp	r3, #0
    332e:	d00a      	beq.n	3346 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	f103 0324 	add.w	r3, r3, #36	; 0x24
    3336:	4618      	mov	r0, r3
    3338:	f001 f8a4 	bl	4484 <xTaskRemoveFromEventList>
    333c:	4603      	mov	r3, r0
    333e:	2b00      	cmp	r3, #0
    3340:	d001      	beq.n	3346 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3342:	f001 fc2d 	bl	4ba0 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    3346:	f001 fc4d 	bl	4be4 <vPortExitCritical>
				return pdPASS;
    334a:	f04f 0301 	mov.w	r3, #1
    334e:	e06b      	b.n	3428 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	2b00      	cmp	r3, #0
    3354:	d104      	bne.n	3360 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3356:	f001 fc45 	bl	4be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    335a:	f04f 0300 	mov.w	r3, #0
    335e:	e063      	b.n	3428 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
    3360:	69fb      	ldr	r3, [r7, #28]
    3362:	2b00      	cmp	r3, #0
    3364:	d107      	bne.n	3376 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3366:	f107 0310 	add.w	r3, r7, #16
    336a:	4618      	mov	r0, r3
    336c:	f001 f8ec 	bl	4548 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3370:	f04f 0301 	mov.w	r3, #1
    3374:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3376:	f001 fc35 	bl	4be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    337a:	f000 fe05 	bl	3f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    337e:	f001 fc1b 	bl	4bb8 <vPortEnterCritical>
    3382:	68fb      	ldr	r3, [r7, #12]
    3384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3386:	f1b3 3fff 	cmp.w	r3, #4294967295
    338a:	d103      	bne.n	3394 <xQueueGenericReceive+0xe8>
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	f04f 0200 	mov.w	r2, #0
    3392:	645a      	str	r2, [r3, #68]	; 0x44
    3394:	68fb      	ldr	r3, [r7, #12]
    3396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3398:	f1b3 3fff 	cmp.w	r3, #4294967295
    339c:	d103      	bne.n	33a6 <xQueueGenericReceive+0xfa>
    339e:	68fb      	ldr	r3, [r7, #12]
    33a0:	f04f 0200 	mov.w	r2, #0
    33a4:	649a      	str	r2, [r3, #72]	; 0x48
    33a6:	f001 fc1d 	bl	4be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    33aa:	f107 0310 	add.w	r3, r7, #16
    33ae:	4618      	mov	r0, r3
    33b0:	f107 0304 	add.w	r3, r7, #4
    33b4:	4619      	mov	r1, r3
    33b6:	f001 f8df 	bl	4578 <xTaskCheckForTimeOut>
    33ba:	4603      	mov	r3, r0
    33bc:	2b00      	cmp	r3, #0
    33be:	d12c      	bne.n	341a <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    33c0:	68f8      	ldr	r0, [r7, #12]
    33c2:	f000 f98d 	bl	36e0 <prvIsQueueEmpty>
    33c6:	4603      	mov	r3, r0
    33c8:	2b00      	cmp	r3, #0
    33ca:	d020      	beq.n	340e <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    33cc:	68fb      	ldr	r3, [r7, #12]
    33ce:	681b      	ldr	r3, [r3, #0]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d108      	bne.n	33e6 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    33d4:	f001 fbf0 	bl	4bb8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    33d8:	68fb      	ldr	r3, [r7, #12]
    33da:	685b      	ldr	r3, [r3, #4]
    33dc:	4618      	mov	r0, r3
    33de:	f001 fab3 	bl	4948 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    33e2:	f001 fbff 	bl	4be4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	4610      	mov	r0, r2
    33f0:	4619      	mov	r1, r3
    33f2:	f001 f80b 	bl	440c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    33f6:	68f8      	ldr	r0, [r7, #12]
    33f8:	f000 f922 	bl	3640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    33fc:	f000 fdd6 	bl	3fac <xTaskResumeAll>
    3400:	4603      	mov	r3, r0
    3402:	2b00      	cmp	r3, #0
    3404:	f47f af5d 	bne.w	32c2 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    3408:	f001 fbca 	bl	4ba0 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    340c:	e759      	b.n	32c2 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    340e:	68f8      	ldr	r0, [r7, #12]
    3410:	f000 f916 	bl	3640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3414:	f000 fdca 	bl	3fac <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    3418:	e753      	b.n	32c2 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    341a:	68f8      	ldr	r0, [r7, #12]
    341c:	f000 f910 	bl	3640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3420:	f000 fdc4 	bl	3fac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3424:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    3428:	4618      	mov	r0, r3
    342a:	f107 0720 	add.w	r7, r7, #32
    342e:	46bd      	mov	sp, r7
    3430:	bd80      	pop	{r7, pc}
    3432:	bf00      	nop

00003434 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3434:	b580      	push	{r7, lr}
    3436:	b086      	sub	sp, #24
    3438:	af00      	add	r7, sp, #0
    343a:	60f8      	str	r0, [r7, #12]
    343c:	60b9      	str	r1, [r7, #8]
    343e:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3440:	f04f 0300 	mov.w	r3, #0
    3444:	613b      	str	r3, [r7, #16]
    3446:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    344a:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3452:	2b00      	cmp	r3, #0
    3454:	d02a      	beq.n	34ac <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3456:	68f8      	ldr	r0, [r7, #12]
    3458:	68b9      	ldr	r1, [r7, #8]
    345a:	f000 f8c9 	bl	35f0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3462:	f103 32ff 	add.w	r2, r3, #4294967295
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    346a:	68fb      	ldr	r3, [r7, #12]
    346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    346e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3472:	d111      	bne.n	3498 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	691b      	ldr	r3, [r3, #16]
    3478:	2b00      	cmp	r3, #0
    347a:	d013      	beq.n	34a4 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	f103 0310 	add.w	r3, r3, #16
    3482:	4618      	mov	r0, r3
    3484:	f000 fffe 	bl	4484 <xTaskRemoveFromEventList>
    3488:	4603      	mov	r3, r0
    348a:	2b00      	cmp	r3, #0
    348c:	d00a      	beq.n	34a4 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	f04f 0201 	mov.w	r2, #1
    3494:	601a      	str	r2, [r3, #0]
    3496:	e005      	b.n	34a4 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3498:	68fb      	ldr	r3, [r7, #12]
    349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    349c:	f103 0201 	add.w	r2, r3, #1
    34a0:	68fb      	ldr	r3, [r7, #12]
    34a2:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    34a4:	f04f 0301 	mov.w	r3, #1
    34a8:	617b      	str	r3, [r7, #20]
    34aa:	e002      	b.n	34b2 <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    34ac:	f04f 0300 	mov.w	r3, #0
    34b0:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    34b2:	f04f 0000 	mov.w	r0, #0
    34b6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    34ba:	697b      	ldr	r3, [r7, #20]
}
    34bc:	4618      	mov	r0, r3
    34be:	f107 0718 	add.w	r7, r7, #24
    34c2:	46bd      	mov	sp, r7
    34c4:	bd80      	pop	{r7, pc}
    34c6:	bf00      	nop

000034c8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    34c8:	b580      	push	{r7, lr}
    34ca:	b084      	sub	sp, #16
    34cc:	af00      	add	r7, sp, #0
    34ce:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    34d0:	f001 fb72 	bl	4bb8 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34d8:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    34da:	f001 fb83 	bl	4be4 <vPortExitCritical>

	return uxReturn;
    34de:	68fb      	ldr	r3, [r7, #12]
}
    34e0:	4618      	mov	r0, r3
    34e2:	f107 0710 	add.w	r7, r7, #16
    34e6:	46bd      	mov	sp, r7
    34e8:	bd80      	pop	{r7, pc}
    34ea:	bf00      	nop

000034ec <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    34ec:	b480      	push	{r7}
    34ee:	b085      	sub	sp, #20
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34f8:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    34fa:	68fb      	ldr	r3, [r7, #12]
}
    34fc:	4618      	mov	r0, r3
    34fe:	f107 0714 	add.w	r7, r7, #20
    3502:	46bd      	mov	sp, r7
    3504:	bc80      	pop	{r7}
    3506:	4770      	bx	lr

00003508 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3508:	b580      	push	{r7, lr}
    350a:	b082      	sub	sp, #8
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	681b      	ldr	r3, [r3, #0]
    3514:	4618      	mov	r0, r3
    3516:	f001 fc1f 	bl	4d58 <vPortFree>
	vPortFree( pxQueue );
    351a:	6878      	ldr	r0, [r7, #4]
    351c:	f001 fc1c 	bl	4d58 <vPortFree>
}
    3520:	f107 0708 	add.w	r7, r7, #8
    3524:	46bd      	mov	sp, r7
    3526:	bd80      	pop	{r7, pc}

00003528 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3528:	b580      	push	{r7, lr}
    352a:	b084      	sub	sp, #16
    352c:	af00      	add	r7, sp, #0
    352e:	60f8      	str	r0, [r7, #12]
    3530:	60b9      	str	r1, [r7, #8]
    3532:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3534:	68fb      	ldr	r3, [r7, #12]
    3536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3538:	2b00      	cmp	r3, #0
    353a:	d10d      	bne.n	3558 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    353c:	68fb      	ldr	r3, [r7, #12]
    353e:	681b      	ldr	r3, [r3, #0]
    3540:	2b00      	cmp	r3, #0
    3542:	d14a      	bne.n	35da <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	685b      	ldr	r3, [r3, #4]
    3548:	4618      	mov	r0, r3
    354a:	f001 fa69 	bl	4a20 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	f04f 0200 	mov.w	r2, #0
    3554:	605a      	str	r2, [r3, #4]
    3556:	e040      	b.n	35da <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	2b00      	cmp	r3, #0
    355c:	d11b      	bne.n	3596 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    355e:	68fb      	ldr	r3, [r7, #12]
    3560:	6899      	ldr	r1, [r3, #8]
    3562:	68fb      	ldr	r3, [r7, #12]
    3564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3566:	68ba      	ldr	r2, [r7, #8]
    3568:	4608      	mov	r0, r1
    356a:	4611      	mov	r1, r2
    356c:	461a      	mov	r2, r3
    356e:	f002 fba7 	bl	5cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3572:	68fb      	ldr	r3, [r7, #12]
    3574:	689a      	ldr	r2, [r3, #8]
    3576:	68fb      	ldr	r3, [r7, #12]
    3578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    357a:	18d2      	adds	r2, r2, r3
    357c:	68fb      	ldr	r3, [r7, #12]
    357e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	689a      	ldr	r2, [r3, #8]
    3584:	68fb      	ldr	r3, [r7, #12]
    3586:	685b      	ldr	r3, [r3, #4]
    3588:	429a      	cmp	r2, r3
    358a:	d326      	bcc.n	35da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    358c:	68fb      	ldr	r3, [r7, #12]
    358e:	681a      	ldr	r2, [r3, #0]
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	609a      	str	r2, [r3, #8]
    3594:	e021      	b.n	35da <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3596:	68fb      	ldr	r3, [r7, #12]
    3598:	68d9      	ldr	r1, [r3, #12]
    359a:	68fb      	ldr	r3, [r7, #12]
    359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    359e:	68ba      	ldr	r2, [r7, #8]
    35a0:	4608      	mov	r0, r1
    35a2:	4611      	mov	r1, r2
    35a4:	461a      	mov	r2, r3
    35a6:	f002 fb8b 	bl	5cc0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    35aa:	68fb      	ldr	r3, [r7, #12]
    35ac:	68da      	ldr	r2, [r3, #12]
    35ae:	68fb      	ldr	r3, [r7, #12]
    35b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35b2:	f1c3 0300 	rsb	r3, r3, #0
    35b6:	18d2      	adds	r2, r2, r3
    35b8:	68fb      	ldr	r3, [r7, #12]
    35ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	68da      	ldr	r2, [r3, #12]
    35c0:	68fb      	ldr	r3, [r7, #12]
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	429a      	cmp	r2, r3
    35c6:	d208      	bcs.n	35da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	685a      	ldr	r2, [r3, #4]
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35d0:	f1c3 0300 	rsb	r3, r3, #0
    35d4:	18d2      	adds	r2, r2, r3
    35d6:	68fb      	ldr	r3, [r7, #12]
    35d8:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    35da:	68fb      	ldr	r3, [r7, #12]
    35dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    35de:	f103 0201 	add.w	r2, r3, #1
    35e2:	68fb      	ldr	r3, [r7, #12]
    35e4:	639a      	str	r2, [r3, #56]	; 0x38
}
    35e6:	f107 0710 	add.w	r7, r7, #16
    35ea:	46bd      	mov	sp, r7
    35ec:	bd80      	pop	{r7, pc}
    35ee:	bf00      	nop

000035f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    35f0:	b580      	push	{r7, lr}
    35f2:	b082      	sub	sp, #8
    35f4:	af00      	add	r7, sp, #0
    35f6:	6078      	str	r0, [r7, #4]
    35f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	681b      	ldr	r3, [r3, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	d01a      	beq.n	3638 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	68da      	ldr	r2, [r3, #12]
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    360a:	18d2      	adds	r2, r2, r3
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	68da      	ldr	r2, [r3, #12]
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	685b      	ldr	r3, [r3, #4]
    3618:	429a      	cmp	r2, r3
    361a:	d303      	bcc.n	3624 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	681a      	ldr	r2, [r3, #0]
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	68da      	ldr	r2, [r3, #12]
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    362c:	6839      	ldr	r1, [r7, #0]
    362e:	4608      	mov	r0, r1
    3630:	4611      	mov	r1, r2
    3632:	461a      	mov	r2, r3
    3634:	f002 fb44 	bl	5cc0 <memcpy>
	}
}
    3638:	f107 0708 	add.w	r7, r7, #8
    363c:	46bd      	mov	sp, r7
    363e:	bd80      	pop	{r7, pc}

00003640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3640:	b580      	push	{r7, lr}
    3642:	b082      	sub	sp, #8
    3644:	af00      	add	r7, sp, #0
    3646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3648:	f001 fab6 	bl	4bb8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    364c:	e014      	b.n	3678 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3652:	2b00      	cmp	r3, #0
    3654:	d015      	beq.n	3682 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	f103 0324 	add.w	r3, r3, #36	; 0x24
    365c:	4618      	mov	r0, r3
    365e:	f000 ff11 	bl	4484 <xTaskRemoveFromEventList>
    3662:	4603      	mov	r3, r0
    3664:	2b00      	cmp	r3, #0
    3666:	d001      	beq.n	366c <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3668:	f000 ffd8 	bl	461c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3670:	f103 32ff 	add.w	r2, r3, #4294967295
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    367c:	2b00      	cmp	r3, #0
    367e:	dce6      	bgt.n	364e <prvUnlockQueue+0xe>
    3680:	e000      	b.n	3684 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    3682:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	f04f 32ff 	mov.w	r2, #4294967295
    368a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    368c:	f001 faaa 	bl	4be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3690:	f001 fa92 	bl	4bb8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3694:	e014      	b.n	36c0 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	691b      	ldr	r3, [r3, #16]
    369a:	2b00      	cmp	r3, #0
    369c:	d015      	beq.n	36ca <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	f103 0310 	add.w	r3, r3, #16
    36a4:	4618      	mov	r0, r3
    36a6:	f000 feed 	bl	4484 <xTaskRemoveFromEventList>
    36aa:	4603      	mov	r3, r0
    36ac:	2b00      	cmp	r3, #0
    36ae:	d001      	beq.n	36b4 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    36b0:	f000 ffb4 	bl	461c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    36b8:	f103 32ff 	add.w	r2, r3, #4294967295
    36bc:	687b      	ldr	r3, [r7, #4]
    36be:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    36c4:	2b00      	cmp	r3, #0
    36c6:	dce6      	bgt.n	3696 <prvUnlockQueue+0x56>
    36c8:	e000      	b.n	36cc <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    36ca:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	f04f 32ff 	mov.w	r2, #4294967295
    36d2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    36d4:	f001 fa86 	bl	4be4 <vPortExitCritical>
}
    36d8:	f107 0708 	add.w	r7, r7, #8
    36dc:	46bd      	mov	sp, r7
    36de:	bd80      	pop	{r7, pc}

000036e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b084      	sub	sp, #16
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    36e8:	f001 fa66 	bl	4bb8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    36f0:	2b00      	cmp	r3, #0
    36f2:	bf14      	ite	ne
    36f4:	2300      	movne	r3, #0
    36f6:	2301      	moveq	r3, #1
    36f8:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    36fa:	f001 fa73 	bl	4be4 <vPortExitCritical>

	return xReturn;
    36fe:	68fb      	ldr	r3, [r7, #12]
}
    3700:	4618      	mov	r0, r3
    3702:	f107 0710 	add.w	r7, r7, #16
    3706:	46bd      	mov	sp, r7
    3708:	bd80      	pop	{r7, pc}
    370a:	bf00      	nop

0000370c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    370c:	b480      	push	{r7}
    370e:	b085      	sub	sp, #20
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3718:	2b00      	cmp	r3, #0
    371a:	bf14      	ite	ne
    371c:	2300      	movne	r3, #0
    371e:	2301      	moveq	r3, #1
    3720:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3722:	68fb      	ldr	r3, [r7, #12]
}
    3724:	4618      	mov	r0, r3
    3726:	f107 0714 	add.w	r7, r7, #20
    372a:	46bd      	mov	sp, r7
    372c:	bc80      	pop	{r7}
    372e:	4770      	bx	lr

00003730 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3730:	b580      	push	{r7, lr}
    3732:	b084      	sub	sp, #16
    3734:	af00      	add	r7, sp, #0
    3736:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3738:	f001 fa3e 	bl	4bb8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3740:	687b      	ldr	r3, [r7, #4]
    3742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3744:	429a      	cmp	r2, r3
    3746:	bf14      	ite	ne
    3748:	2300      	movne	r3, #0
    374a:	2301      	moveq	r3, #1
    374c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    374e:	f001 fa49 	bl	4be4 <vPortExitCritical>

	return xReturn;
    3752:	68fb      	ldr	r3, [r7, #12]
}
    3754:	4618      	mov	r0, r3
    3756:	f107 0710 	add.w	r7, r7, #16
    375a:	46bd      	mov	sp, r7
    375c:	bd80      	pop	{r7, pc}
    375e:	bf00      	nop

00003760 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3770:	429a      	cmp	r2, r3
    3772:	bf14      	ite	ne
    3774:	2300      	movne	r3, #0
    3776:	2301      	moveq	r3, #1
    3778:	60fb      	str	r3, [r7, #12]

	return xReturn;
    377a:	68fb      	ldr	r3, [r7, #12]
}
    377c:	4618      	mov	r0, r3
    377e:	f107 0714 	add.w	r7, r7, #20
    3782:	46bd      	mov	sp, r7
    3784:	bc80      	pop	{r7}
    3786:	4770      	bx	lr

00003788 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3788:	b580      	push	{r7, lr}
    378a:	b08a      	sub	sp, #40	; 0x28
    378c:	af02      	add	r7, sp, #8
    378e:	60f8      	str	r0, [r7, #12]
    3790:	60b9      	str	r1, [r7, #8]
    3792:	603b      	str	r3, [r7, #0]
    3794:	4613      	mov	r3, r2
    3796:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3798:	88fb      	ldrh	r3, [r7, #6]
    379a:	4618      	mov	r0, r3
    379c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    379e:	f001 f87b 	bl	4898 <prvAllocateTCBAndStack>
    37a2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    37a4:	69bb      	ldr	r3, [r7, #24]
    37a6:	2b00      	cmp	r3, #0
    37a8:	f000 80a5 	beq.w	38f6 <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    37ac:	69bb      	ldr	r3, [r7, #24]
    37ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    37b0:	88fb      	ldrh	r3, [r7, #6]
    37b2:	f103 33ff 	add.w	r3, r3, #4294967295
    37b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    37ba:	18d3      	adds	r3, r2, r3
    37bc:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    37be:	697b      	ldr	r3, [r7, #20]
    37c0:	f023 0307 	bic.w	r3, r3, #7
    37c4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    37c6:	88fb      	ldrh	r3, [r7, #6]
    37c8:	9300      	str	r3, [sp, #0]
    37ca:	69b8      	ldr	r0, [r7, #24]
    37cc:	68b9      	ldr	r1, [r7, #8]
    37ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    37d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37d2:	f000 ff41 	bl	4658 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    37d6:	6978      	ldr	r0, [r7, #20]
    37d8:	68f9      	ldr	r1, [r7, #12]
    37da:	683a      	ldr	r2, [r7, #0]
    37dc:	f001 f968 	bl	4ab0 <pxPortInitialiseStack>
    37e0:	4602      	mov	r2, r0
    37e2:	69bb      	ldr	r3, [r7, #24]
    37e4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    37e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37e8:	2b00      	cmp	r3, #0
    37ea:	d002      	beq.n	37f2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    37ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37ee:	69ba      	ldr	r2, [r7, #24]
    37f0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    37f2:	f001 f9e1 	bl	4bb8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    37f6:	f240 5384 	movw	r3, #1412	; 0x584
    37fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	f103 0201 	add.w	r2, r3, #1
    3804:	f240 5384 	movw	r3, #1412	; 0x584
    3808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    380c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    380e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	2b00      	cmp	r3, #0
    381a:	d10f      	bne.n	383c <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    381c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3824:	69ba      	ldr	r2, [r7, #24]
    3826:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3828:	f240 5384 	movw	r3, #1412	; 0x584
    382c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	2b01      	cmp	r3, #1
    3834:	d118      	bne.n	3868 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3836:	f000 ff4b 	bl	46d0 <prvInitialiseTaskLists>
    383a:	e015      	b.n	3868 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    383c:	f240 5394 	movw	r3, #1428	; 0x594
    3840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	2b00      	cmp	r3, #0
    3848:	d10e      	bne.n	3868 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    384a:	f240 43ac 	movw	r3, #1196	; 0x4ac
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3858:	429a      	cmp	r2, r3
    385a:	d805      	bhi.n	3868 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    385c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3864:	69ba      	ldr	r2, [r7, #24]
    3866:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3868:	69bb      	ldr	r3, [r7, #24]
    386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    386c:	f240 538c 	movw	r3, #1420	; 0x58c
    3870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	429a      	cmp	r2, r3
    3878:	d906      	bls.n	3888 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    387a:	69bb      	ldr	r3, [r7, #24]
    387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    387e:	f240 538c 	movw	r3, #1420	; 0x58c
    3882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3886:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3888:	f240 53a8 	movw	r3, #1448	; 0x5a8
    388c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	f103 0201 	add.w	r2, r3, #1
    3896:	f240 53a8 	movw	r3, #1448	; 0x5a8
    389a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    389e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    38a0:	69bb      	ldr	r3, [r7, #24]
    38a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38a4:	f240 5390 	movw	r3, #1424	; 0x590
    38a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	429a      	cmp	r2, r3
    38b0:	d906      	bls.n	38c0 <xTaskGenericCreate+0x138>
    38b2:	69bb      	ldr	r3, [r7, #24]
    38b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38b6:	f240 5390 	movw	r3, #1424	; 0x590
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	601a      	str	r2, [r3, #0]
    38c0:	69bb      	ldr	r3, [r7, #24]
    38c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38c4:	4613      	mov	r3, r2
    38c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    38ca:	189b      	adds	r3, r3, r2
    38cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    38d0:	461a      	mov	r2, r3
    38d2:	f240 43b0 	movw	r3, #1200	; 0x4b0
    38d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38da:	18d2      	adds	r2, r2, r3
    38dc:	69bb      	ldr	r3, [r7, #24]
    38de:	f103 0304 	add.w	r3, r3, #4
    38e2:	4610      	mov	r0, r2
    38e4:	4619      	mov	r1, r3
    38e6:	f7ff fa83 	bl	2df0 <vListInsertEnd>

			xReturn = pdPASS;
    38ea:	f04f 0301 	mov.w	r3, #1
    38ee:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    38f0:	f001 f978 	bl	4be4 <vPortExitCritical>
    38f4:	e002      	b.n	38fc <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    38f6:	f04f 33ff 	mov.w	r3, #4294967295
    38fa:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    38fc:	69fb      	ldr	r3, [r7, #28]
    38fe:	2b01      	cmp	r3, #1
    3900:	d111      	bne.n	3926 <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
    3902:	f240 5394 	movw	r3, #1428	; 0x594
    3906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	2b00      	cmp	r3, #0
    390e:	d00a      	beq.n	3926 <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3910:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3918:	681b      	ldr	r3, [r3, #0]
    391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    391e:	429a      	cmp	r2, r3
    3920:	d201      	bcs.n	3926 <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
    3922:	f001 f93d 	bl	4ba0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    3926:	69fb      	ldr	r3, [r7, #28]
}
    3928:	4618      	mov	r0, r3
    392a:	f107 0720 	add.w	r7, r7, #32
    392e:	46bd      	mov	sp, r7
    3930:	bd80      	pop	{r7, pc}
    3932:	bf00      	nop

00003934 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3934:	b580      	push	{r7, lr}
    3936:	b084      	sub	sp, #16
    3938:	af00      	add	r7, sp, #0
    393a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    393c:	f001 f93c 	bl	4bb8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3940:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	687a      	ldr	r2, [r7, #4]
    394c:	429a      	cmp	r2, r3
    394e:	d102      	bne.n	3956 <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    3950:	f04f 0300 	mov.w	r3, #0
    3954:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	2b00      	cmp	r3, #0
    395a:	d105      	bne.n	3968 <vTaskDelete+0x34>
    395c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	e000      	b.n	396a <vTaskDelete+0x36>
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	f103 0304 	add.w	r3, r3, #4
    3972:	4618      	mov	r0, r3
    3974:	f7ff fa9e 	bl	2eb4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3978:	68fb      	ldr	r3, [r7, #12]
    397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    397c:	2b00      	cmp	r3, #0
    397e:	d005      	beq.n	398c <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3980:	68fb      	ldr	r3, [r7, #12]
    3982:	f103 0318 	add.w	r3, r3, #24
    3986:	4618      	mov	r0, r3
    3988:	f7ff fa94 	bl	2eb4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    398c:	68fb      	ldr	r3, [r7, #12]
    398e:	f103 0304 	add.w	r3, r3, #4
    3992:	f240 5058 	movw	r0, #1368	; 0x558
    3996:	f2c2 0000 	movt	r0, #8192	; 0x2000
    399a:	4619      	mov	r1, r3
    399c:	f7ff fa28 	bl	2df0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    39a0:	f240 536c 	movw	r3, #1388	; 0x56c
    39a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	f103 0201 	add.w	r2, r3, #1
    39ae:	f240 536c 	movw	r3, #1388	; 0x56c
    39b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39b6:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    39b8:	f240 53a8 	movw	r3, #1448	; 0x5a8
    39bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	f103 0201 	add.w	r2, r3, #1
    39c6:	f240 53a8 	movw	r3, #1448	; 0x5a8
    39ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ce:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    39d0:	f001 f908 	bl	4be4 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    39d4:	f240 5394 	movw	r3, #1428	; 0x594
    39d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d004      	beq.n	39ec <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d101      	bne.n	39ec <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    39e8:	f001 f8da 	bl	4ba0 <vPortYieldFromISR>
			}
		}
	}
    39ec:	f107 0710 	add.w	r7, r7, #16
    39f0:	46bd      	mov	sp, r7
    39f2:	bd80      	pop	{r7, pc}

000039f4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    39f4:	b580      	push	{r7, lr}
    39f6:	b086      	sub	sp, #24
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
    39fc:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    39fe:	f04f 0300 	mov.w	r3, #0
    3a02:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3a04:	f000 fac0 	bl	3f88 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	681a      	ldr	r2, [r3, #0]
    3a0c:	683b      	ldr	r3, [r7, #0]
    3a0e:	18d3      	adds	r3, r2, r3
    3a10:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    3a12:	687b      	ldr	r3, [r7, #4]
    3a14:	681a      	ldr	r2, [r3, #0]
    3a16:	f240 5388 	movw	r3, #1416	; 0x588
    3a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	429a      	cmp	r2, r3
    3a22:	d910      	bls.n	3a46 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	681a      	ldr	r2, [r3, #0]
    3a28:	693b      	ldr	r3, [r7, #16]
    3a2a:	429a      	cmp	r2, r3
    3a2c:	d91b      	bls.n	3a66 <vTaskDelayUntil+0x72>
    3a2e:	f240 5388 	movw	r3, #1416	; 0x588
    3a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a36:	681b      	ldr	r3, [r3, #0]
    3a38:	693a      	ldr	r2, [r7, #16]
    3a3a:	429a      	cmp	r2, r3
    3a3c:	d913      	bls.n	3a66 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    3a3e:	f04f 0301 	mov.w	r3, #1
    3a42:	617b      	str	r3, [r7, #20]
    3a44:	e00f      	b.n	3a66 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	681a      	ldr	r2, [r3, #0]
    3a4a:	693b      	ldr	r3, [r7, #16]
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d807      	bhi.n	3a60 <vTaskDelayUntil+0x6c>
    3a50:	f240 5388 	movw	r3, #1416	; 0x588
    3a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	693a      	ldr	r2, [r7, #16]
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d902      	bls.n	3a66 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    3a60:	f04f 0301 	mov.w	r3, #1
    3a64:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	693a      	ldr	r2, [r7, #16]
    3a6a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3a6c:	697b      	ldr	r3, [r7, #20]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d00c      	beq.n	3a8c <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3a72:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	f103 0304 	add.w	r3, r3, #4
    3a80:	4618      	mov	r0, r3
    3a82:	f7ff fa17 	bl	2eb4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a86:	6938      	ldr	r0, [r7, #16]
    3a88:	f000 fec0 	bl	480c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3a8c:	f000 fa8e 	bl	3fac <xTaskResumeAll>
    3a90:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a92:	68fb      	ldr	r3, [r7, #12]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d101      	bne.n	3a9c <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    3a98:	f001 f882 	bl	4ba0 <vPortYieldFromISR>
		}
	}
    3a9c:	f107 0718 	add.w	r7, r7, #24
    3aa0:	46bd      	mov	sp, r7
    3aa2:	bd80      	pop	{r7, pc}

00003aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b084      	sub	sp, #16
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3aac:	f04f 0300 	mov.w	r3, #0
    3ab0:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d019      	beq.n	3aec <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
    3ab8:	f000 fa66 	bl	3f88 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3abc:	f240 5388 	movw	r3, #1416	; 0x588
    3ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac4:	681a      	ldr	r2, [r3, #0]
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	18d3      	adds	r3, r2, r3
    3aca:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3acc:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	f103 0304 	add.w	r3, r3, #4
    3ada:	4618      	mov	r0, r3
    3adc:	f7ff f9ea 	bl	2eb4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3ae0:	68b8      	ldr	r0, [r7, #8]
    3ae2:	f000 fe93 	bl	480c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3ae6:	f000 fa61 	bl	3fac <xTaskResumeAll>
    3aea:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d101      	bne.n	3af6 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    3af2:	f001 f855 	bl	4ba0 <vPortYieldFromISR>
		}
	}
    3af6:	f107 0710 	add.w	r7, r7, #16
    3afa:	46bd      	mov	sp, r7
    3afc:	bd80      	pop	{r7, pc}
    3afe:	bf00      	nop

00003b00 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3b08:	f001 f856 	bl	4bb8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d105      	bne.n	3b1e <uxTaskPriorityGet+0x1e>
    3b12:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	e000      	b.n	3b20 <uxTaskPriorityGet+0x20>
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    3b22:	68fb      	ldr	r3, [r7, #12]
    3b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b26:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    3b28:	f001 f85c 	bl	4be4 <vPortExitCritical>

		return uxReturn;
    3b2c:	68bb      	ldr	r3, [r7, #8]
	}
    3b2e:	4618      	mov	r0, r3
    3b30:	f107 0710 	add.w	r7, r7, #16
    3b34:	46bd      	mov	sp, r7
    3b36:	bd80      	pop	{r7, pc}

00003b38 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b086      	sub	sp, #24
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	6078      	str	r0, [r7, #4]
    3b40:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    3b42:	f04f 0300 	mov.w	r3, #0
    3b46:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    3b48:	683b      	ldr	r3, [r7, #0]
    3b4a:	2b04      	cmp	r3, #4
    3b4c:	d902      	bls.n	3b54 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3b4e:	f04f 0304 	mov.w	r3, #4
    3b52:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    3b54:	f001 f830 	bl	4bb8 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    3b58:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	687a      	ldr	r2, [r7, #4]
    3b64:	429a      	cmp	r2, r3
    3b66:	d102      	bne.n	3b6e <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    3b68:	f04f 0300 	mov.w	r3, #0
    3b6c:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d105      	bne.n	3b80 <vTaskPrioritySet+0x48>
    3b74:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	e000      	b.n	3b82 <vTaskPrioritySet+0x4a>
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3b84:	693b      	ldr	r3, [r7, #16]
    3b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3b88:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	683b      	ldr	r3, [r7, #0]
    3b8e:	429a      	cmp	r2, r3
    3b90:	d062      	beq.n	3c58 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3b92:	683a      	ldr	r2, [r7, #0]
    3b94:	68fb      	ldr	r3, [r7, #12]
    3b96:	429a      	cmp	r2, r3
    3b98:	d906      	bls.n	3ba8 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d009      	beq.n	3bb4 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3ba0:	f04f 0301 	mov.w	r3, #1
    3ba4:	617b      	str	r3, [r7, #20]
    3ba6:	e005      	b.n	3bb4 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
    3ba8:	687b      	ldr	r3, [r7, #4]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d102      	bne.n	3bb4 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3bae:	f04f 0301 	mov.w	r3, #1
    3bb2:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3bb4:	693b      	ldr	r3, [r7, #16]
    3bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3bb8:	693b      	ldr	r3, [r7, #16]
    3bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3bbc:	429a      	cmp	r2, r3
    3bbe:	d102      	bne.n	3bc6 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3bc0:	693b      	ldr	r3, [r7, #16]
    3bc2:	683a      	ldr	r2, [r7, #0]
    3bc4:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3bc6:	693b      	ldr	r3, [r7, #16]
    3bc8:	683a      	ldr	r2, [r7, #0]
    3bca:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3bcc:	683b      	ldr	r3, [r7, #0]
    3bce:	f1c3 0205 	rsb	r2, r3, #5
    3bd2:	693b      	ldr	r3, [r7, #16]
    3bd4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3bd6:	693b      	ldr	r3, [r7, #16]
    3bd8:	6959      	ldr	r1, [r3, #20]
    3bda:	68fa      	ldr	r2, [r7, #12]
    3bdc:	4613      	mov	r3, r2
    3bde:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3be2:	189b      	adds	r3, r3, r2
    3be4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3be8:	461a      	mov	r2, r3
    3bea:	f240 43b0 	movw	r3, #1200	; 0x4b0
    3bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf2:	18d3      	adds	r3, r2, r3
    3bf4:	4299      	cmp	r1, r3
    3bf6:	d12a      	bne.n	3c4e <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3bf8:	693b      	ldr	r3, [r7, #16]
    3bfa:	f103 0304 	add.w	r3, r3, #4
    3bfe:	4618      	mov	r0, r3
    3c00:	f7ff f958 	bl	2eb4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c04:	693b      	ldr	r3, [r7, #16]
    3c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c08:	f240 5390 	movw	r3, #1424	; 0x590
    3c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	429a      	cmp	r2, r3
    3c14:	d906      	bls.n	3c24 <vTaskPrioritySet+0xec>
    3c16:	693b      	ldr	r3, [r7, #16]
    3c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c1a:	f240 5390 	movw	r3, #1424	; 0x590
    3c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c22:	601a      	str	r2, [r3, #0]
    3c24:	693b      	ldr	r3, [r7, #16]
    3c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c28:	4613      	mov	r3, r2
    3c2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c2e:	189b      	adds	r3, r3, r2
    3c30:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c34:	461a      	mov	r2, r3
    3c36:	f240 43b0 	movw	r3, #1200	; 0x4b0
    3c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3e:	18d2      	adds	r2, r2, r3
    3c40:	693b      	ldr	r3, [r7, #16]
    3c42:	f103 0304 	add.w	r3, r3, #4
    3c46:	4610      	mov	r0, r2
    3c48:	4619      	mov	r1, r3
    3c4a:	f7ff f8d1 	bl	2df0 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    3c4e:	697b      	ldr	r3, [r7, #20]
    3c50:	2b01      	cmp	r3, #1
    3c52:	d101      	bne.n	3c58 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
    3c54:	f000 ffa4 	bl	4ba0 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3c58:	f000 ffc4 	bl	4be4 <vPortExitCritical>
	}
    3c5c:	f107 0718 	add.w	r7, r7, #24
    3c60:	46bd      	mov	sp, r7
    3c62:	bd80      	pop	{r7, pc}

00003c64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3c64:	b580      	push	{r7, lr}
    3c66:	b084      	sub	sp, #16
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3c6c:	f000 ffa4 	bl	4bb8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3c70:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	687a      	ldr	r2, [r7, #4]
    3c7c:	429a      	cmp	r2, r3
    3c7e:	d102      	bne.n	3c86 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    3c80:	f04f 0300 	mov.w	r3, #0
    3c84:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d105      	bne.n	3c98 <vTaskSuspend+0x34>
    3c8c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	e000      	b.n	3c9a <vTaskSuspend+0x36>
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3c9c:	68fb      	ldr	r3, [r7, #12]
    3c9e:	f103 0304 	add.w	r3, r3, #4
    3ca2:	4618      	mov	r0, r3
    3ca4:	f7ff f906 	bl	2eb4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3ca8:	68fb      	ldr	r3, [r7, #12]
    3caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cac:	2b00      	cmp	r3, #0
    3cae:	d005      	beq.n	3cbc <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3cb0:	68fb      	ldr	r3, [r7, #12]
    3cb2:	f103 0318 	add.w	r3, r3, #24
    3cb6:	4618      	mov	r0, r3
    3cb8:	f7ff f8fc 	bl	2eb4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3cbc:	68fb      	ldr	r3, [r7, #12]
    3cbe:	f103 0304 	add.w	r3, r3, #4
    3cc2:	f240 5070 	movw	r0, #1392	; 0x570
    3cc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3cca:	4619      	mov	r1, r3
    3ccc:	f7ff f890 	bl	2df0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3cd0:	f000 ff88 	bl	4be4 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d11f      	bne.n	3d1a <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    3cda:	f240 5394 	movw	r3, #1428	; 0x594
    3cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d002      	beq.n	3cee <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3ce8:	f000 ff5a 	bl	4ba0 <vPortYieldFromISR>
    3cec:	e015      	b.n	3d1a <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3cee:	f240 5370 	movw	r3, #1392	; 0x570
    3cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf6:	681a      	ldr	r2, [r3, #0]
    3cf8:	f240 5384 	movw	r3, #1412	; 0x584
    3cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	429a      	cmp	r2, r3
    3d04:	d107      	bne.n	3d16 <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3d06:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d0e:	f04f 0200 	mov.w	r2, #0
    3d12:	601a      	str	r2, [r3, #0]
    3d14:	e001      	b.n	3d1a <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    3d16:	f000 fb15 	bl	4344 <vTaskSwitchContext>
				}
			}
		}
	}
    3d1a:	f107 0710 	add.w	r7, r7, #16
    3d1e:	46bd      	mov	sp, r7
    3d20:	bd80      	pop	{r7, pc}
    3d22:	bf00      	nop

00003d24 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3d24:	b480      	push	{r7}
    3d26:	b085      	sub	sp, #20
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3d2c:	f04f 0300 	mov.w	r3, #0
    3d30:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3d36:	68bb      	ldr	r3, [r7, #8]
    3d38:	695a      	ldr	r2, [r3, #20]
    3d3a:	f240 5370 	movw	r3, #1392	; 0x570
    3d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d42:	429a      	cmp	r2, r3
    3d44:	d10e      	bne.n	3d64 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3d46:	68bb      	ldr	r3, [r7, #8]
    3d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d4a:	f240 5344 	movw	r3, #1348	; 0x544
    3d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d52:	429a      	cmp	r2, r3
    3d54:	d006      	beq.n	3d64 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3d56:	68bb      	ldr	r3, [r7, #8]
    3d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d102      	bne.n	3d64 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    3d5e:	f04f 0301 	mov.w	r3, #1
    3d62:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3d64:	68fb      	ldr	r3, [r7, #12]
	}
    3d66:	4618      	mov	r0, r3
    3d68:	f107 0714 	add.w	r7, r7, #20
    3d6c:	46bd      	mov	sp, r7
    3d6e:	bc80      	pop	{r7}
    3d70:	4770      	bx	lr
    3d72:	bf00      	nop

00003d74 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3d74:	b580      	push	{r7, lr}
    3d76:	b084      	sub	sp, #16
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3d80:	68fb      	ldr	r3, [r7, #12]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d048      	beq.n	3e18 <vTaskResume+0xa4>
    3d86:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d8e:	681b      	ldr	r3, [r3, #0]
    3d90:	68fa      	ldr	r2, [r7, #12]
    3d92:	429a      	cmp	r2, r3
    3d94:	d040      	beq.n	3e18 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    3d96:	f000 ff0f 	bl	4bb8 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3d9a:	68f8      	ldr	r0, [r7, #12]
    3d9c:	f7ff ffc2 	bl	3d24 <xTaskIsTaskSuspended>
    3da0:	4603      	mov	r3, r0
    3da2:	2b01      	cmp	r3, #1
    3da4:	d136      	bne.n	3e14 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3da6:	68fb      	ldr	r3, [r7, #12]
    3da8:	f103 0304 	add.w	r3, r3, #4
    3dac:	4618      	mov	r0, r3
    3dae:	f7ff f881 	bl	2eb4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3db2:	68fb      	ldr	r3, [r7, #12]
    3db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3db6:	f240 5390 	movw	r3, #1424	; 0x590
    3dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	429a      	cmp	r2, r3
    3dc2:	d906      	bls.n	3dd2 <vTaskResume+0x5e>
    3dc4:	68fb      	ldr	r3, [r7, #12]
    3dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dc8:	f240 5390 	movw	r3, #1424	; 0x590
    3dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd0:	601a      	str	r2, [r3, #0]
    3dd2:	68fb      	ldr	r3, [r7, #12]
    3dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dd6:	4613      	mov	r3, r2
    3dd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ddc:	189b      	adds	r3, r3, r2
    3dde:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3de2:	461a      	mov	r2, r3
    3de4:	f240 43b0 	movw	r3, #1200	; 0x4b0
    3de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dec:	18d2      	adds	r2, r2, r3
    3dee:	68fb      	ldr	r3, [r7, #12]
    3df0:	f103 0304 	add.w	r3, r3, #4
    3df4:	4610      	mov	r0, r2
    3df6:	4619      	mov	r1, r3
    3df8:	f7fe fffa 	bl	2df0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3dfc:	68fb      	ldr	r3, [r7, #12]
    3dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e00:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e0c:	429a      	cmp	r2, r3
    3e0e:	d301      	bcc.n	3e14 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3e10:	f000 fec6 	bl	4ba0 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3e14:	f000 fee6 	bl	4be4 <vPortExitCritical>
		}
	}
    3e18:	f107 0710 	add.w	r7, r7, #16
    3e1c:	46bd      	mov	sp, r7
    3e1e:	bd80      	pop	{r7, pc}

00003e20 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3e20:	b580      	push	{r7, lr}
    3e22:	b086      	sub	sp, #24
    3e24:	af00      	add	r7, sp, #0
    3e26:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3e28:	f04f 0300 	mov.w	r3, #0
    3e2c:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e32:	f04f 0300 	mov.w	r3, #0
    3e36:	60fb      	str	r3, [r7, #12]
    3e38:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e3c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3e40:	6938      	ldr	r0, [r7, #16]
    3e42:	f7ff ff6f 	bl	3d24 <xTaskIsTaskSuspended>
    3e46:	4603      	mov	r3, r0
    3e48:	2b01      	cmp	r3, #1
    3e4a:	d149      	bne.n	3ee0 <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3e4c:	f240 5398 	movw	r3, #1432	; 0x598
    3e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e54:	681b      	ldr	r3, [r3, #0]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d138      	bne.n	3ecc <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3e5a:	693b      	ldr	r3, [r7, #16]
    3e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e5e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    3e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e6a:	429a      	cmp	r2, r3
    3e6c:	bf34      	ite	cc
    3e6e:	2300      	movcc	r3, #0
    3e70:	2301      	movcs	r3, #1
    3e72:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3e74:	693b      	ldr	r3, [r7, #16]
    3e76:	f103 0304 	add.w	r3, r3, #4
    3e7a:	4618      	mov	r0, r3
    3e7c:	f7ff f81a 	bl	2eb4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3e80:	693b      	ldr	r3, [r7, #16]
    3e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e84:	f240 5390 	movw	r3, #1424	; 0x590
    3e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e8c:	681b      	ldr	r3, [r3, #0]
    3e8e:	429a      	cmp	r2, r3
    3e90:	d906      	bls.n	3ea0 <xTaskResumeFromISR+0x80>
    3e92:	693b      	ldr	r3, [r7, #16]
    3e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3e96:	f240 5390 	movw	r3, #1424	; 0x590
    3e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9e:	601a      	str	r2, [r3, #0]
    3ea0:	693b      	ldr	r3, [r7, #16]
    3ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ea4:	4613      	mov	r3, r2
    3ea6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3eaa:	189b      	adds	r3, r3, r2
    3eac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3eb0:	461a      	mov	r2, r3
    3eb2:	f240 43b0 	movw	r3, #1200	; 0x4b0
    3eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eba:	18d2      	adds	r2, r2, r3
    3ebc:	693b      	ldr	r3, [r7, #16]
    3ebe:	f103 0304 	add.w	r3, r3, #4
    3ec2:	4610      	mov	r0, r2
    3ec4:	4619      	mov	r1, r3
    3ec6:	f7fe ff93 	bl	2df0 <vListInsertEnd>
    3eca:	e009      	b.n	3ee0 <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3ecc:	693b      	ldr	r3, [r7, #16]
    3ece:	f103 0318 	add.w	r3, r3, #24
    3ed2:	f240 5044 	movw	r0, #1348	; 0x544
    3ed6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3eda:	4619      	mov	r1, r3
    3edc:	f7fe ff88 	bl	2df0 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3ee0:	f04f 0000 	mov.w	r0, #0
    3ee4:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3ee8:	697b      	ldr	r3, [r7, #20]
	}
    3eea:	4618      	mov	r0, r3
    3eec:	f107 0718 	add.w	r7, r7, #24
    3ef0:	46bd      	mov	sp, r7
    3ef2:	bd80      	pop	{r7, pc}

00003ef4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b086      	sub	sp, #24
    3ef8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3efa:	f04f 0300 	mov.w	r3, #0
    3efe:	9300      	str	r3, [sp, #0]
    3f00:	f04f 0300 	mov.w	r3, #0
    3f04:	9301      	str	r3, [sp, #4]
    3f06:	f04f 0300 	mov.w	r3, #0
    3f0a:	9302      	str	r3, [sp, #8]
    3f0c:	f04f 0300 	mov.w	r3, #0
    3f10:	9303      	str	r3, [sp, #12]
    3f12:	f244 6035 	movw	r0, #17973	; 0x4635
    3f16:	f2c0 0000 	movt	r0, #0
    3f1a:	f246 1110 	movw	r1, #24848	; 0x6110
    3f1e:	f2c0 0100 	movt	r1, #0
    3f22:	f04f 0280 	mov.w	r2, #128	; 0x80
    3f26:	f04f 0300 	mov.w	r3, #0
    3f2a:	f7ff fc2d 	bl	3788 <xTaskGenericCreate>
    3f2e:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	2b01      	cmp	r3, #1
    3f34:	d113      	bne.n	3f5e <vTaskStartScheduler+0x6a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3f36:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f3a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3f3e:	f240 5394 	movw	r3, #1428	; 0x594
    3f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f46:	f04f 0201 	mov.w	r2, #1
    3f4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3f4c:	f240 5388 	movw	r3, #1416	; 0x588
    3f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f54:	f04f 0200 	mov.w	r2, #0
    3f58:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3f5a:	f000 fdf1 	bl	4b40 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3f5e:	f107 0708 	add.w	r7, r7, #8
    3f62:	46bd      	mov	sp, r7
    3f64:	bd80      	pop	{r7, pc}
    3f66:	bf00      	nop

00003f68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3f6c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f70:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3f74:	f240 5394 	movw	r3, #1428	; 0x594
    3f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f7c:	f04f 0200 	mov.w	r2, #0
    3f80:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3f82:	f000 fe07 	bl	4b94 <vPortEndScheduler>
}
    3f86:	bd80      	pop	{r7, pc}

00003f88 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3f88:	b480      	push	{r7}
    3f8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3f8c:	f240 5398 	movw	r3, #1432	; 0x598
    3f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	f103 0201 	add.w	r2, r3, #1
    3f9a:	f240 5398 	movw	r3, #1432	; 0x598
    3f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fa2:	601a      	str	r2, [r3, #0]
}
    3fa4:	46bd      	mov	sp, r7
    3fa6:	bc80      	pop	{r7}
    3fa8:	4770      	bx	lr
    3faa:	bf00      	nop

00003fac <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3fac:	b590      	push	{r4, r7, lr}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3fb2:	f04f 0300 	mov.w	r3, #0
    3fb6:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3fb8:	f000 fdfe 	bl	4bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3fbc:	f240 5398 	movw	r3, #1432	; 0x598
    3fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	f103 32ff 	add.w	r2, r3, #4294967295
    3fca:	f240 5398 	movw	r3, #1432	; 0x598
    3fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fd2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fd4:	f240 5398 	movw	r3, #1432	; 0x598
    3fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	2b00      	cmp	r3, #0
    3fe0:	f040 8085 	bne.w	40ee <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3fe4:	f240 5384 	movw	r3, #1412	; 0x584
    3fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d07d      	beq.n	40ee <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3ff2:	f04f 0300 	mov.w	r3, #0
    3ff6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3ff8:	e03c      	b.n	4074 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3ffa:	f240 5344 	movw	r3, #1348	; 0x544
    3ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4002:	68db      	ldr	r3, [r3, #12]
    4004:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4006:	f104 0318 	add.w	r3, r4, #24
    400a:	4618      	mov	r0, r3
    400c:	f7fe ff52 	bl	2eb4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4010:	f104 0304 	add.w	r3, r4, #4
    4014:	4618      	mov	r0, r3
    4016:	f7fe ff4d 	bl	2eb4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    401a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    401c:	f240 5390 	movw	r3, #1424	; 0x590
    4020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	429a      	cmp	r2, r3
    4028:	d905      	bls.n	4036 <xTaskResumeAll+0x8a>
    402a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    402c:	f240 5390 	movw	r3, #1424	; 0x590
    4030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4034:	601a      	str	r2, [r3, #0]
    4036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4038:	4613      	mov	r3, r2
    403a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    403e:	189b      	adds	r3, r3, r2
    4040:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4044:	461a      	mov	r2, r3
    4046:	f240 43b0 	movw	r3, #1200	; 0x4b0
    404a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    404e:	18d2      	adds	r2, r2, r3
    4050:	f104 0304 	add.w	r3, r4, #4
    4054:	4610      	mov	r0, r2
    4056:	4619      	mov	r1, r3
    4058:	f7fe feca 	bl	2df0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    405c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    405e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    406a:	429a      	cmp	r2, r3
    406c:	d302      	bcc.n	4074 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
    406e:	f04f 0301 	mov.w	r3, #1
    4072:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4074:	f240 5344 	movw	r3, #1348	; 0x544
    4078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    407c:	681b      	ldr	r3, [r3, #0]
    407e:	2b00      	cmp	r3, #0
    4080:	d1bb      	bne.n	3ffa <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4082:	f240 539c 	movw	r3, #1436	; 0x59c
    4086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    408a:	681b      	ldr	r3, [r3, #0]
    408c:	2b00      	cmp	r3, #0
    408e:	d018      	beq.n	40c2 <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4090:	e00d      	b.n	40ae <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
    4092:	f000 f871 	bl	4178 <vTaskIncrementTick>
						--uxMissedTicks;
    4096:	f240 539c 	movw	r3, #1436	; 0x59c
    409a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	f103 32ff 	add.w	r2, r3, #4294967295
    40a4:	f240 539c 	movw	r3, #1436	; 0x59c
    40a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40ac:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    40ae:	f240 539c 	movw	r3, #1436	; 0x59c
    40b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40b6:	681b      	ldr	r3, [r3, #0]
    40b8:	2b00      	cmp	r3, #0
    40ba:	d1ea      	bne.n	4092 <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    40bc:	f04f 0301 	mov.w	r3, #1
    40c0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    40c2:	683b      	ldr	r3, [r7, #0]
    40c4:	2b01      	cmp	r3, #1
    40c6:	d006      	beq.n	40d6 <xTaskResumeAll+0x12a>
    40c8:	f240 53a0 	movw	r3, #1440	; 0x5a0
    40cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	2b01      	cmp	r3, #1
    40d4:	d10b      	bne.n	40ee <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
    40d6:	f04f 0301 	mov.w	r3, #1
    40da:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    40dc:	f240 53a0 	movw	r3, #1440	; 0x5a0
    40e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40e4:	f04f 0200 	mov.w	r2, #0
    40e8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    40ea:	f000 fd59 	bl	4ba0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    40ee:	f000 fd79 	bl	4be4 <vPortExitCritical>

	return xAlreadyYielded;
    40f2:	687b      	ldr	r3, [r7, #4]
}
    40f4:	4618      	mov	r0, r3
    40f6:	f107 070c 	add.w	r7, r7, #12
    40fa:	46bd      	mov	sp, r7
    40fc:	bd90      	pop	{r4, r7, pc}
    40fe:	bf00      	nop

00004100 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4100:	b580      	push	{r7, lr}
    4102:	b082      	sub	sp, #8
    4104:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4106:	f000 fd57 	bl	4bb8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    410a:	f240 5388 	movw	r3, #1416	; 0x588
    410e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4112:	681b      	ldr	r3, [r3, #0]
    4114:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4116:	f000 fd65 	bl	4be4 <vPortExitCritical>

	return xTicks;
    411a:	687b      	ldr	r3, [r7, #4]
}
    411c:	4618      	mov	r0, r3
    411e:	f107 0708 	add.w	r7, r7, #8
    4122:	46bd      	mov	sp, r7
    4124:	bd80      	pop	{r7, pc}
    4126:	bf00      	nop

00004128 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4128:	b480      	push	{r7}
    412a:	b083      	sub	sp, #12
    412c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    412e:	f04f 0300 	mov.w	r3, #0
    4132:	607b      	str	r3, [r7, #4]
    4134:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4138:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    413c:	f240 5388 	movw	r3, #1416	; 0x588
    4140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4148:	f04f 0000 	mov.w	r0, #0
    414c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4150:	683b      	ldr	r3, [r7, #0]
}
    4152:	4618      	mov	r0, r3
    4154:	f107 070c 	add.w	r7, r7, #12
    4158:	46bd      	mov	sp, r7
    415a:	bc80      	pop	{r7}
    415c:	4770      	bx	lr
    415e:	bf00      	nop

00004160 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4160:	b480      	push	{r7}
    4162:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4164:	f240 5384 	movw	r3, #1412	; 0x584
    4168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    416c:	681b      	ldr	r3, [r3, #0]
}
    416e:	4618      	mov	r0, r3
    4170:	46bd      	mov	sp, r7
    4172:	bc80      	pop	{r7}
    4174:	4770      	bx	lr
    4176:	bf00      	nop

00004178 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4178:	b580      	push	{r7, lr}
    417a:	b084      	sub	sp, #16
    417c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    417e:	f240 5398 	movw	r3, #1432	; 0x598
    4182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4186:	681b      	ldr	r3, [r3, #0]
    4188:	2b00      	cmp	r3, #0
    418a:	f040 80c0 	bne.w	430e <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    418e:	f240 5388 	movw	r3, #1416	; 0x588
    4192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4196:	681b      	ldr	r3, [r3, #0]
    4198:	f103 0201 	add.w	r2, r3, #1
    419c:	f240 5388 	movw	r3, #1416	; 0x588
    41a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41a4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    41a6:	f240 5388 	movw	r3, #1416	; 0x588
    41aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ae:	681b      	ldr	r3, [r3, #0]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d140      	bne.n	4236 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    41b4:	f240 533c 	movw	r3, #1340	; 0x53c
    41b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41bc:	681b      	ldr	r3, [r3, #0]
    41be:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    41c0:	f240 5340 	movw	r3, #1344	; 0x540
    41c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41c8:	681a      	ldr	r2, [r3, #0]
    41ca:	f240 533c 	movw	r3, #1340	; 0x53c
    41ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41d2:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    41d4:	f240 5340 	movw	r3, #1344	; 0x540
    41d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41dc:	68fa      	ldr	r2, [r7, #12]
    41de:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    41e0:	f240 53a4 	movw	r3, #1444	; 0x5a4
    41e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	f103 0201 	add.w	r2, r3, #1
    41ee:	f240 53a4 	movw	r3, #1444	; 0x5a4
    41f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41f6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    41f8:	f240 533c 	movw	r3, #1340	; 0x53c
    41fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	2b00      	cmp	r3, #0
    4206:	d107      	bne.n	4218 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4208:	f240 0330 	movw	r3, #48	; 0x30
    420c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4210:	f04f 32ff 	mov.w	r2, #4294967295
    4214:	601a      	str	r2, [r3, #0]
    4216:	e00e      	b.n	4236 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4218:	f240 533c 	movw	r3, #1340	; 0x53c
    421c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4220:	681b      	ldr	r3, [r3, #0]
    4222:	68db      	ldr	r3, [r3, #12]
    4224:	68db      	ldr	r3, [r3, #12]
    4226:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4228:	68bb      	ldr	r3, [r7, #8]
    422a:	685a      	ldr	r2, [r3, #4]
    422c:	f240 0330 	movw	r3, #48	; 0x30
    4230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4234:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4236:	f240 5388 	movw	r3, #1416	; 0x588
    423a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    423e:	681a      	ldr	r2, [r3, #0]
    4240:	f240 0330 	movw	r3, #48	; 0x30
    4244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4248:	681b      	ldr	r3, [r3, #0]
    424a:	429a      	cmp	r2, r3
    424c:	d36d      	bcc.n	432a <vTaskIncrementTick+0x1b2>
    424e:	f240 533c 	movw	r3, #1340	; 0x53c
    4252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	681b      	ldr	r3, [r3, #0]
    425a:	2b00      	cmp	r3, #0
    425c:	d107      	bne.n	426e <vTaskIncrementTick+0xf6>
    425e:	f240 0330 	movw	r3, #48	; 0x30
    4262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4266:	f04f 32ff 	mov.w	r2, #4294967295
    426a:	601a      	str	r2, [r3, #0]
    426c:	e05d      	b.n	432a <vTaskIncrementTick+0x1b2>
    426e:	f240 533c 	movw	r3, #1340	; 0x53c
    4272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	68db      	ldr	r3, [r3, #12]
    427a:	68db      	ldr	r3, [r3, #12]
    427c:	60bb      	str	r3, [r7, #8]
    427e:	68bb      	ldr	r3, [r7, #8]
    4280:	685b      	ldr	r3, [r3, #4]
    4282:	607b      	str	r3, [r7, #4]
    4284:	f240 5388 	movw	r3, #1416	; 0x588
    4288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    428c:	681a      	ldr	r2, [r3, #0]
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	429a      	cmp	r2, r3
    4292:	d206      	bcs.n	42a2 <vTaskIncrementTick+0x12a>
    4294:	f240 0330 	movw	r3, #48	; 0x30
    4298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429c:	687a      	ldr	r2, [r7, #4]
    429e:	601a      	str	r2, [r3, #0]
    42a0:	e043      	b.n	432a <vTaskIncrementTick+0x1b2>
    42a2:	68bb      	ldr	r3, [r7, #8]
    42a4:	f103 0304 	add.w	r3, r3, #4
    42a8:	4618      	mov	r0, r3
    42aa:	f7fe fe03 	bl	2eb4 <vListRemove>
    42ae:	68bb      	ldr	r3, [r7, #8]
    42b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42b2:	2b00      	cmp	r3, #0
    42b4:	d005      	beq.n	42c2 <vTaskIncrementTick+0x14a>
    42b6:	68bb      	ldr	r3, [r7, #8]
    42b8:	f103 0318 	add.w	r3, r3, #24
    42bc:	4618      	mov	r0, r3
    42be:	f7fe fdf9 	bl	2eb4 <vListRemove>
    42c2:	68bb      	ldr	r3, [r7, #8]
    42c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42c6:	f240 5390 	movw	r3, #1424	; 0x590
    42ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	429a      	cmp	r2, r3
    42d2:	d906      	bls.n	42e2 <vTaskIncrementTick+0x16a>
    42d4:	68bb      	ldr	r3, [r7, #8]
    42d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42d8:	f240 5390 	movw	r3, #1424	; 0x590
    42dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42e0:	601a      	str	r2, [r3, #0]
    42e2:	68bb      	ldr	r3, [r7, #8]
    42e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42e6:	4613      	mov	r3, r2
    42e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    42ec:	189b      	adds	r3, r3, r2
    42ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    42f2:	461a      	mov	r2, r3
    42f4:	f240 43b0 	movw	r3, #1200	; 0x4b0
    42f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42fc:	18d2      	adds	r2, r2, r3
    42fe:	68bb      	ldr	r3, [r7, #8]
    4300:	f103 0304 	add.w	r3, r3, #4
    4304:	4610      	mov	r0, r2
    4306:	4619      	mov	r1, r3
    4308:	f7fe fd72 	bl	2df0 <vListInsertEnd>
    430c:	e79f      	b.n	424e <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    430e:	f240 539c 	movw	r3, #1436	; 0x59c
    4312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4316:	681b      	ldr	r3, [r3, #0]
    4318:	f103 0201 	add.w	r2, r3, #1
    431c:	f240 539c 	movw	r3, #1436	; 0x59c
    4320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4324:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4326:	f001 febf 	bl	60a8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    432a:	f240 539c 	movw	r3, #1436	; 0x59c
    432e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	2b00      	cmp	r3, #0
    4336:	d101      	bne.n	433c <vTaskIncrementTick+0x1c4>
		{
			vApplicationTickHook();
    4338:	f001 feb6 	bl	60a8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    433c:	f107 0710 	add.w	r7, r7, #16
    4340:	46bd      	mov	sp, r7
    4342:	bd80      	pop	{r7, pc}

00004344 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4344:	b480      	push	{r7}
    4346:	b083      	sub	sp, #12
    4348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    434a:	f240 5398 	movw	r3, #1432	; 0x598
    434e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4352:	681b      	ldr	r3, [r3, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	d014      	beq.n	4382 <vTaskSwitchContext+0x3e>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4358:	f240 53a0 	movw	r3, #1440	; 0x5a0
    435c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4360:	f04f 0201 	mov.w	r2, #1
    4364:	601a      	str	r2, [r3, #0]
    4366:	e04c      	b.n	4402 <vTaskSwitchContext+0xbe>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4368:	f240 5390 	movw	r3, #1424	; 0x590
    436c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4370:	681b      	ldr	r3, [r3, #0]
    4372:	f103 32ff 	add.w	r2, r3, #4294967295
    4376:	f240 5390 	movw	r3, #1424	; 0x590
    437a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    437e:	601a      	str	r2, [r3, #0]
    4380:	e000      	b.n	4384 <vTaskSwitchContext+0x40>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4382:	bf00      	nop
    4384:	f240 5390 	movw	r3, #1424	; 0x590
    4388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    438c:	681a      	ldr	r2, [r3, #0]
    438e:	4613      	mov	r3, r2
    4390:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4394:	189b      	adds	r3, r3, r2
    4396:	ea4f 0383 	mov.w	r3, r3, lsl #2
    439a:	461a      	mov	r2, r3
    439c:	f240 43b0 	movw	r3, #1200	; 0x4b0
    43a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a4:	18d3      	adds	r3, r2, r3
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	2b00      	cmp	r3, #0
    43aa:	d0dd      	beq.n	4368 <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    43ac:	f240 5390 	movw	r3, #1424	; 0x590
    43b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43b4:	681a      	ldr	r2, [r3, #0]
    43b6:	4613      	mov	r3, r2
    43b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43bc:	189b      	adds	r3, r3, r2
    43be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43c2:	461a      	mov	r2, r3
    43c4:	f240 43b0 	movw	r3, #1200	; 0x4b0
    43c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43cc:	18d3      	adds	r3, r2, r3
    43ce:	607b      	str	r3, [r7, #4]
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	685b      	ldr	r3, [r3, #4]
    43d4:	685a      	ldr	r2, [r3, #4]
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	605a      	str	r2, [r3, #4]
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	685a      	ldr	r2, [r3, #4]
    43de:	687b      	ldr	r3, [r7, #4]
    43e0:	f103 0308 	add.w	r3, r3, #8
    43e4:	429a      	cmp	r2, r3
    43e6:	d104      	bne.n	43f2 <vTaskSwitchContext+0xae>
    43e8:	687b      	ldr	r3, [r7, #4]
    43ea:	685b      	ldr	r3, [r3, #4]
    43ec:	685a      	ldr	r2, [r3, #4]
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	605a      	str	r2, [r3, #4]
    43f2:	687b      	ldr	r3, [r7, #4]
    43f4:	685b      	ldr	r3, [r3, #4]
    43f6:	68da      	ldr	r2, [r3, #12]
    43f8:	f240 43ac 	movw	r3, #1196	; 0x4ac
    43fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4400:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    4402:	f107 070c 	add.w	r7, r7, #12
    4406:	46bd      	mov	sp, r7
    4408:	bc80      	pop	{r7}
    440a:	4770      	bx	lr

0000440c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
    4414:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4416:	f240 43ac 	movw	r3, #1196	; 0x4ac
    441a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    441e:	681b      	ldr	r3, [r3, #0]
    4420:	f103 0318 	add.w	r3, r3, #24
    4424:	6878      	ldr	r0, [r7, #4]
    4426:	4619      	mov	r1, r3
    4428:	f7fe fd0a 	bl	2e40 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    442c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	f103 0304 	add.w	r3, r3, #4
    443a:	4618      	mov	r0, r3
    443c:	f7fe fd3a 	bl	2eb4 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4440:	683b      	ldr	r3, [r7, #0]
    4442:	f1b3 3fff 	cmp.w	r3, #4294967295
    4446:	d10e      	bne.n	4466 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4448:	f240 43ac 	movw	r3, #1196	; 0x4ac
    444c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	f103 0304 	add.w	r3, r3, #4
    4456:	f240 5070 	movw	r0, #1392	; 0x570
    445a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    445e:	4619      	mov	r1, r3
    4460:	f7fe fcc6 	bl	2df0 <vListInsertEnd>
    4464:	e00a      	b.n	447c <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4466:	f240 5388 	movw	r3, #1416	; 0x588
    446a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    446e:	681a      	ldr	r2, [r3, #0]
    4470:	683b      	ldr	r3, [r7, #0]
    4472:	18d3      	adds	r3, r2, r3
    4474:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4476:	68f8      	ldr	r0, [r7, #12]
    4478:	f000 f9c8 	bl	480c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    447c:	f107 0710 	add.w	r7, r7, #16
    4480:	46bd      	mov	sp, r7
    4482:	bd80      	pop	{r7, pc}

00004484 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4484:	b580      	push	{r7, lr}
    4486:	b084      	sub	sp, #16
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	68db      	ldr	r3, [r3, #12]
    4490:	68db      	ldr	r3, [r3, #12]
    4492:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4494:	68bb      	ldr	r3, [r7, #8]
    4496:	f103 0318 	add.w	r3, r3, #24
    449a:	4618      	mov	r0, r3
    449c:	f7fe fd0a 	bl	2eb4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    44a0:	f240 5398 	movw	r3, #1432	; 0x598
    44a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a8:	681b      	ldr	r3, [r3, #0]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d12b      	bne.n	4506 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    44ae:	68bb      	ldr	r3, [r7, #8]
    44b0:	f103 0304 	add.w	r3, r3, #4
    44b4:	4618      	mov	r0, r3
    44b6:	f7fe fcfd 	bl	2eb4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    44ba:	68bb      	ldr	r3, [r7, #8]
    44bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44be:	f240 5390 	movw	r3, #1424	; 0x590
    44c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	429a      	cmp	r2, r3
    44ca:	d906      	bls.n	44da <xTaskRemoveFromEventList+0x56>
    44cc:	68bb      	ldr	r3, [r7, #8]
    44ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44d0:	f240 5390 	movw	r3, #1424	; 0x590
    44d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44d8:	601a      	str	r2, [r3, #0]
    44da:	68bb      	ldr	r3, [r7, #8]
    44dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44de:	4613      	mov	r3, r2
    44e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    44e4:	189b      	adds	r3, r3, r2
    44e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    44ea:	461a      	mov	r2, r3
    44ec:	f240 43b0 	movw	r3, #1200	; 0x4b0
    44f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44f4:	18d2      	adds	r2, r2, r3
    44f6:	68bb      	ldr	r3, [r7, #8]
    44f8:	f103 0304 	add.w	r3, r3, #4
    44fc:	4610      	mov	r0, r2
    44fe:	4619      	mov	r1, r3
    4500:	f7fe fc76 	bl	2df0 <vListInsertEnd>
    4504:	e009      	b.n	451a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4506:	68bb      	ldr	r3, [r7, #8]
    4508:	f103 0318 	add.w	r3, r3, #24
    450c:	f240 5044 	movw	r0, #1348	; 0x544
    4510:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4514:	4619      	mov	r1, r3
    4516:	f7fe fc6b 	bl	2df0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    451a:	68bb      	ldr	r3, [r7, #8]
    451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    451e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    452a:	429a      	cmp	r2, r3
    452c:	d303      	bcc.n	4536 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    452e:	f04f 0301 	mov.w	r3, #1
    4532:	60fb      	str	r3, [r7, #12]
    4534:	e002      	b.n	453c <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    4536:	f04f 0300 	mov.w	r3, #0
    453a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    453c:	68fb      	ldr	r3, [r7, #12]
}
    453e:	4618      	mov	r0, r3
    4540:	f107 0710 	add.w	r7, r7, #16
    4544:	46bd      	mov	sp, r7
    4546:	bd80      	pop	{r7, pc}

00004548 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4548:	b480      	push	{r7}
    454a:	b083      	sub	sp, #12
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4550:	f240 53a4 	movw	r3, #1444	; 0x5a4
    4554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4558:	681a      	ldr	r2, [r3, #0]
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    455e:	f240 5388 	movw	r3, #1416	; 0x588
    4562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4566:	681a      	ldr	r2, [r3, #0]
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	605a      	str	r2, [r3, #4]
}
    456c:	f107 070c 	add.w	r7, r7, #12
    4570:	46bd      	mov	sp, r7
    4572:	bc80      	pop	{r7}
    4574:	4770      	bx	lr
    4576:	bf00      	nop

00004578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4578:	b580      	push	{r7, lr}
    457a:	b084      	sub	sp, #16
    457c:	af00      	add	r7, sp, #0
    457e:	6078      	str	r0, [r7, #4]
    4580:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4582:	f000 fb19 	bl	4bb8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4586:	683b      	ldr	r3, [r7, #0]
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	f1b3 3fff 	cmp.w	r3, #4294967295
    458e:	d103      	bne.n	4598 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    4590:	f04f 0300 	mov.w	r3, #0
    4594:	60fb      	str	r3, [r7, #12]
    4596:	e038      	b.n	460a <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	681a      	ldr	r2, [r3, #0]
    459c:	f240 53a4 	movw	r3, #1444	; 0x5a4
    45a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	429a      	cmp	r2, r3
    45a8:	d00c      	beq.n	45c4 <xTaskCheckForTimeOut+0x4c>
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	685a      	ldr	r2, [r3, #4]
    45ae:	f240 5388 	movw	r3, #1416	; 0x588
    45b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45b6:	681b      	ldr	r3, [r3, #0]
    45b8:	429a      	cmp	r2, r3
    45ba:	d803      	bhi.n	45c4 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    45bc:	f04f 0301 	mov.w	r3, #1
    45c0:	60fb      	str	r3, [r7, #12]
    45c2:	e022      	b.n	460a <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    45c4:	f240 5388 	movw	r3, #1416	; 0x588
    45c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45cc:	681a      	ldr	r2, [r3, #0]
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	685b      	ldr	r3, [r3, #4]
    45d2:	1ad2      	subs	r2, r2, r3
    45d4:	683b      	ldr	r3, [r7, #0]
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	429a      	cmp	r2, r3
    45da:	d213      	bcs.n	4604 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    45dc:	683b      	ldr	r3, [r7, #0]
    45de:	681a      	ldr	r2, [r3, #0]
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	6859      	ldr	r1, [r3, #4]
    45e4:	f240 5388 	movw	r3, #1416	; 0x588
    45e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	1acb      	subs	r3, r1, r3
    45f0:	18d2      	adds	r2, r2, r3
    45f2:	683b      	ldr	r3, [r7, #0]
    45f4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    45f6:	6878      	ldr	r0, [r7, #4]
    45f8:	f7ff ffa6 	bl	4548 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    45fc:	f04f 0300 	mov.w	r3, #0
    4600:	60fb      	str	r3, [r7, #12]
    4602:	e002      	b.n	460a <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    4604:	f04f 0301 	mov.w	r3, #1
    4608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    460a:	f000 faeb 	bl	4be4 <vPortExitCritical>

	return xReturn;
    460e:	68fb      	ldr	r3, [r7, #12]
}
    4610:	4618      	mov	r0, r3
    4612:	f107 0710 	add.w	r7, r7, #16
    4616:	46bd      	mov	sp, r7
    4618:	bd80      	pop	{r7, pc}
    461a:	bf00      	nop

0000461c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    461c:	b480      	push	{r7}
    461e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4620:	f240 53a0 	movw	r3, #1440	; 0x5a0
    4624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4628:	f04f 0201 	mov.w	r2, #1
    462c:	601a      	str	r2, [r3, #0]
}
    462e:	46bd      	mov	sp, r7
    4630:	bc80      	pop	{r7}
    4632:	4770      	bx	lr

00004634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4634:	b580      	push	{r7, lr}
    4636:	b082      	sub	sp, #8
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
    463c:	e000      	b.n	4640 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    463e:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4640:	f000 f898 	bl	4774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    4644:	f240 43b0 	movw	r3, #1200	; 0x4b0
    4648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	2b01      	cmp	r3, #1
    4650:	d9f5      	bls.n	463e <prvIdleTask+0xa>
			{
				taskYIELD();
    4652:	f000 faa5 	bl	4ba0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    4656:	e7f2      	b.n	463e <prvIdleTask+0xa>

00004658 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4658:	b580      	push	{r7, lr}
    465a:	b084      	sub	sp, #16
    465c:	af00      	add	r7, sp, #0
    465e:	60f8      	str	r0, [r7, #12]
    4660:	60b9      	str	r1, [r7, #8]
    4662:	607a      	str	r2, [r7, #4]
    4664:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4666:	68fb      	ldr	r3, [r7, #12]
    4668:	f103 0334 	add.w	r3, r3, #52	; 0x34
    466c:	4618      	mov	r0, r3
    466e:	68b9      	ldr	r1, [r7, #8]
    4670:	f04f 0210 	mov.w	r2, #16
    4674:	f001 fbd0 	bl	5e18 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	f04f 0200 	mov.w	r2, #0
    467e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	2b04      	cmp	r3, #4
    4686:	d902      	bls.n	468e <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4688:	f04f 0304 	mov.w	r3, #4
    468c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	687a      	ldr	r2, [r7, #4]
    4692:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4694:	68fb      	ldr	r3, [r7, #12]
    4696:	687a      	ldr	r2, [r7, #4]
    4698:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	f103 0304 	add.w	r3, r3, #4
    46a0:	4618      	mov	r0, r3
    46a2:	f7fe fb97 	bl	2dd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    46a6:	68fb      	ldr	r3, [r7, #12]
    46a8:	f103 0318 	add.w	r3, r3, #24
    46ac:	4618      	mov	r0, r3
    46ae:	f7fe fb91 	bl	2dd4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	68fa      	ldr	r2, [r7, #12]
    46b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	f1c3 0205 	rsb	r2, r3, #5
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	68fa      	ldr	r2, [r7, #12]
    46c6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    46c8:	f107 0710 	add.w	r7, r7, #16
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}

000046d0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    46d6:	f04f 0300 	mov.w	r3, #0
    46da:	607b      	str	r3, [r7, #4]
    46dc:	e013      	b.n	4706 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    46de:	687a      	ldr	r2, [r7, #4]
    46e0:	4613      	mov	r3, r2
    46e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    46e6:	189b      	adds	r3, r3, r2
    46e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    46ec:	461a      	mov	r2, r3
    46ee:	f240 43b0 	movw	r3, #1200	; 0x4b0
    46f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46f6:	18d3      	adds	r3, r2, r3
    46f8:	4618      	mov	r0, r3
    46fa:	f7fe fb4b 	bl	2d94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	f103 0301 	add.w	r3, r3, #1
    4704:	607b      	str	r3, [r7, #4]
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	2b04      	cmp	r3, #4
    470a:	d9e8      	bls.n	46de <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    470c:	f240 5014 	movw	r0, #1300	; 0x514
    4710:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4714:	f7fe fb3e 	bl	2d94 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4718:	f240 5028 	movw	r0, #1320	; 0x528
    471c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4720:	f7fe fb38 	bl	2d94 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4724:	f240 5044 	movw	r0, #1348	; 0x544
    4728:	f2c2 0000 	movt	r0, #8192	; 0x2000
    472c:	f7fe fb32 	bl	2d94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4730:	f240 5058 	movw	r0, #1368	; 0x558
    4734:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4738:	f7fe fb2c 	bl	2d94 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    473c:	f240 5070 	movw	r0, #1392	; 0x570
    4740:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4744:	f7fe fb26 	bl	2d94 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4748:	f240 533c 	movw	r3, #1340	; 0x53c
    474c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4750:	f240 5214 	movw	r2, #1300	; 0x514
    4754:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4758:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    475a:	f240 5340 	movw	r3, #1344	; 0x540
    475e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4762:	f240 5228 	movw	r2, #1320	; 0x528
    4766:	f2c2 0200 	movt	r2, #8192	; 0x2000
    476a:	601a      	str	r2, [r3, #0]
}
    476c:	f107 0708 	add.w	r7, r7, #8
    4770:	46bd      	mov	sp, r7
    4772:	bd80      	pop	{r7, pc}

00004774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4774:	b580      	push	{r7, lr}
    4776:	b082      	sub	sp, #8
    4778:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    477a:	f240 536c 	movw	r3, #1388	; 0x56c
    477e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4782:	681b      	ldr	r3, [r3, #0]
    4784:	2b00      	cmp	r3, #0
    4786:	d03c      	beq.n	4802 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    4788:	f7ff fbfe 	bl	3f88 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    478c:	f240 5358 	movw	r3, #1368	; 0x558
    4790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	2b00      	cmp	r3, #0
    4798:	bf14      	ite	ne
    479a:	2300      	movne	r3, #0
    479c:	2301      	moveq	r3, #1
    479e:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    47a0:	f7ff fc04 	bl	3fac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d12b      	bne.n	4802 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    47aa:	f000 fa05 	bl	4bb8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    47ae:	f240 5358 	movw	r3, #1368	; 0x558
    47b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47b6:	68db      	ldr	r3, [r3, #12]
    47b8:	68db      	ldr	r3, [r3, #12]
    47ba:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    47bc:	683b      	ldr	r3, [r7, #0]
    47be:	f103 0304 	add.w	r3, r3, #4
    47c2:	4618      	mov	r0, r3
    47c4:	f7fe fb76 	bl	2eb4 <vListRemove>
					--uxCurrentNumberOfTasks;
    47c8:	f240 5384 	movw	r3, #1412	; 0x584
    47cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	f103 32ff 	add.w	r2, r3, #4294967295
    47d6:	f240 5384 	movw	r3, #1412	; 0x584
    47da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47de:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    47e0:	f240 536c 	movw	r3, #1388	; 0x56c
    47e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e8:	681b      	ldr	r3, [r3, #0]
    47ea:	f103 32ff 	add.w	r2, r3, #4294967295
    47ee:	f240 536c 	movw	r3, #1388	; 0x56c
    47f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47f6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    47f8:	f000 f9f4 	bl	4be4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    47fc:	6838      	ldr	r0, [r7, #0]
    47fe:	f000 f883 	bl	4908 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4802:	f107 0708 	add.w	r7, r7, #8
    4806:	46bd      	mov	sp, r7
    4808:	bd80      	pop	{r7, pc}
    480a:	bf00      	nop

0000480c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    480c:	b580      	push	{r7, lr}
    480e:	b082      	sub	sp, #8
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4814:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    481c:	681b      	ldr	r3, [r3, #0]
    481e:	687a      	ldr	r2, [r7, #4]
    4820:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    4822:	f240 5388 	movw	r3, #1416	; 0x588
    4826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    482a:	681b      	ldr	r3, [r3, #0]
    482c:	687a      	ldr	r2, [r7, #4]
    482e:	429a      	cmp	r2, r3
    4830:	d210      	bcs.n	4854 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4832:	f240 5340 	movw	r3, #1344	; 0x540
    4836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483a:	681a      	ldr	r2, [r3, #0]
    483c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	f103 0304 	add.w	r3, r3, #4
    484a:	4610      	mov	r0, r2
    484c:	4619      	mov	r1, r3
    484e:	f7fe faf7 	bl	2e40 <vListInsert>
    4852:	e01d      	b.n	4890 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4854:	f240 533c 	movw	r3, #1340	; 0x53c
    4858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485c:	681a      	ldr	r2, [r3, #0]
    485e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4866:	681b      	ldr	r3, [r3, #0]
    4868:	f103 0304 	add.w	r3, r3, #4
    486c:	4610      	mov	r0, r2
    486e:	4619      	mov	r1, r3
    4870:	f7fe fae6 	bl	2e40 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4874:	f240 0330 	movw	r3, #48	; 0x30
    4878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	687a      	ldr	r2, [r7, #4]
    4880:	429a      	cmp	r2, r3
    4882:	d205      	bcs.n	4890 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4884:	f240 0330 	movw	r3, #48	; 0x30
    4888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    488c:	687a      	ldr	r2, [r7, #4]
    488e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4890:	f107 0708 	add.w	r7, r7, #8
    4894:	46bd      	mov	sp, r7
    4896:	bd80      	pop	{r7, pc}

00004898 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4898:	b580      	push	{r7, lr}
    489a:	b084      	sub	sp, #16
    489c:	af00      	add	r7, sp, #0
    489e:	4603      	mov	r3, r0
    48a0:	6039      	str	r1, [r7, #0]
    48a2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    48a4:	f04f 0048 	mov.w	r0, #72	; 0x48
    48a8:	f000 fa0a 	bl	4cc0 <pvPortMalloc>
    48ac:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    48ae:	68fb      	ldr	r3, [r7, #12]
    48b0:	2b00      	cmp	r3, #0
    48b2:	d023      	beq.n	48fc <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	2b00      	cmp	r3, #0
    48b8:	d107      	bne.n	48ca <prvAllocateTCBAndStack+0x32>
    48ba:	88fb      	ldrh	r3, [r7, #6]
    48bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    48c0:	4618      	mov	r0, r3
    48c2:	f000 f9fd 	bl	4cc0 <pvPortMalloc>
    48c6:	4603      	mov	r3, r0
    48c8:	e000      	b.n	48cc <prvAllocateTCBAndStack+0x34>
    48ca:	683b      	ldr	r3, [r7, #0]
    48cc:	68fa      	ldr	r2, [r7, #12]
    48ce:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    48d0:	68fb      	ldr	r3, [r7, #12]
    48d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    48d4:	2b00      	cmp	r3, #0
    48d6:	d106      	bne.n	48e6 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    48d8:	68f8      	ldr	r0, [r7, #12]
    48da:	f000 fa3d 	bl	4d58 <vPortFree>
			pxNewTCB = NULL;
    48de:	f04f 0300 	mov.w	r3, #0
    48e2:	60fb      	str	r3, [r7, #12]
    48e4:	e00a      	b.n	48fc <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    48e6:	68fb      	ldr	r3, [r7, #12]
    48e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    48ea:	88fb      	ldrh	r3, [r7, #6]
    48ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    48f0:	4610      	mov	r0, r2
    48f2:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    48f6:	461a      	mov	r2, r3
    48f8:	f001 f98c 	bl	5c14 <memset>
		}
	}

	return pxNewTCB;
    48fc:	68fb      	ldr	r3, [r7, #12]
}
    48fe:	4618      	mov	r0, r3
    4900:	f107 0710 	add.w	r7, r7, #16
    4904:	46bd      	mov	sp, r7
    4906:	bd80      	pop	{r7, pc}

00004908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4914:	4618      	mov	r0, r3
    4916:	f000 fa1f 	bl	4d58 <vPortFree>
		vPortFree( pxTCB );
    491a:	6878      	ldr	r0, [r7, #4]
    491c:	f000 fa1c 	bl	4d58 <vPortFree>
	}
    4920:	f107 0708 	add.w	r7, r7, #8
    4924:	46bd      	mov	sp, r7
    4926:	bd80      	pop	{r7, pc}

00004928 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4928:	b480      	push	{r7}
    492a:	b083      	sub	sp, #12
    492c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    492e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	607b      	str	r3, [r7, #4]

		return xReturn;
    493a:	687b      	ldr	r3, [r7, #4]
	}
    493c:	4618      	mov	r0, r3
    493e:	f107 070c 	add.w	r7, r7, #12
    4942:	46bd      	mov	sp, r7
    4944:	bc80      	pop	{r7}
    4946:	4770      	bx	lr

00004948 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4948:	b580      	push	{r7, lr}
    494a:	b084      	sub	sp, #16
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4954:	68fb      	ldr	r3, [r7, #12]
    4956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4958:	f240 43ac 	movw	r3, #1196	; 0x4ac
    495c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4964:	429a      	cmp	r2, r3
    4966:	d257      	bcs.n	4a18 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4968:	f240 43ac 	movw	r3, #1196	; 0x4ac
    496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4970:	681b      	ldr	r3, [r3, #0]
    4972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4974:	f1c3 0205 	rsb	r2, r3, #5
    4978:	68fb      	ldr	r3, [r7, #12]
    497a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    497c:	68fb      	ldr	r3, [r7, #12]
    497e:	6959      	ldr	r1, [r3, #20]
    4980:	68fb      	ldr	r3, [r7, #12]
    4982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4984:	4613      	mov	r3, r2
    4986:	ea4f 0383 	mov.w	r3, r3, lsl #2
    498a:	189b      	adds	r3, r3, r2
    498c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4990:	461a      	mov	r2, r3
    4992:	f240 43b0 	movw	r3, #1200	; 0x4b0
    4996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499a:	18d3      	adds	r3, r2, r3
    499c:	4299      	cmp	r1, r3
    499e:	d133      	bne.n	4a08 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    49a0:	68fb      	ldr	r3, [r7, #12]
    49a2:	f103 0304 	add.w	r3, r3, #4
    49a6:	4618      	mov	r0, r3
    49a8:	f7fe fa84 	bl	2eb4 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    49ac:	f240 43ac 	movw	r3, #1196	; 0x4ac
    49b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49b8:	68fb      	ldr	r3, [r7, #12]
    49ba:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    49bc:	68fb      	ldr	r3, [r7, #12]
    49be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49c0:	f240 5390 	movw	r3, #1424	; 0x590
    49c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	429a      	cmp	r2, r3
    49cc:	d906      	bls.n	49dc <vTaskPriorityInherit+0x94>
    49ce:	68fb      	ldr	r3, [r7, #12]
    49d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49d2:	f240 5390 	movw	r3, #1424	; 0x590
    49d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49da:	601a      	str	r2, [r3, #0]
    49dc:	68fb      	ldr	r3, [r7, #12]
    49de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49e0:	4613      	mov	r3, r2
    49e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    49e6:	189b      	adds	r3, r3, r2
    49e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    49ec:	461a      	mov	r2, r3
    49ee:	f240 43b0 	movw	r3, #1200	; 0x4b0
    49f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f6:	18d2      	adds	r2, r2, r3
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	f103 0304 	add.w	r3, r3, #4
    49fe:	4610      	mov	r0, r2
    4a00:	4619      	mov	r1, r3
    4a02:	f7fe f9f5 	bl	2df0 <vListInsertEnd>
    4a06:	e007      	b.n	4a18 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4a08:	f240 43ac 	movw	r3, #1196	; 0x4ac
    4a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a14:	68fb      	ldr	r3, [r7, #12]
    4a16:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4a18:	f107 0710 	add.w	r7, r7, #16
    4a1c:	46bd      	mov	sp, r7
    4a1e:	bd80      	pop	{r7, pc}

00004a20 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4a20:	b580      	push	{r7, lr}
    4a22:	b084      	sub	sp, #16
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d03a      	beq.n	4aa8 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4a32:	68fb      	ldr	r3, [r7, #12]
    4a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a36:	68fb      	ldr	r3, [r7, #12]
    4a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a3a:	429a      	cmp	r2, r3
    4a3c:	d034      	beq.n	4aa8 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	f103 0304 	add.w	r3, r3, #4
    4a44:	4618      	mov	r0, r3
    4a46:	f7fe fa35 	bl	2eb4 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4a4a:	68fb      	ldr	r3, [r7, #12]
    4a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a56:	f1c3 0205 	rsb	r2, r3, #5
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4a5e:	68fb      	ldr	r3, [r7, #12]
    4a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a62:	f240 5390 	movw	r3, #1424	; 0x590
    4a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6a:	681b      	ldr	r3, [r3, #0]
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d906      	bls.n	4a7e <vTaskPriorityDisinherit+0x5e>
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a74:	f240 5390 	movw	r3, #1424	; 0x590
    4a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7c:	601a      	str	r2, [r3, #0]
    4a7e:	68fb      	ldr	r3, [r7, #12]
    4a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a82:	4613      	mov	r3, r2
    4a84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4a88:	189b      	adds	r3, r3, r2
    4a8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4a8e:	461a      	mov	r2, r3
    4a90:	f240 43b0 	movw	r3, #1200	; 0x4b0
    4a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a98:	18d2      	adds	r2, r2, r3
    4a9a:	68fb      	ldr	r3, [r7, #12]
    4a9c:	f103 0304 	add.w	r3, r3, #4
    4aa0:	4610      	mov	r0, r2
    4aa2:	4619      	mov	r1, r3
    4aa4:	f7fe f9a4 	bl	2df0 <vListInsertEnd>
			}
		}
	}
    4aa8:	f107 0710 	add.w	r7, r7, #16
    4aac:	46bd      	mov	sp, r7
    4aae:	bd80      	pop	{r7, pc}

00004ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4ab0:	b480      	push	{r7}
    4ab2:	b085      	sub	sp, #20
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	60f8      	str	r0, [r7, #12]
    4ab8:	60b9      	str	r1, [r7, #8]
    4aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4abc:	68fb      	ldr	r3, [r7, #12]
    4abe:	f1a3 0304 	sub.w	r3, r3, #4
    4ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4ac4:	68fb      	ldr	r3, [r7, #12]
    4ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4aca:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4acc:	68fb      	ldr	r3, [r7, #12]
    4ace:	f1a3 0304 	sub.w	r3, r3, #4
    4ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4ad4:	68ba      	ldr	r2, [r7, #8]
    4ad6:	68fb      	ldr	r3, [r7, #12]
    4ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	f1a3 0304 	sub.w	r3, r3, #4
    4ae0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4ae2:	68fb      	ldr	r3, [r7, #12]
    4ae4:	f04f 0200 	mov.w	r2, #0
    4ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	f1a3 0314 	sub.w	r3, r3, #20
    4af0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4af2:	687a      	ldr	r2, [r7, #4]
    4af4:	68fb      	ldr	r3, [r7, #12]
    4af6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4af8:	68fb      	ldr	r3, [r7, #12]
    4afa:	f1a3 0320 	sub.w	r3, r3, #32
    4afe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4b00:	68fb      	ldr	r3, [r7, #12]
}
    4b02:	4618      	mov	r0, r3
    4b04:	f107 0714 	add.w	r7, r7, #20
    4b08:	46bd      	mov	sp, r7
    4b0a:	bc80      	pop	{r7}
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop

00004b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4b10:	4b06      	ldr	r3, [pc, #24]	; (4b2c <pxCurrentTCBConst2>)
    4b12:	6819      	ldr	r1, [r3, #0]
    4b14:	6808      	ldr	r0, [r1, #0]
    4b16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4b1a:	f380 8809 	msr	PSP, r0
    4b1e:	f04f 0000 	mov.w	r0, #0
    4b22:	f380 8811 	msr	BASEPRI, r0
    4b26:	f04e 0e0d 	orr.w	lr, lr, #13
    4b2a:	4770      	bx	lr

00004b2c <pxCurrentTCBConst2>:
    4b2c:	200004ac 	.word	0x200004ac

00004b30 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    4b30:	4862      	ldr	r0, [pc, #392]	; (4cbc <prvSetupTimerInterrupt+0x2c>)
    4b32:	6800      	ldr	r0, [r0, #0]
    4b34:	6800      	ldr	r0, [r0, #0]
    4b36:	f380 8808 	msr	MSP, r0
    4b3a:	b662      	cpsie	i
    4b3c:	df00      	svc	0
    4b3e:	bf00      	nop

00004b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    4b40:	b580      	push	{r7, lr}
    4b42:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    4b44:	f64e 5320 	movw	r3, #60704	; 0xed20
    4b48:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b4c:	f64e 5220 	movw	r2, #60704	; 0xed20
    4b50:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4b54:	6812      	ldr	r2, [r2, #0]
    4b56:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    4b5a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4b5c:	f64e 5320 	movw	r3, #60704	; 0xed20
    4b60:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b64:	f64e 5220 	movw	r2, #60704	; 0xed20
    4b68:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4b6c:	6812      	ldr	r2, [r2, #0]
    4b6e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4b72:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4b74:	f000 f88c 	bl	4c90 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4b78:	f240 0334 	movw	r3, #52	; 0x34
    4b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b80:	f04f 0200 	mov.w	r2, #0
    4b84:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4b86:	f7ff ffd3 	bl	4b30 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4b8a:	f04f 0300 	mov.w	r3, #0
}
    4b8e:	4618      	mov	r0, r3
    4b90:	bd80      	pop	{r7, pc}
    4b92:	bf00      	nop

00004b94 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4b94:	b480      	push	{r7}
    4b96:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4b98:	46bd      	mov	sp, r7
    4b9a:	bc80      	pop	{r7}
    4b9c:	4770      	bx	lr
    4b9e:	bf00      	nop

00004ba0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4ba0:	b480      	push	{r7}
    4ba2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4ba4:	f64e 5304 	movw	r3, #60676	; 0xed04
    4ba8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4bb0:	601a      	str	r2, [r3, #0]
}
    4bb2:	46bd      	mov	sp, r7
    4bb4:	bc80      	pop	{r7}
    4bb6:	4770      	bx	lr

00004bb8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4bb8:	b480      	push	{r7}
    4bba:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4bbc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4bc0:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4bc4:	f240 0334 	movw	r3, #52	; 0x34
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	f103 0201 	add.w	r2, r3, #1
    4bd2:	f240 0334 	movw	r3, #52	; 0x34
    4bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bda:	601a      	str	r2, [r3, #0]
}
    4bdc:	46bd      	mov	sp, r7
    4bde:	bc80      	pop	{r7}
    4be0:	4770      	bx	lr
    4be2:	bf00      	nop

00004be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4be4:	b480      	push	{r7}
    4be6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4be8:	f240 0334 	movw	r3, #52	; 0x34
    4bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf0:	681b      	ldr	r3, [r3, #0]
    4bf2:	f103 32ff 	add.w	r2, r3, #4294967295
    4bf6:	f240 0334 	movw	r3, #52	; 0x34
    4bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bfe:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4c00:	f240 0334 	movw	r3, #52	; 0x34
    4c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c08:	681b      	ldr	r3, [r3, #0]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d103      	bne.n	4c16 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    4c0e:	f04f 0000 	mov.w	r0, #0
    4c12:	f380 8811 	msr	BASEPRI, r0
	}
}
    4c16:	46bd      	mov	sp, r7
    4c18:	bc80      	pop	{r7}
    4c1a:	4770      	bx	lr

00004c1c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4c1c:	f3ef 8009 	mrs	r0, PSP
    4c20:	4b0c      	ldr	r3, [pc, #48]	; (4c54 <pxCurrentTCBConst>)
    4c22:	681a      	ldr	r2, [r3, #0]
    4c24:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4c28:	6010      	str	r0, [r2, #0]
    4c2a:	e92d 4008 	stmdb	sp!, {r3, lr}
    4c2e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c32:	f380 8811 	msr	BASEPRI, r0
    4c36:	f7ff fb85 	bl	4344 <vTaskSwitchContext>
    4c3a:	f04f 0000 	mov.w	r0, #0
    4c3e:	f380 8811 	msr	BASEPRI, r0
    4c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4c46:	6819      	ldr	r1, [r3, #0]
    4c48:	6808      	ldr	r0, [r1, #0]
    4c4a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4c4e:	f380 8809 	msr	PSP, r0
    4c52:	4770      	bx	lr

00004c54 <pxCurrentTCBConst>:
    4c54:	200004ac 	.word	0x200004ac

00004c58 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4c58:	b580      	push	{r7, lr}
    4c5a:	b082      	sub	sp, #8
    4c5c:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4c5e:	f64e 5304 	movw	r3, #60676	; 0xed04
    4c62:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c6a:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4c6c:	f04f 0300 	mov.w	r3, #0
    4c70:	607b      	str	r3, [r7, #4]
    4c72:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c76:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4c7a:	f7ff fa7d 	bl	4178 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4c7e:	f04f 0000 	mov.w	r0, #0
    4c82:	f380 8811 	msr	BASEPRI, r0
}
    4c86:	f107 0708 	add.w	r7, r7, #8
    4c8a:	46bd      	mov	sp, r7
    4c8c:	bd80      	pop	{r7, pc}
    4c8e:	bf00      	nop

00004c90 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4c90:	b480      	push	{r7}
    4c92:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4c94:	f24e 0314 	movw	r3, #57364	; 0xe014
    4c98:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4c9c:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    4ca0:	f2c0 020a 	movt	r2, #10
    4ca4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4ca6:	f24e 0310 	movw	r3, #57360	; 0xe010
    4caa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cae:	f04f 0207 	mov.w	r2, #7
    4cb2:	601a      	str	r2, [r3, #0]
}
    4cb4:	46bd      	mov	sp, r7
    4cb6:	bc80      	pop	{r7}
    4cb8:	4770      	bx	lr
    4cba:	0000      	.short	0x0000
    4cbc:	e000ed08 	.word	0xe000ed08

00004cc0 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4cc0:	b580      	push	{r7, lr}
    4cc2:	b084      	sub	sp, #16
    4cc4:	af00      	add	r7, sp, #0
    4cc6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    4cc8:	f04f 0300 	mov.w	r3, #0
    4ccc:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	f003 0307 	and.w	r3, r3, #7
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d005      	beq.n	4ce4 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	f023 0307 	bic.w	r3, r3, #7
    4cde:	f103 0308 	add.w	r3, r3, #8
    4ce2:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    4ce4:	f7ff f950 	bl	3f88 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4ce8:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	18d2      	adds	r2, r2, r3
    4cf6:	f244 33ff 	movw	r3, #17407	; 0x43ff
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d824      	bhi.n	4d48 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    4cfe:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d06:	681a      	ldr	r2, [r3, #0]
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	18d2      	adds	r2, r2, r3
    4d0c:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d14:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4d16:	429a      	cmp	r2, r3
    4d18:	d916      	bls.n	4d48 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    4d1a:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d22:	681a      	ldr	r2, [r3, #0]
    4d24:	f240 53b0 	movw	r3, #1456	; 0x5b0
    4d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2c:	18d3      	adds	r3, r2, r3
    4d2e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
    4d30:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d38:	681a      	ldr	r2, [r3, #0]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	18d2      	adds	r2, r2, r3
    4d3e:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d46:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
    4d48:	f7ff f930 	bl	3fac <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    4d4c:	68fb      	ldr	r3, [r7, #12]
}
    4d4e:	4618      	mov	r0, r3
    4d50:	f107 0710 	add.w	r7, r7, #16
    4d54:	46bd      	mov	sp, r7
    4d56:	bd80      	pop	{r7, pc}

00004d58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c
	for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    4d60:	f107 070c 	add.w	r7, r7, #12
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop

00004d6c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4d6c:	b480      	push	{r7}
    4d6e:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    4d70:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d78:	f04f 0200 	mov.w	r2, #0
    4d7c:	601a      	str	r2, [r3, #0]
}
    4d7e:	46bd      	mov	sp, r7
    4d80:	bc80      	pop	{r7}
    4d82:	4770      	bx	lr

00004d84 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4d84:	b480      	push	{r7}
    4d86:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    4d88:	f644 13b0 	movw	r3, #18864	; 0x49b0
    4d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
    4d96:	4618      	mov	r0, r3
    4d98:	46bd      	mov	sp, r7
    4d9a:	bc80      	pop	{r7}
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop

00004da0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    4da0:	b580      	push	{r7, lr}
    4da2:	b082      	sub	sp, #8
    4da4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4da6:	f04f 0010 	mov.w	r0, #16
    4daa:	f04f 0101 	mov.w	r1, #1
    4dae:	f7fc f91d 	bl	fec <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    4db2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4db6:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4dbe:	f04f 0201 	mov.w	r2, #1
    4dc2:	f7fc fc7b 	bl	16bc <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    4dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4dca:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    4dcc:	f04f 0310 	mov.w	r3, #16
    4dd0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4dd2:	f04f 0303 	mov.w	r3, #3
    4dd6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4dd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4ddc:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4de0:	f107 0304 	add.w	r3, r7, #4
    4de4:	4619      	mov	r1, r3
    4de6:	f7fc fb07 	bl	13f8 <GPIO_Init>
}
    4dea:	f107 0708 	add.w	r7, r7, #8
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}
    4df2:	bf00      	nop

00004df4 <init_button>:

void init_button(void)
{
    4df4:	b580      	push	{r7, lr}
    4df6:	b082      	sub	sp, #8
    4df8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4dfa:	f04f 0004 	mov.w	r0, #4
    4dfe:	f04f 0101 	mov.w	r1, #1
    4e02:	f7fc f8f3 	bl	fec <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    4e06:	f04f 0301 	mov.w	r3, #1
    4e0a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4e0c:	f04f 0304 	mov.w	r3, #4
    4e10:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4e12:	f04f 0303 	mov.w	r3, #3
    4e16:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4e18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4e1c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4e20:	f107 0304 	add.w	r3, r7, #4
    4e24:	4619      	mov	r1, r3
    4e26:	f7fc fae7 	bl	13f8 <GPIO_Init>
}
    4e2a:	f107 0708 	add.w	r7, r7, #8
    4e2e:	46bd      	mov	sp, r7
    4e30:	bd80      	pop	{r7, pc}
    4e32:	bf00      	nop

00004e34 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b084      	sub	sp, #16
    4e38:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    4e3a:	f04f 0001 	mov.w	r0, #1
    4e3e:	f04f 0101 	mov.w	r1, #1
    4e42:	f7fc f8d3 	bl	fec <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    4e46:	f04f 0000 	mov.w	r0, #0
    4e4a:	f04f 0100 	mov.w	r1, #0
    4e4e:	f7fc fd47 	bl	18e0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    4e52:	f04f 0301 	mov.w	r3, #1
    4e56:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    4e58:	f04f 0300 	mov.w	r3, #0
    4e5c:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    4e5e:	f04f 0308 	mov.w	r3, #8
    4e62:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    4e64:	f04f 0301 	mov.w	r3, #1
    4e68:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    4e6a:	f107 0308 	add.w	r3, r7, #8
    4e6e:	4618      	mov	r0, r3
    4e70:	f7fd faa4 	bl	23bc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    4e74:	f04f 0306 	mov.w	r3, #6
    4e78:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    4e7a:	f04f 030f 	mov.w	r3, #15
    4e7e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    4e80:	f04f 030f 	mov.w	r3, #15
    4e84:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    4e86:	f04f 0301 	mov.w	r3, #1
    4e8a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    4e8c:	f107 0304 	add.w	r3, r7, #4
    4e90:	4618      	mov	r0, r3
    4e92:	f7fd fbdd 	bl	2650 <NVIC_Init>
}
    4e96:	f107 0710 	add.w	r7, r7, #16
    4e9a:	46bd      	mov	sp, r7
    4e9c:	bd80      	pop	{r7, pc}
    4e9e:	bf00      	nop

00004ea0 <init_rs232>:

void init_rs232(void)
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	b086      	sub	sp, #24
    4ea4:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    4ea6:	f04f 0005 	mov.w	r0, #5
    4eaa:	f04f 0101 	mov.w	r1, #1
    4eae:	f7fc f89d 	bl	fec <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    4eb2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4eb6:	f04f 0101 	mov.w	r1, #1
    4eba:	f7fc f8c1 	bl	1040 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    4ebe:	f04f 0308 	mov.w	r3, #8
    4ec2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4ec4:	f04f 0304 	mov.w	r3, #4
    4ec8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    4eca:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4ece:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4ed2:	f107 0304 	add.w	r3, r7, #4
    4ed6:	4619      	mov	r1, r3
    4ed8:	f7fc fa8e 	bl	13f8 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    4edc:	f04f 0304 	mov.w	r3, #4
    4ee0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4ee2:	f04f 0303 	mov.w	r3, #3
    4ee6:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    4ee8:	f04f 0318 	mov.w	r3, #24
    4eec:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    4eee:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4ef2:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4ef6:	f107 0304 	add.w	r3, r7, #4
    4efa:	4619      	mov	r1, r3
    4efc:	f7fc fa7c 	bl	13f8 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    4f00:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4f04:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    4f06:	f04f 0300 	mov.w	r3, #0
    4f0a:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    4f0c:	f04f 0300 	mov.w	r3, #0
    4f10:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    4f12:	f04f 0300 	mov.w	r3, #0
    4f16:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    4f18:	f04f 0300 	mov.w	r3, #0
    4f1c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    4f1e:	f04f 030c 	mov.w	r3, #12
    4f22:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    4f24:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f28:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f2c:	f107 0308 	add.w	r3, r7, #8
    4f30:	4619      	mov	r1, r3
    4f32:	f7fc fda9 	bl	1a88 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    4f36:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f3a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f3e:	f04f 0101 	mov.w	r1, #1
    4f42:	f7fc fedf 	bl	1d04 <USART_Cmd>
}
    4f46:	f107 0718 	add.w	r7, r7, #24
    4f4a:	46bd      	mov	sp, r7
    4f4c:	bd80      	pop	{r7, pc}
    4f4e:	bf00      	nop

00004f50 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    4f50:	b580      	push	{r7, lr}
    4f52:	b082      	sub	sp, #8
    4f54:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    4f56:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f5a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f5e:	f240 7127 	movw	r1, #1831	; 0x727
    4f62:	f04f 0200 	mov.w	r2, #0
    4f66:	f7fc feed 	bl	1d44 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    4f6a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f6e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f72:	f240 5125 	movw	r1, #1317	; 0x525
    4f76:	f04f 0201 	mov.w	r2, #1
    4f7a:	f7fc fee3 	bl	1d44 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    4f7e:	f04f 0326 	mov.w	r3, #38	; 0x26
    4f82:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    4f84:	f04f 0300 	mov.w	r3, #0
    4f88:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    4f8a:	f04f 0301 	mov.w	r3, #1
    4f8e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    4f90:	f107 0304 	add.w	r3, r7, #4
    4f94:	4618      	mov	r0, r3
    4f96:	f7fd fb5b 	bl	2650 <NVIC_Init>
}
    4f9a:	f107 0708 	add.w	r7, r7, #8
    4f9e:	46bd      	mov	sp, r7
    4fa0:	bd80      	pop	{r7, pc}
    4fa2:	bf00      	nop

00004fa4 <enable_rs232>:

void enable_rs232(void)
{
    4fa4:	b580      	push	{r7, lr}
    4fa6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    4fa8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4fac:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4fb0:	f04f 0101 	mov.w	r1, #1
    4fb4:	f7fc fea6 	bl	1d04 <USART_Cmd>
}
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	bf00      	nop

00004fbc <get_unaligned>:
    uint32_t cursor;
};

static struct romfs_fds_t romfs_fds[MAX_FDS];

static uint32_t get_unaligned(const uint8_t * d) {
    4fbc:	b480      	push	{r7}
    4fbe:	b083      	sub	sp, #12
    4fc0:	af00      	add	r7, sp, #0
    4fc2:	6078      	str	r0, [r7, #4]
    return ((uint32_t) d[0]) | ((uint32_t) (d[1] << 8)) | ((uint32_t) (d[2] << 16)) | ((uint32_t) (d[3] << 24));
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	461a      	mov	r2, r3
    4fca:	687b      	ldr	r3, [r7, #4]
    4fcc:	f103 0301 	add.w	r3, r3, #1
    4fd0:	781b      	ldrb	r3, [r3, #0]
    4fd2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4fd6:	431a      	orrs	r2, r3
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	f103 0302 	add.w	r3, r3, #2
    4fde:	781b      	ldrb	r3, [r3, #0]
    4fe0:	ea4f 4303 	mov.w	r3, r3, lsl #16
    4fe4:	431a      	orrs	r2, r3
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	f103 0303 	add.w	r3, r3, #3
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	ea4f 6303 	mov.w	r3, r3, lsl #24
    4ff2:	4313      	orrs	r3, r2
}
    4ff4:	4618      	mov	r0, r3
    4ff6:	f107 070c 	add.w	r7, r7, #12
    4ffa:	46bd      	mov	sp, r7
    4ffc:	bc80      	pop	{r7}
    4ffe:	4770      	bx	lr

00005000 <romfs_read>:

static ssize_t romfs_read(void * opaque, void * buf, size_t count) {
    5000:	b580      	push	{r7, lr}
    5002:	b088      	sub	sp, #32
    5004:	af00      	add	r7, sp, #0
    5006:	60f8      	str	r0, [r7, #12]
    5008:	60b9      	str	r1, [r7, #8]
    500a:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    500c:	68fb      	ldr	r3, [r7, #12]
    500e:	61fb      	str	r3, [r7, #28]
    const uint8_t * size_p = f->file - 4;
    5010:	69fb      	ldr	r3, [r7, #28]
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	f1a3 0304 	sub.w	r3, r3, #4
    5018:	61bb      	str	r3, [r7, #24]
    uint32_t size = get_unaligned(size_p);
    501a:	69b8      	ldr	r0, [r7, #24]
    501c:	f7ff ffce 	bl	4fbc <get_unaligned>
    5020:	6178      	str	r0, [r7, #20]
    
    if ((f->cursor + count) > size)
    5022:	69fb      	ldr	r3, [r7, #28]
    5024:	685a      	ldr	r2, [r3, #4]
    5026:	687b      	ldr	r3, [r7, #4]
    5028:	18d2      	adds	r2, r2, r3
    502a:	697b      	ldr	r3, [r7, #20]
    502c:	429a      	cmp	r2, r3
    502e:	d904      	bls.n	503a <romfs_read+0x3a>
        count = size - f->cursor;
    5030:	69fb      	ldr	r3, [r7, #28]
    5032:	685b      	ldr	r3, [r3, #4]
    5034:	697a      	ldr	r2, [r7, #20]
    5036:	1ad3      	subs	r3, r2, r3
    5038:	607b      	str	r3, [r7, #4]

    memcpy(buf, f->file + f->cursor, count);
    503a:	69fb      	ldr	r3, [r7, #28]
    503c:	681a      	ldr	r2, [r3, #0]
    503e:	69fb      	ldr	r3, [r7, #28]
    5040:	685b      	ldr	r3, [r3, #4]
    5042:	18d3      	adds	r3, r2, r3
    5044:	68ba      	ldr	r2, [r7, #8]
    5046:	4611      	mov	r1, r2
    5048:	461a      	mov	r2, r3
    504a:	687b      	ldr	r3, [r7, #4]
    504c:	4608      	mov	r0, r1
    504e:	4611      	mov	r1, r2
    5050:	461a      	mov	r2, r3
    5052:	f000 fe35 	bl	5cc0 <memcpy>
    f->cursor += count;
    5056:	69fb      	ldr	r3, [r7, #28]
    5058:	685a      	ldr	r2, [r3, #4]
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	18d2      	adds	r2, r2, r3
    505e:	69fb      	ldr	r3, [r7, #28]
    5060:	605a      	str	r2, [r3, #4]

    return count;
    5062:	687b      	ldr	r3, [r7, #4]
}
    5064:	4618      	mov	r0, r3
    5066:	f107 0720 	add.w	r7, r7, #32
    506a:	46bd      	mov	sp, r7
    506c:	bd80      	pop	{r7, pc}
    506e:	bf00      	nop

00005070 <romfs_seek>:

static off_t romfs_seek(void * opaque, off_t offset, int whence) {
    5070:	b580      	push	{r7, lr}
    5072:	b088      	sub	sp, #32
    5074:	af00      	add	r7, sp, #0
    5076:	60f8      	str	r0, [r7, #12]
    5078:	60b9      	str	r1, [r7, #8]
    507a:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    507c:	68fb      	ldr	r3, [r7, #12]
    507e:	61bb      	str	r3, [r7, #24]
    const uint8_t * size_p = f->file - 4;
    5080:	69bb      	ldr	r3, [r7, #24]
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	f1a3 0304 	sub.w	r3, r3, #4
    5088:	617b      	str	r3, [r7, #20]
    uint32_t size = get_unaligned(size_p);
    508a:	6978      	ldr	r0, [r7, #20]
    508c:	f7ff ff96 	bl	4fbc <get_unaligned>
    5090:	6138      	str	r0, [r7, #16]
    uint32_t origin;
    
    switch (whence) {
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	2b01      	cmp	r3, #1
    5096:	d007      	beq.n	50a8 <romfs_seek+0x38>
    5098:	2b02      	cmp	r3, #2
    509a:	d009      	beq.n	50b0 <romfs_seek+0x40>
    509c:	2b00      	cmp	r3, #0
    509e:	d10a      	bne.n	50b6 <romfs_seek+0x46>
    case SEEK_SET:
        origin = 0;
    50a0:	f04f 0300 	mov.w	r3, #0
    50a4:	61fb      	str	r3, [r7, #28]
        break;
    50a6:	e009      	b.n	50bc <romfs_seek+0x4c>
    case SEEK_CUR:
        origin = f->cursor;
    50a8:	69bb      	ldr	r3, [r7, #24]
    50aa:	685b      	ldr	r3, [r3, #4]
    50ac:	61fb      	str	r3, [r7, #28]
        break;
    50ae:	e005      	b.n	50bc <romfs_seek+0x4c>
    case SEEK_END:
        origin = size;
    50b0:	693b      	ldr	r3, [r7, #16]
    50b2:	61fb      	str	r3, [r7, #28]
        break;
    50b4:	e002      	b.n	50bc <romfs_seek+0x4c>
    default:
        return -1;
    50b6:	f04f 33ff 	mov.w	r3, #4294967295
    50ba:	e013      	b.n	50e4 <romfs_seek+0x74>
    }

    offset = origin + offset;
    50bc:	68ba      	ldr	r2, [r7, #8]
    50be:	69fb      	ldr	r3, [r7, #28]
    50c0:	18d3      	adds	r3, r2, r3
    50c2:	60bb      	str	r3, [r7, #8]

    if (offset < 0)
    50c4:	68bb      	ldr	r3, [r7, #8]
    50c6:	2b00      	cmp	r3, #0
    50c8:	da02      	bge.n	50d0 <romfs_seek+0x60>
        return -1;
    50ca:	f04f 33ff 	mov.w	r3, #4294967295
    50ce:	e009      	b.n	50e4 <romfs_seek+0x74>
    if (offset > size)
    50d0:	68ba      	ldr	r2, [r7, #8]
    50d2:	693b      	ldr	r3, [r7, #16]
    50d4:	429a      	cmp	r2, r3
    50d6:	d901      	bls.n	50dc <romfs_seek+0x6c>
        offset = size;
    50d8:	693b      	ldr	r3, [r7, #16]
    50da:	60bb      	str	r3, [r7, #8]

    f->cursor = offset;
    50dc:	68ba      	ldr	r2, [r7, #8]
    50de:	69bb      	ldr	r3, [r7, #24]
    50e0:	605a      	str	r2, [r3, #4]

    return offset;
    50e2:	68bb      	ldr	r3, [r7, #8]
}
    50e4:	4618      	mov	r0, r3
    50e6:	f107 0720 	add.w	r7, r7, #32
    50ea:	46bd      	mov	sp, r7
    50ec:	bd80      	pop	{r7, pc}
    50ee:	bf00      	nop

000050f0 <romfs_get_file_by_hash>:

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    50f0:	b580      	push	{r7, lr}
    50f2:	b086      	sub	sp, #24
    50f4:	af00      	add	r7, sp, #0
    50f6:	60f8      	str	r0, [r7, #12]
    50f8:	60b9      	str	r1, [r7, #8]
    50fa:	607a      	str	r2, [r7, #4]
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    50fc:	68fb      	ldr	r3, [r7, #12]
    50fe:	617b      	str	r3, [r7, #20]
    5100:	e022      	b.n	5148 <romfs_get_file_by_hash+0x58>
        if (get_unaligned(meta) == h) {
    5102:	6978      	ldr	r0, [r7, #20]
    5104:	f7ff ff5a 	bl	4fbc <get_unaligned>
    5108:	4602      	mov	r2, r0
    510a:	68bb      	ldr	r3, [r7, #8]
    510c:	429a      	cmp	r2, r3
    510e:	d10f      	bne.n	5130 <romfs_get_file_by_hash+0x40>
            if (len) {
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	2b00      	cmp	r3, #0
    5114:	d008      	beq.n	5128 <romfs_get_file_by_hash+0x38>
                *len = get_unaligned(meta + 4);
    5116:	697b      	ldr	r3, [r7, #20]
    5118:	f103 0304 	add.w	r3, r3, #4
    511c:	4618      	mov	r0, r3
    511e:	f7ff ff4d 	bl	4fbc <get_unaligned>
    5122:	4602      	mov	r2, r0
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	601a      	str	r2, [r3, #0]
            }
            return meta + 8;
    5128:	697b      	ldr	r3, [r7, #20]
    512a:	f103 0308 	add.w	r3, r3, #8
    512e:	e01c      	b.n	516a <romfs_get_file_by_hash+0x7a>
}

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    5130:	697b      	ldr	r3, [r7, #20]
    5132:	f103 0304 	add.w	r3, r3, #4
    5136:	4618      	mov	r0, r3
    5138:	f7ff ff40 	bl	4fbc <get_unaligned>
    513c:	4603      	mov	r3, r0
    513e:	f103 0308 	add.w	r3, r3, #8
    5142:	697a      	ldr	r2, [r7, #20]
    5144:	18d3      	adds	r3, r2, r3
    5146:	617b      	str	r3, [r7, #20]
    5148:	6978      	ldr	r0, [r7, #20]
    514a:	f7ff ff37 	bl	4fbc <get_unaligned>
    514e:	4603      	mov	r3, r0
    5150:	2b00      	cmp	r3, #0
    5152:	d008      	beq.n	5166 <romfs_get_file_by_hash+0x76>
    5154:	697b      	ldr	r3, [r7, #20]
    5156:	f103 0304 	add.w	r3, r3, #4
    515a:	4618      	mov	r0, r3
    515c:	f7ff ff2e 	bl	4fbc <get_unaligned>
    5160:	4603      	mov	r3, r0
    5162:	2b00      	cmp	r3, #0
    5164:	d1cd      	bne.n	5102 <romfs_get_file_by_hash+0x12>
            }
            return meta + 8;
        }
    }

    return NULL;
    5166:	f04f 0300 	mov.w	r3, #0
}
    516a:	4618      	mov	r0, r3
    516c:	f107 0718 	add.w	r7, r7, #24
    5170:	46bd      	mov	sp, r7
    5172:	bd80      	pop	{r7, pc}

00005174 <romfs_open>:

static int romfs_open(void * opaque, const char * path, int flags, int mode) {
    5174:	b580      	push	{r7, lr}
    5176:	b08a      	sub	sp, #40	; 0x28
    5178:	af02      	add	r7, sp, #8
    517a:	60f8      	str	r0, [r7, #12]
    517c:	60b9      	str	r1, [r7, #8]
    517e:	607a      	str	r2, [r7, #4]
    5180:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    5182:	68b8      	ldr	r0, [r7, #8]
    5184:	f04f 31ff 	mov.w	r1, #4294967295
    5188:	f000 f85c 	bl	5244 <hash_djb2>
    518c:	61b8      	str	r0, [r7, #24]
    const uint8_t * romfs = (const uint8_t *) opaque;
    518e:	68fb      	ldr	r3, [r7, #12]
    5190:	617b      	str	r3, [r7, #20]
    const uint8_t * file;
    int r = -1;
    5192:	f04f 33ff 	mov.w	r3, #4294967295
    5196:	61fb      	str	r3, [r7, #28]

    file = romfs_get_file_by_hash(romfs, h, NULL);
    5198:	6978      	ldr	r0, [r7, #20]
    519a:	69b9      	ldr	r1, [r7, #24]
    519c:	f04f 0200 	mov.w	r2, #0
    51a0:	f7ff ffa6 	bl	50f0 <romfs_get_file_by_hash>
    51a4:	6138      	str	r0, [r7, #16]

    if (file) {
    51a6:	693b      	ldr	r3, [r7, #16]
    51a8:	2b00      	cmp	r3, #0
    51aa:	d033      	beq.n	5214 <romfs_open+0xa0>
        r = fio_open(romfs_read, NULL, romfs_seek, NULL, NULL);
    51ac:	f04f 0300 	mov.w	r3, #0
    51b0:	9300      	str	r3, [sp, #0]
    51b2:	f245 0001 	movw	r0, #20481	; 0x5001
    51b6:	f2c0 0000 	movt	r0, #0
    51ba:	f04f 0100 	mov.w	r1, #0
    51be:	f245 0271 	movw	r2, #20593	; 0x5071
    51c2:	f2c0 0200 	movt	r2, #0
    51c6:	f04f 0300 	mov.w	r3, #0
    51ca:	f000 fa97 	bl	56fc <fio_open>
    51ce:	61f8      	str	r0, [r7, #28]
        if (r > 0) {
    51d0:	69fb      	ldr	r3, [r7, #28]
    51d2:	2b00      	cmp	r3, #0
    51d4:	dd1e      	ble.n	5214 <romfs_open+0xa0>
            romfs_fds[r].file = file;
    51d6:	f644 13b8 	movw	r3, #18872	; 0x49b8
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	69fa      	ldr	r2, [r7, #28]
    51e0:	6939      	ldr	r1, [r7, #16]
    51e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            romfs_fds[r].cursor = 0;
    51e6:	f644 12b8 	movw	r2, #18872	; 0x49b8
    51ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51ee:	69fb      	ldr	r3, [r7, #28]
    51f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    51f4:	18d3      	adds	r3, r2, r3
    51f6:	f04f 0200 	mov.w	r2, #0
    51fa:	605a      	str	r2, [r3, #4]
            fio_set_opaque(r, romfs_fds + r);
    51fc:	69fb      	ldr	r3, [r7, #28]
    51fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    5202:	f644 13b8 	movw	r3, #18872	; 0x49b8
    5206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520a:	18d3      	adds	r3, r2, r3
    520c:	69f8      	ldr	r0, [r7, #28]
    520e:	4619      	mov	r1, r3
    5210:	f000 fc60 	bl	5ad4 <fio_set_opaque>
        }
    }
    return r;
    5214:	69fb      	ldr	r3, [r7, #28]
}
    5216:	4618      	mov	r0, r3
    5218:	f107 0720 	add.w	r7, r7, #32
    521c:	46bd      	mov	sp, r7
    521e:	bd80      	pop	{r7, pc}

00005220 <register_romfs>:

void register_romfs(const char * mountpoint, const uint8_t * romfs) {
    5220:	b580      	push	{r7, lr}
    5222:	b082      	sub	sp, #8
    5224:	af00      	add	r7, sp, #0
    5226:	6078      	str	r0, [r7, #4]
    5228:	6039      	str	r1, [r7, #0]
//    DBGOUT("Registering romfs `%s' @ %p\r\n", mountpoint, romfs);
    register_fs(mountpoint, romfs_open, (void *) romfs);
    522a:	6878      	ldr	r0, [r7, #4]
    522c:	f245 1175 	movw	r1, #20853	; 0x5175
    5230:	f2c0 0100 	movt	r1, #0
    5234:	683a      	ldr	r2, [r7, #0]
    5236:	f000 f84b 	bl	52d0 <register_fs>
}
    523a:	f107 0708 	add.w	r7, r7, #8
    523e:	46bd      	mov	sp, r7
    5240:	bd80      	pop	{r7, pc}
    5242:	bf00      	nop

00005244 <hash_djb2>:
#include <stdint.h>
#include "hash-djb2.h"
#include "osdebug.h"

uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    5244:	b480      	push	{r7}
    5246:	b087      	sub	sp, #28
    5248:	af00      	add	r7, sp, #0
    524a:	6078      	str	r0, [r7, #4]
    524c:	6039      	str	r1, [r7, #0]
    uint32_t hash = 5381;
    524e:	f241 5305 	movw	r3, #5381	; 0x1505
    5252:	617b      	str	r3, [r7, #20]
    uint32_t max = (uint32_t) _max;
    5254:	683b      	ldr	r3, [r7, #0]
    5256:	613b      	str	r3, [r7, #16]
    int c;
    
    while (((c = *str++)) && max--) {
    5258:	e007      	b.n	526a <hash_djb2+0x26>
        hash = ((hash << 5) + hash) ^ c;
    525a:	697b      	ldr	r3, [r7, #20]
    525c:	ea4f 1243 	mov.w	r2, r3, lsl #5
    5260:	697b      	ldr	r3, [r7, #20]
    5262:	18d2      	adds	r2, r2, r3
    5264:	68fb      	ldr	r3, [r7, #12]
    5266:	4053      	eors	r3, r2
    5268:	617b      	str	r3, [r7, #20]
uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    uint32_t hash = 5381;
    uint32_t max = (uint32_t) _max;
    int c;
    
    while (((c = *str++)) && max--) {
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	60fb      	str	r3, [r7, #12]
    5270:	68fb      	ldr	r3, [r7, #12]
    5272:	2b00      	cmp	r3, #0
    5274:	bf0c      	ite	eq
    5276:	2300      	moveq	r3, #0
    5278:	2301      	movne	r3, #1
    527a:	b2db      	uxtb	r3, r3
    527c:	687a      	ldr	r2, [r7, #4]
    527e:	f102 0201 	add.w	r2, r2, #1
    5282:	607a      	str	r2, [r7, #4]
    5284:	2b00      	cmp	r3, #0
    5286:	d00b      	beq.n	52a0 <hash_djb2+0x5c>
    5288:	693b      	ldr	r3, [r7, #16]
    528a:	2b00      	cmp	r3, #0
    528c:	bf0c      	ite	eq
    528e:	2300      	moveq	r3, #0
    5290:	2301      	movne	r3, #1
    5292:	b2db      	uxtb	r3, r3
    5294:	693a      	ldr	r2, [r7, #16]
    5296:	f102 32ff 	add.w	r2, r2, #4294967295
    529a:	613a      	str	r2, [r7, #16]
    529c:	2b00      	cmp	r3, #0
    529e:	d1dc      	bne.n	525a <hash_djb2+0x16>
        hash = ((hash << 5) + hash) ^ c;
    }
    
    return hash;
    52a0:	697b      	ldr	r3, [r7, #20]
}
    52a2:	4618      	mov	r0, r3
    52a4:	f107 071c 	add.w	r7, r7, #28
    52a8:	46bd      	mov	sp, r7
    52aa:	bc80      	pop	{r7}
    52ac:	4770      	bx	lr
    52ae:	bf00      	nop

000052b0 <fs_init>:
    void * opaque;
};

static struct fs_t fss[MAX_FS];

__attribute__((constructor)) void fs_init() {
    52b0:	b580      	push	{r7, lr}
    52b2:	af00      	add	r7, sp, #0
    memset(fss, 0, sizeof(fss));
    52b4:	f644 23b8 	movw	r3, #19128	; 0x4ab8
    52b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52bc:	f04f 02c0 	mov.w	r2, #192	; 0xc0
    52c0:	4618      	mov	r0, r3
    52c2:	f04f 0100 	mov.w	r1, #0
    52c6:	4613      	mov	r3, r2
    52c8:	461a      	mov	r2, r3
    52ca:	f000 fca3 	bl	5c14 <memset>
}
    52ce:	bd80      	pop	{r7, pc}

000052d0 <register_fs>:

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    52d0:	b580      	push	{r7, lr}
    52d2:	b086      	sub	sp, #24
    52d4:	af00      	add	r7, sp, #0
    52d6:	60f8      	str	r0, [r7, #12]
    52d8:	60b9      	str	r1, [r7, #8]
    52da:	607a      	str	r2, [r7, #4]
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    52dc:	f246 101c 	movw	r0, #24860	; 0x611c
    52e0:	f2c0 0000 	movt	r0, #0
    52e4:	68f9      	ldr	r1, [r7, #12]
    52e6:	68ba      	ldr	r2, [r7, #8]
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	f000 fc8b 	bl	5c04 <osDbgPrintf>
    
    for (i = 0; i < MAX_FS; i++) {
    52ee:	f04f 0300 	mov.w	r3, #0
    52f2:	617b      	str	r3, [r7, #20]
    52f4:	e049      	b.n	538a <register_fs+0xba>
        if (!fss[i].cb) {
    52f6:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    52fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52fe:	6979      	ldr	r1, [r7, #20]
    5300:	460b      	mov	r3, r1
    5302:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5306:	185b      	adds	r3, r3, r1
    5308:	ea4f 0383 	mov.w	r3, r3, lsl #2
    530c:	18d3      	adds	r3, r2, r3
    530e:	f103 0304 	add.w	r3, r3, #4
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	2b00      	cmp	r3, #0
    5316:	d134      	bne.n	5382 <register_fs+0xb2>
            fss[i].hash = hash_djb2((const uint8_t *) mountpoint, -1);
    5318:	68f8      	ldr	r0, [r7, #12]
    531a:	f04f 31ff 	mov.w	r1, #4294967295
    531e:	f7ff ff91 	bl	5244 <hash_djb2>
    5322:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    5326:	f2c2 0200 	movt	r2, #8192	; 0x2000
    532a:	6979      	ldr	r1, [r7, #20]
    532c:	460b      	mov	r3, r1
    532e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5332:	185b      	adds	r3, r3, r1
    5334:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5338:	18d3      	adds	r3, r2, r3
    533a:	6018      	str	r0, [r3, #0]
            fss[i].cb = callback;
    533c:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    5340:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5344:	6979      	ldr	r1, [r7, #20]
    5346:	460b      	mov	r3, r1
    5348:	ea4f 0343 	mov.w	r3, r3, lsl #1
    534c:	185b      	adds	r3, r3, r1
    534e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5352:	18d3      	adds	r3, r2, r3
    5354:	f103 0304 	add.w	r3, r3, #4
    5358:	68ba      	ldr	r2, [r7, #8]
    535a:	601a      	str	r2, [r3, #0]
            fss[i].opaque = opaque;
    535c:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    5360:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5364:	6979      	ldr	r1, [r7, #20]
    5366:	460b      	mov	r3, r1
    5368:	ea4f 0343 	mov.w	r3, r3, lsl #1
    536c:	185b      	adds	r3, r3, r1
    536e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5372:	18d3      	adds	r3, r2, r3
    5374:	f103 0308 	add.w	r3, r3, #8
    5378:	687a      	ldr	r2, [r7, #4]
    537a:	601a      	str	r2, [r3, #0]
            return 0;
    537c:	f04f 0300 	mov.w	r3, #0
    5380:	e008      	b.n	5394 <register_fs+0xc4>

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    
    for (i = 0; i < MAX_FS; i++) {
    5382:	697b      	ldr	r3, [r7, #20]
    5384:	f103 0301 	add.w	r3, r3, #1
    5388:	617b      	str	r3, [r7, #20]
    538a:	697b      	ldr	r3, [r7, #20]
    538c:	2b0f      	cmp	r3, #15
    538e:	ddb2      	ble.n	52f6 <register_fs+0x26>
            fss[i].opaque = opaque;
            return 0;
        }
    }
    
    return -1;
    5390:	f04f 33ff 	mov.w	r3, #4294967295
}
    5394:	4618      	mov	r0, r3
    5396:	f107 0718 	add.w	r7, r7, #24
    539a:	46bd      	mov	sp, r7
    539c:	bd80      	pop	{r7, pc}
    539e:	bf00      	nop

000053a0 <fs_open>:

int fs_open(const char * path, int flags, int mode) {
    53a0:	b590      	push	{r4, r7, lr}
    53a2:	b089      	sub	sp, #36	; 0x24
    53a4:	af00      	add	r7, sp, #0
    53a6:	60f8      	str	r0, [r7, #12]
    53a8:	60b9      	str	r1, [r7, #8]
    53aa:	607a      	str	r2, [r7, #4]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    53ac:	e003      	b.n	53b6 <fs_open+0x16>
        path++;
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	f103 0301 	add.w	r3, r3, #1
    53b4:	60fb      	str	r3, [r7, #12]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    53b6:	68fb      	ldr	r3, [r7, #12]
    53b8:	781b      	ldrb	r3, [r3, #0]
    53ba:	2b2f      	cmp	r3, #47	; 0x2f
    53bc:	d0f7      	beq.n	53ae <fs_open+0xe>
        path++;
    
    slash = strchr(path, '/');
    53be:	68f8      	ldr	r0, [r7, #12]
    53c0:	f04f 012f 	mov.w	r1, #47	; 0x2f
    53c4:	f000 fcde 	bl	5d84 <strchr>
    53c8:	61b8      	str	r0, [r7, #24]
    
    if (!slash)
    53ca:	69bb      	ldr	r3, [r7, #24]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d102      	bne.n	53d6 <fs_open+0x36>
        return -2;
    53d0:	f06f 0301 	mvn.w	r3, #1
    53d4:	e04d      	b.n	5472 <fs_open+0xd2>

    hash = hash_djb2((const uint8_t *) path, slash - path);
    53d6:	69ba      	ldr	r2, [r7, #24]
    53d8:	68fb      	ldr	r3, [r7, #12]
    53da:	1ad3      	subs	r3, r2, r3
    53dc:	68f8      	ldr	r0, [r7, #12]
    53de:	4619      	mov	r1, r3
    53e0:	f7ff ff30 	bl	5244 <hash_djb2>
    53e4:	6178      	str	r0, [r7, #20]
    path = slash + 1;
    53e6:	69bb      	ldr	r3, [r7, #24]
    53e8:	f103 0301 	add.w	r3, r3, #1
    53ec:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_FS; i++) {
    53ee:	f04f 0300 	mov.w	r3, #0
    53f2:	61fb      	str	r3, [r7, #28]
    53f4:	e038      	b.n	5468 <fs_open+0xc8>
        if (fss[i].hash == hash)
    53f6:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    53fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53fe:	69f9      	ldr	r1, [r7, #28]
    5400:	460b      	mov	r3, r1
    5402:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5406:	185b      	adds	r3, r3, r1
    5408:	ea4f 0383 	mov.w	r3, r3, lsl #2
    540c:	18d3      	adds	r3, r2, r3
    540e:	681a      	ldr	r2, [r3, #0]
    5410:	697b      	ldr	r3, [r7, #20]
    5412:	429a      	cmp	r2, r3
    5414:	d124      	bne.n	5460 <fs_open+0xc0>
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    5416:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    541a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    541e:	69f9      	ldr	r1, [r7, #28]
    5420:	460b      	mov	r3, r1
    5422:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5426:	185b      	adds	r3, r3, r1
    5428:	ea4f 0383 	mov.w	r3, r3, lsl #2
    542c:	18d3      	adds	r3, r2, r3
    542e:	f103 0304 	add.w	r3, r3, #4
    5432:	681c      	ldr	r4, [r3, #0]
    5434:	f644 22b8 	movw	r2, #19128	; 0x4ab8
    5438:	f2c2 0200 	movt	r2, #8192	; 0x2000
    543c:	69f9      	ldr	r1, [r7, #28]
    543e:	460b      	mov	r3, r1
    5440:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5444:	185b      	adds	r3, r3, r1
    5446:	ea4f 0383 	mov.w	r3, r3, lsl #2
    544a:	18d3      	adds	r3, r2, r3
    544c:	f103 0308 	add.w	r3, r3, #8
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	4618      	mov	r0, r3
    5454:	68f9      	ldr	r1, [r7, #12]
    5456:	68ba      	ldr	r2, [r7, #8]
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	47a0      	blx	r4
    545c:	4603      	mov	r3, r0
    545e:	e008      	b.n	5472 <fs_open+0xd2>
        return -2;

    hash = hash_djb2((const uint8_t *) path, slash - path);
    path = slash + 1;

    for (i = 0; i < MAX_FS; i++) {
    5460:	69fb      	ldr	r3, [r7, #28]
    5462:	f103 0301 	add.w	r3, r3, #1
    5466:	61fb      	str	r3, [r7, #28]
    5468:	69fb      	ldr	r3, [r7, #28]
    546a:	2b0f      	cmp	r3, #15
    546c:	ddc3      	ble.n	53f6 <fs_open+0x56>
        if (fss[i].hash == hash)
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    }
    
    return -2;
    546e:	f06f 0301 	mvn.w	r3, #1
}
    5472:	4618      	mov	r0, r3
    5474:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5478:	46bd      	mov	sp, r7
    547a:	bd90      	pop	{r4, r7, pc}

0000547c <stdin_read>:
#include "osdebug.h"
#include "hash-djb2.h"

static struct fddef_t fio_fds[MAX_FDS];

static ssize_t stdin_read(void * opaque, void * buf, size_t count) {
    547c:	b480      	push	{r7}
    547e:	b085      	sub	sp, #20
    5480:	af00      	add	r7, sp, #0
    5482:	60f8      	str	r0, [r7, #12]
    5484:	60b9      	str	r1, [r7, #8]
    5486:	607a      	str	r2, [r7, #4]
    return 0;
    5488:	f04f 0300 	mov.w	r3, #0
}
    548c:	4618      	mov	r0, r3
    548e:	f107 0714 	add.w	r7, r7, #20
    5492:	46bd      	mov	sp, r7
    5494:	bc80      	pop	{r7}
    5496:	4770      	bx	lr

00005498 <stdout_write>:

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    5498:	b580      	push	{r7, lr}
    549a:	b086      	sub	sp, #24
    549c:	af00      	add	r7, sp, #0
    549e:	60f8      	str	r0, [r7, #12]
    54a0:	60b9      	str	r1, [r7, #8]
    54a2:	607a      	str	r2, [r7, #4]
    int i;
    const char * data = (const char *) buf;
    54a4:	68bb      	ldr	r3, [r7, #8]
    54a6:	613b      	str	r3, [r7, #16]
    
    for (i = 0; i < count; i++)
    54a8:	f04f 0300 	mov.w	r3, #0
    54ac:	617b      	str	r3, [r7, #20]
    54ae:	e00a      	b.n	54c6 <stdout_write+0x2e>
        send_byte(data[i]);
    54b0:	697b      	ldr	r3, [r7, #20]
    54b2:	693a      	ldr	r2, [r7, #16]
    54b4:	18d3      	adds	r3, r2, r3
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	4618      	mov	r0, r3
    54ba:	f000 fd41 	bl	5f40 <send_byte>

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    int i;
    const char * data = (const char *) buf;
    
    for (i = 0; i < count; i++)
    54be:	697b      	ldr	r3, [r7, #20]
    54c0:	f103 0301 	add.w	r3, r3, #1
    54c4:	617b      	str	r3, [r7, #20]
    54c6:	697a      	ldr	r2, [r7, #20]
    54c8:	687b      	ldr	r3, [r7, #4]
    54ca:	429a      	cmp	r2, r3
    54cc:	d3f0      	bcc.n	54b0 <stdout_write+0x18>
        send_byte(data[i]);
    
    return count;
    54ce:	687b      	ldr	r3, [r7, #4]
}
    54d0:	4618      	mov	r0, r3
    54d2:	f107 0718 	add.w	r7, r7, #24
    54d6:	46bd      	mov	sp, r7
    54d8:	bd80      	pop	{r7, pc}
    54da:	bf00      	nop

000054dc <fio_init>:

static xSemaphoreHandle fio_sem = NULL;

__attribute__((constructor)) void fio_init() {
    54dc:	b580      	push	{r7, lr}
    54de:	af00      	add	r7, sp, #0
    memset(fio_fds, 0, sizeof(fio_fds));
    54e0:	f644 3378 	movw	r3, #19320	; 0x4b78
    54e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e8:	f44f 7220 	mov.w	r2, #640	; 0x280
    54ec:	4618      	mov	r0, r3
    54ee:	f04f 0100 	mov.w	r1, #0
    54f2:	4613      	mov	r3, r2
    54f4:	461a      	mov	r2, r3
    54f6:	f000 fb8d 	bl	5c14 <memset>
    fio_fds[0].fdread = stdin_read;
    54fa:	f644 3378 	movw	r3, #19320	; 0x4b78
    54fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5502:	f245 427d 	movw	r2, #21629	; 0x547d
    5506:	f2c0 0200 	movt	r2, #0
    550a:	601a      	str	r2, [r3, #0]
    fio_fds[1].fdwrite = stdout_write;
    550c:	f644 3378 	movw	r3, #19320	; 0x4b78
    5510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5514:	f245 4299 	movw	r2, #21657	; 0x5499
    5518:	f2c0 0200 	movt	r2, #0
    551c:	619a      	str	r2, [r3, #24]
    fio_fds[2].fdwrite = stdout_write;
    551e:	f644 3378 	movw	r3, #19320	; 0x4b78
    5522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5526:	f245 4299 	movw	r2, #21657	; 0x5499
    552a:	f2c0 0200 	movt	r2, #0
    552e:	62da      	str	r2, [r3, #44]	; 0x2c
    fio_sem = xSemaphoreCreateMutex();
    5530:	f04f 0001 	mov.w	r0, #1
    5534:	f7fd fd7c 	bl	3030 <xQueueCreateMutex>
    5538:	4602      	mov	r2, r0
    553a:	f644 53f8 	movw	r3, #19960	; 0x4df8
    553e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5542:	601a      	str	r2, [r3, #0]
}
    5544:	bd80      	pop	{r7, pc}
    5546:	bf00      	nop

00005548 <fio_getfd>:

struct fddef_t * fio_getfd(int fd) {
    5548:	b480      	push	{r7}
    554a:	b083      	sub	sp, #12
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	2b00      	cmp	r3, #0
    5554:	db02      	blt.n	555c <fio_getfd+0x14>
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	2b1f      	cmp	r3, #31
    555a:	dd02      	ble.n	5562 <fio_getfd+0x1a>
        return NULL;
    555c:	f04f 0300 	mov.w	r3, #0
    5560:	e00c      	b.n	557c <fio_getfd+0x34>
    return fio_fds + fd;
    5562:	687a      	ldr	r2, [r7, #4]
    5564:	4613      	mov	r3, r2
    5566:	ea4f 0383 	mov.w	r3, r3, lsl #2
    556a:	189b      	adds	r3, r3, r2
    556c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5570:	461a      	mov	r2, r3
    5572:	f644 3378 	movw	r3, #19320	; 0x4b78
    5576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    557a:	18d3      	adds	r3, r2, r3
}
    557c:	4618      	mov	r0, r3
    557e:	f107 070c 	add.w	r7, r7, #12
    5582:	46bd      	mov	sp, r7
    5584:	bc80      	pop	{r7}
    5586:	4770      	bx	lr

00005588 <fio_is_open_int>:

static int fio_is_open_int(int fd) {
    5588:	b480      	push	{r7}
    558a:	b085      	sub	sp, #20
    558c:	af00      	add	r7, sp, #0
    558e:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	2b00      	cmp	r3, #0
    5594:	db02      	blt.n	559c <fio_is_open_int+0x14>
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	2b1f      	cmp	r3, #31
    559a:	dd02      	ble.n	55a2 <fio_is_open_int+0x1a>
        return 0;
    559c:	f04f 0300 	mov.w	r3, #0
    55a0:	e059      	b.n	5656 <fio_is_open_int+0xce>
    int r = !((fio_fds[fd].fdread == NULL) &&
    55a2:	f644 3278 	movw	r2, #19320	; 0x4b78
    55a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55aa:	6879      	ldr	r1, [r7, #4]
    55ac:	460b      	mov	r3, r1
    55ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55b2:	185b      	adds	r3, r3, r1
    55b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55b8:	18d3      	adds	r3, r2, r3
    55ba:	681b      	ldr	r3, [r3, #0]
    55bc:	2b00      	cmp	r3, #0
    55be:	d143      	bne.n	5648 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
    55c0:	f644 3278 	movw	r2, #19320	; 0x4b78
    55c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55c8:	6879      	ldr	r1, [r7, #4]
    55ca:	460b      	mov	r3, r1
    55cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55d0:	185b      	adds	r3, r3, r1
    55d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55d6:	18d3      	adds	r3, r2, r3
    55d8:	f103 0304 	add.w	r3, r3, #4
    55dc:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    55de:	2b00      	cmp	r3, #0
    55e0:	d132      	bne.n	5648 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    55e2:	f644 3278 	movw	r2, #19320	; 0x4b78
    55e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55ea:	6879      	ldr	r1, [r7, #4]
    55ec:	460b      	mov	r3, r1
    55ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55f2:	185b      	adds	r3, r3, r1
    55f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55f8:	18d3      	adds	r3, r2, r3
    55fa:	f103 0308 	add.w	r3, r3, #8
    55fe:	681b      	ldr	r3, [r3, #0]

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
    5600:	2b00      	cmp	r3, #0
    5602:	d121      	bne.n	5648 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
    5604:	f644 3278 	movw	r2, #19320	; 0x4b78
    5608:	f2c2 0200 	movt	r2, #8192	; 0x2000
    560c:	6879      	ldr	r1, [r7, #4]
    560e:	460b      	mov	r3, r1
    5610:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5614:	185b      	adds	r3, r3, r1
    5616:	ea4f 0383 	mov.w	r3, r3, lsl #2
    561a:	18d3      	adds	r3, r2, r3
    561c:	f103 030c 	add.w	r3, r3, #12
    5620:	681b      	ldr	r3, [r3, #0]
static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    5622:	2b00      	cmp	r3, #0
    5624:	d110      	bne.n	5648 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    5626:	f644 3278 	movw	r2, #19320	; 0x4b78
    562a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    562e:	6879      	ldr	r1, [r7, #4]
    5630:	460b      	mov	r3, r1
    5632:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5636:	185b      	adds	r3, r3, r1
    5638:	ea4f 0383 	mov.w	r3, r3, lsl #2
    563c:	18d3      	adds	r3, r2, r3
    563e:	f103 0310 	add.w	r3, r3, #16
    5642:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    5644:	2b00      	cmp	r3, #0
    5646:	d002      	beq.n	564e <fio_is_open_int+0xc6>
    5648:	f04f 0301 	mov.w	r3, #1
    564c:	e001      	b.n	5652 <fio_is_open_int+0xca>
    564e:	f04f 0300 	mov.w	r3, #0
    5652:	60fb      	str	r3, [r7, #12]
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    return r;
    5654:	68fb      	ldr	r3, [r7, #12]
}
    5656:	4618      	mov	r0, r3
    5658:	f107 0714 	add.w	r7, r7, #20
    565c:	46bd      	mov	sp, r7
    565e:	bc80      	pop	{r7}
    5660:	4770      	bx	lr
    5662:	bf00      	nop

00005664 <fio_findfd>:

static int fio_findfd() {
    5664:	b580      	push	{r7, lr}
    5666:	b082      	sub	sp, #8
    5668:	af00      	add	r7, sp, #0
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    566a:	f04f 0300 	mov.w	r3, #0
    566e:	607b      	str	r3, [r7, #4]
    5670:	e00b      	b.n	568a <fio_findfd+0x26>
        if (!fio_is_open_int(i))
    5672:	6878      	ldr	r0, [r7, #4]
    5674:	f7ff ff88 	bl	5588 <fio_is_open_int>
    5678:	4603      	mov	r3, r0
    567a:	2b00      	cmp	r3, #0
    567c:	d101      	bne.n	5682 <fio_findfd+0x1e>
            return i;
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	e008      	b.n	5694 <fio_findfd+0x30>
}

static int fio_findfd() {
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	f103 0301 	add.w	r3, r3, #1
    5688:	607b      	str	r3, [r7, #4]
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	2b1f      	cmp	r3, #31
    568e:	ddf0      	ble.n	5672 <fio_findfd+0xe>
        if (!fio_is_open_int(i))
            return i;
    }
    
    return -1;
    5690:	f04f 33ff 	mov.w	r3, #4294967295
}
    5694:	4618      	mov	r0, r3
    5696:	f107 0708 	add.w	r7, r7, #8
    569a:	46bd      	mov	sp, r7
    569c:	bd80      	pop	{r7, pc}
    569e:	bf00      	nop

000056a0 <fio_is_open>:

int fio_is_open(int fd) {
    56a0:	b580      	push	{r7, lr}
    56a2:	b084      	sub	sp, #16
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
    int r = 0;
    56a8:	f04f 0300 	mov.w	r3, #0
    56ac:	60fb      	str	r3, [r7, #12]
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    56ae:	f644 53f8 	movw	r3, #19960	; 0x4df8
    56b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	4618      	mov	r0, r3
    56ba:	f04f 0100 	mov.w	r1, #0
    56be:	f04f 32ff 	mov.w	r2, #4294967295
    56c2:	f04f 0300 	mov.w	r3, #0
    56c6:	f7fd fdf1 	bl	32ac <xQueueGenericReceive>
    r = fio_is_open_int(fd);
    56ca:	6878      	ldr	r0, [r7, #4]
    56cc:	f7ff ff5c 	bl	5588 <fio_is_open_int>
    56d0:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fio_sem);
    56d2:	f644 53f8 	movw	r3, #19960	; 0x4df8
    56d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	4618      	mov	r0, r3
    56de:	f04f 0100 	mov.w	r1, #0
    56e2:	f04f 0200 	mov.w	r2, #0
    56e6:	f04f 0300 	mov.w	r3, #0
    56ea:	f7fd fd07 	bl	30fc <xQueueGenericSend>
    return r;
    56ee:	68fb      	ldr	r3, [r7, #12]
}
    56f0:	4618      	mov	r0, r3
    56f2:	f107 0710 	add.w	r7, r7, #16
    56f6:	46bd      	mov	sp, r7
    56f8:	bd80      	pop	{r7, pc}
    56fa:	bf00      	nop

000056fc <fio_open>:

int fio_open(fdread_t fdread, fdwrite_t fdwrite, fdseek_t fdseek, fdclose_t fdclose, void * opaque) {
    56fc:	b580      	push	{r7, lr}
    56fe:	b086      	sub	sp, #24
    5700:	af00      	add	r7, sp, #0
    5702:	60f8      	str	r0, [r7, #12]
    5704:	60b9      	str	r1, [r7, #8]
    5706:	607a      	str	r2, [r7, #4]
    5708:	603b      	str	r3, [r7, #0]
    int fd;
//    DBGOUT("fio_open(%p, %p, %p, %p, %p)\r\n", fdread, fdwrite, fdseek, fdclose, opaque);
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    570a:	f644 53f8 	movw	r3, #19960	; 0x4df8
    570e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5712:	681b      	ldr	r3, [r3, #0]
    5714:	4618      	mov	r0, r3
    5716:	f04f 0100 	mov.w	r1, #0
    571a:	f04f 32ff 	mov.w	r2, #4294967295
    571e:	f04f 0300 	mov.w	r3, #0
    5722:	f7fd fdc3 	bl	32ac <xQueueGenericReceive>
    fd = fio_findfd();
    5726:	f7ff ff9d 	bl	5664 <fio_findfd>
    572a:	6178      	str	r0, [r7, #20]
    
    if (fd >= 0) {
    572c:	697b      	ldr	r3, [r7, #20]
    572e:	2b00      	cmp	r3, #0
    5730:	db4d      	blt.n	57ce <fio_open+0xd2>
        fio_fds[fd].fdread = fdread;
    5732:	f644 3278 	movw	r2, #19320	; 0x4b78
    5736:	f2c2 0200 	movt	r2, #8192	; 0x2000
    573a:	6979      	ldr	r1, [r7, #20]
    573c:	460b      	mov	r3, r1
    573e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5742:	185b      	adds	r3, r3, r1
    5744:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5748:	18d3      	adds	r3, r2, r3
    574a:	68fa      	ldr	r2, [r7, #12]
    574c:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdwrite = fdwrite;
    574e:	f644 3278 	movw	r2, #19320	; 0x4b78
    5752:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5756:	6979      	ldr	r1, [r7, #20]
    5758:	460b      	mov	r3, r1
    575a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    575e:	185b      	adds	r3, r3, r1
    5760:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5764:	18d3      	adds	r3, r2, r3
    5766:	f103 0304 	add.w	r3, r3, #4
    576a:	68ba      	ldr	r2, [r7, #8]
    576c:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdseek = fdseek;
    576e:	f644 3278 	movw	r2, #19320	; 0x4b78
    5772:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5776:	6979      	ldr	r1, [r7, #20]
    5778:	460b      	mov	r3, r1
    577a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    577e:	185b      	adds	r3, r3, r1
    5780:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5784:	18d3      	adds	r3, r2, r3
    5786:	f103 0308 	add.w	r3, r3, #8
    578a:	687a      	ldr	r2, [r7, #4]
    578c:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdclose = fdclose;
    578e:	f644 3278 	movw	r2, #19320	; 0x4b78
    5792:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5796:	6979      	ldr	r1, [r7, #20]
    5798:	460b      	mov	r3, r1
    579a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    579e:	185b      	adds	r3, r3, r1
    57a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57a4:	18d3      	adds	r3, r2, r3
    57a6:	f103 030c 	add.w	r3, r3, #12
    57aa:	683a      	ldr	r2, [r7, #0]
    57ac:	601a      	str	r2, [r3, #0]
        fio_fds[fd].opaque = opaque;
    57ae:	f644 3278 	movw	r2, #19320	; 0x4b78
    57b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57b6:	6979      	ldr	r1, [r7, #20]
    57b8:	460b      	mov	r3, r1
    57ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57be:	185b      	adds	r3, r3, r1
    57c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57c4:	18d3      	adds	r3, r2, r3
    57c6:	f103 0310 	add.w	r3, r3, #16
    57ca:	6a3a      	ldr	r2, [r7, #32]
    57cc:	601a      	str	r2, [r3, #0]
    }
    xSemaphoreGive(fio_sem);
    57ce:	f644 53f8 	movw	r3, #19960	; 0x4df8
    57d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	4618      	mov	r0, r3
    57da:	f04f 0100 	mov.w	r1, #0
    57de:	f04f 0200 	mov.w	r2, #0
    57e2:	f04f 0300 	mov.w	r3, #0
    57e6:	f7fd fc89 	bl	30fc <xQueueGenericSend>
    
    return fd;
    57ea:	697b      	ldr	r3, [r7, #20]
}
    57ec:	4618      	mov	r0, r3
    57ee:	f107 0718 	add.w	r7, r7, #24
    57f2:	46bd      	mov	sp, r7
    57f4:	bd80      	pop	{r7, pc}
    57f6:	bf00      	nop

000057f8 <fio_read>:

ssize_t fio_read(int fd, void * buf, size_t count) {
    57f8:	b590      	push	{r4, r7, lr}
    57fa:	b087      	sub	sp, #28
    57fc:	af00      	add	r7, sp, #0
    57fe:	60f8      	str	r0, [r7, #12]
    5800:	60b9      	str	r1, [r7, #8]
    5802:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    5804:	f04f 0300 	mov.w	r3, #0
    5808:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_read(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    580a:	68f8      	ldr	r0, [r7, #12]
    580c:	f7ff febc 	bl	5588 <fio_is_open_int>
    5810:	4603      	mov	r3, r0
    5812:	2b00      	cmp	r3, #0
    5814:	d034      	beq.n	5880 <fio_read+0x88>
        if (fio_fds[fd].fdread) {
    5816:	f644 3278 	movw	r2, #19320	; 0x4b78
    581a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    581e:	68f9      	ldr	r1, [r7, #12]
    5820:	460b      	mov	r3, r1
    5822:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5826:	185b      	adds	r3, r3, r1
    5828:	ea4f 0383 	mov.w	r3, r3, lsl #2
    582c:	18d3      	adds	r3, r2, r3
    582e:	681b      	ldr	r3, [r3, #0]
    5830:	2b00      	cmp	r3, #0
    5832:	d021      	beq.n	5878 <fio_read+0x80>
            r = fio_fds[fd].fdread(fio_fds[fd].opaque, buf, count);
    5834:	f644 3278 	movw	r2, #19320	; 0x4b78
    5838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    583c:	68f9      	ldr	r1, [r7, #12]
    583e:	460b      	mov	r3, r1
    5840:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5844:	185b      	adds	r3, r3, r1
    5846:	ea4f 0383 	mov.w	r3, r3, lsl #2
    584a:	18d3      	adds	r3, r2, r3
    584c:	681c      	ldr	r4, [r3, #0]
    584e:	f644 3278 	movw	r2, #19320	; 0x4b78
    5852:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5856:	68f9      	ldr	r1, [r7, #12]
    5858:	460b      	mov	r3, r1
    585a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    585e:	185b      	adds	r3, r3, r1
    5860:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5864:	18d3      	adds	r3, r2, r3
    5866:	f103 0310 	add.w	r3, r3, #16
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	4618      	mov	r0, r3
    586e:	68b9      	ldr	r1, [r7, #8]
    5870:	687a      	ldr	r2, [r7, #4]
    5872:	47a0      	blx	r4
    5874:	6178      	str	r0, [r7, #20]
    5876:	e006      	b.n	5886 <fio_read+0x8e>
        } else {
            r = -3;
    5878:	f06f 0302 	mvn.w	r3, #2
    587c:	617b      	str	r3, [r7, #20]
    587e:	e002      	b.n	5886 <fio_read+0x8e>
        }
    } else {
        r = -2;
    5880:	f06f 0301 	mvn.w	r3, #1
    5884:	617b      	str	r3, [r7, #20]
    }
    return r;
    5886:	697b      	ldr	r3, [r7, #20]
}
    5888:	4618      	mov	r0, r3
    588a:	f107 071c 	add.w	r7, r7, #28
    588e:	46bd      	mov	sp, r7
    5890:	bd90      	pop	{r4, r7, pc}
    5892:	bf00      	nop

00005894 <fio_write>:

ssize_t fio_write(int fd, const void * buf, size_t count) {
    5894:	b590      	push	{r4, r7, lr}
    5896:	b087      	sub	sp, #28
    5898:	af00      	add	r7, sp, #0
    589a:	60f8      	str	r0, [r7, #12]
    589c:	60b9      	str	r1, [r7, #8]
    589e:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    58a0:	f04f 0300 	mov.w	r3, #0
    58a4:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_write(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    58a6:	68f8      	ldr	r0, [r7, #12]
    58a8:	f7ff fe6e 	bl	5588 <fio_is_open_int>
    58ac:	4603      	mov	r3, r0
    58ae:	2b00      	cmp	r3, #0
    58b0:	d038      	beq.n	5924 <fio_write+0x90>
        if (fio_fds[fd].fdwrite) {
    58b2:	f644 3278 	movw	r2, #19320	; 0x4b78
    58b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58ba:	68f9      	ldr	r1, [r7, #12]
    58bc:	460b      	mov	r3, r1
    58be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58c2:	185b      	adds	r3, r3, r1
    58c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58c8:	18d3      	adds	r3, r2, r3
    58ca:	f103 0304 	add.w	r3, r3, #4
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	2b00      	cmp	r3, #0
    58d2:	d023      	beq.n	591c <fio_write+0x88>
            r = fio_fds[fd].fdwrite(fio_fds[fd].opaque, buf, count);
    58d4:	f644 3278 	movw	r2, #19320	; 0x4b78
    58d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58dc:	68f9      	ldr	r1, [r7, #12]
    58de:	460b      	mov	r3, r1
    58e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58e4:	185b      	adds	r3, r3, r1
    58e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58ea:	18d3      	adds	r3, r2, r3
    58ec:	f103 0304 	add.w	r3, r3, #4
    58f0:	681c      	ldr	r4, [r3, #0]
    58f2:	f644 3278 	movw	r2, #19320	; 0x4b78
    58f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58fa:	68f9      	ldr	r1, [r7, #12]
    58fc:	460b      	mov	r3, r1
    58fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5902:	185b      	adds	r3, r3, r1
    5904:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5908:	18d3      	adds	r3, r2, r3
    590a:	f103 0310 	add.w	r3, r3, #16
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	4618      	mov	r0, r3
    5912:	68b9      	ldr	r1, [r7, #8]
    5914:	687a      	ldr	r2, [r7, #4]
    5916:	47a0      	blx	r4
    5918:	6178      	str	r0, [r7, #20]
    591a:	e006      	b.n	592a <fio_write+0x96>
        } else {
            r = -3;
    591c:	f06f 0302 	mvn.w	r3, #2
    5920:	617b      	str	r3, [r7, #20]
    5922:	e002      	b.n	592a <fio_write+0x96>
        }
    } else {
        r = -2;
    5924:	f06f 0301 	mvn.w	r3, #1
    5928:	617b      	str	r3, [r7, #20]
    }
    return r;
    592a:	697b      	ldr	r3, [r7, #20]
}
    592c:	4618      	mov	r0, r3
    592e:	f107 071c 	add.w	r7, r7, #28
    5932:	46bd      	mov	sp, r7
    5934:	bd90      	pop	{r4, r7, pc}
    5936:	bf00      	nop

00005938 <fio_seek>:

off_t fio_seek(int fd, off_t offset, int whence) {
    5938:	b590      	push	{r4, r7, lr}
    593a:	b087      	sub	sp, #28
    593c:	af00      	add	r7, sp, #0
    593e:	60f8      	str	r0, [r7, #12]
    5940:	60b9      	str	r1, [r7, #8]
    5942:	607a      	str	r2, [r7, #4]
    off_t r = 0;
    5944:	f04f 0300 	mov.w	r3, #0
    5948:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_seek(%i, %i, %i)\r\n", fd, offset, whence);
    if (fio_is_open_int(fd)) {
    594a:	68f8      	ldr	r0, [r7, #12]
    594c:	f7ff fe1c 	bl	5588 <fio_is_open_int>
    5950:	4603      	mov	r3, r0
    5952:	2b00      	cmp	r3, #0
    5954:	d038      	beq.n	59c8 <fio_seek+0x90>
        if (fio_fds[fd].fdseek) {
    5956:	f644 3278 	movw	r2, #19320	; 0x4b78
    595a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    595e:	68f9      	ldr	r1, [r7, #12]
    5960:	460b      	mov	r3, r1
    5962:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5966:	185b      	adds	r3, r3, r1
    5968:	ea4f 0383 	mov.w	r3, r3, lsl #2
    596c:	18d3      	adds	r3, r2, r3
    596e:	f103 0308 	add.w	r3, r3, #8
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	2b00      	cmp	r3, #0
    5976:	d023      	beq.n	59c0 <fio_seek+0x88>
            r = fio_fds[fd].fdseek(fio_fds[fd].opaque, offset, whence);
    5978:	f644 3278 	movw	r2, #19320	; 0x4b78
    597c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5980:	68f9      	ldr	r1, [r7, #12]
    5982:	460b      	mov	r3, r1
    5984:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5988:	185b      	adds	r3, r3, r1
    598a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    598e:	18d3      	adds	r3, r2, r3
    5990:	f103 0308 	add.w	r3, r3, #8
    5994:	681c      	ldr	r4, [r3, #0]
    5996:	f644 3278 	movw	r2, #19320	; 0x4b78
    599a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    599e:	68f9      	ldr	r1, [r7, #12]
    59a0:	460b      	mov	r3, r1
    59a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59a6:	185b      	adds	r3, r3, r1
    59a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59ac:	18d3      	adds	r3, r2, r3
    59ae:	f103 0310 	add.w	r3, r3, #16
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	4618      	mov	r0, r3
    59b6:	68b9      	ldr	r1, [r7, #8]
    59b8:	687a      	ldr	r2, [r7, #4]
    59ba:	47a0      	blx	r4
    59bc:	6178      	str	r0, [r7, #20]
    59be:	e006      	b.n	59ce <fio_seek+0x96>
        } else {
            r = -3;
    59c0:	f06f 0302 	mvn.w	r3, #2
    59c4:	617b      	str	r3, [r7, #20]
    59c6:	e002      	b.n	59ce <fio_seek+0x96>
        }
    } else {
        r = -2;
    59c8:	f06f 0301 	mvn.w	r3, #1
    59cc:	617b      	str	r3, [r7, #20]
    }
    return r;
    59ce:	697b      	ldr	r3, [r7, #20]
}
    59d0:	4618      	mov	r0, r3
    59d2:	f107 071c 	add.w	r7, r7, #28
    59d6:	46bd      	mov	sp, r7
    59d8:	bd90      	pop	{r4, r7, pc}
    59da:	bf00      	nop

000059dc <fio_close>:

int fio_close(int fd) {
    59dc:	b590      	push	{r4, r7, lr}
    59de:	b085      	sub	sp, #20
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
    int r = 0;
    59e4:	f04f 0300 	mov.w	r3, #0
    59e8:	60fb      	str	r3, [r7, #12]
//    DBGOUT("fio_close(%i)\r\n", fd);
    if (fio_is_open_int(fd)) {
    59ea:	6878      	ldr	r0, [r7, #4]
    59ec:	f7ff fdcc 	bl	5588 <fio_is_open_int>
    59f0:	4603      	mov	r3, r0
    59f2:	2b00      	cmp	r3, #0
    59f4:	d064      	beq.n	5ac0 <fio_close+0xe4>
        if (fio_fds[fd].fdclose)
    59f6:	f644 3278 	movw	r2, #19320	; 0x4b78
    59fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59fe:	6879      	ldr	r1, [r7, #4]
    5a00:	460b      	mov	r3, r1
    5a02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a06:	185b      	adds	r3, r3, r1
    5a08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a0c:	18d3      	adds	r3, r2, r3
    5a0e:	f103 030c 	add.w	r3, r3, #12
    5a12:	681b      	ldr	r3, [r3, #0]
    5a14:	2b00      	cmp	r3, #0
    5a16:	d020      	beq.n	5a5a <fio_close+0x7e>
            r = fio_fds[fd].fdclose(fio_fds[fd].opaque);
    5a18:	f644 3278 	movw	r2, #19320	; 0x4b78
    5a1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a20:	6879      	ldr	r1, [r7, #4]
    5a22:	460b      	mov	r3, r1
    5a24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a28:	185b      	adds	r3, r3, r1
    5a2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a2e:	18d3      	adds	r3, r2, r3
    5a30:	f103 030c 	add.w	r3, r3, #12
    5a34:	681c      	ldr	r4, [r3, #0]
    5a36:	f644 3278 	movw	r2, #19320	; 0x4b78
    5a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a3e:	6879      	ldr	r1, [r7, #4]
    5a40:	460b      	mov	r3, r1
    5a42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a46:	185b      	adds	r3, r3, r1
    5a48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a4c:	18d3      	adds	r3, r2, r3
    5a4e:	f103 0310 	add.w	r3, r3, #16
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	4618      	mov	r0, r3
    5a56:	47a0      	blx	r4
    5a58:	60f8      	str	r0, [r7, #12]
        xSemaphoreTake(fio_sem, portMAX_DELAY);
    5a5a:	f644 53f8 	movw	r3, #19960	; 0x4df8
    5a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a62:	681b      	ldr	r3, [r3, #0]
    5a64:	4618      	mov	r0, r3
    5a66:	f04f 0100 	mov.w	r1, #0
    5a6a:	f04f 32ff 	mov.w	r2, #4294967295
    5a6e:	f04f 0300 	mov.w	r3, #0
    5a72:	f7fd fc1b 	bl	32ac <xQueueGenericReceive>
        memset(fio_fds + fd, 0, sizeof(struct fddef_t));
    5a76:	687a      	ldr	r2, [r7, #4]
    5a78:	4613      	mov	r3, r2
    5a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a7e:	189b      	adds	r3, r3, r2
    5a80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a84:	461a      	mov	r2, r3
    5a86:	f644 3378 	movw	r3, #19320	; 0x4b78
    5a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8e:	18d3      	adds	r3, r2, r3
    5a90:	f04f 0214 	mov.w	r2, #20
    5a94:	4618      	mov	r0, r3
    5a96:	f04f 0100 	mov.w	r1, #0
    5a9a:	4613      	mov	r3, r2
    5a9c:	461a      	mov	r2, r3
    5a9e:	f000 f8b9 	bl	5c14 <memset>
        xSemaphoreGive(fio_sem);
    5aa2:	f644 53f8 	movw	r3, #19960	; 0x4df8
    5aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	4618      	mov	r0, r3
    5aae:	f04f 0100 	mov.w	r1, #0
    5ab2:	f04f 0200 	mov.w	r2, #0
    5ab6:	f04f 0300 	mov.w	r3, #0
    5aba:	f7fd fb1f 	bl	30fc <xQueueGenericSend>
    5abe:	e002      	b.n	5ac6 <fio_close+0xea>
    } else {
        r = -2;
    5ac0:	f06f 0301 	mvn.w	r3, #1
    5ac4:	60fb      	str	r3, [r7, #12]
    }
    return r;
    5ac6:	68fb      	ldr	r3, [r7, #12]
}
    5ac8:	4618      	mov	r0, r3
    5aca:	f107 0714 	add.w	r7, r7, #20
    5ace:	46bd      	mov	sp, r7
    5ad0:	bd90      	pop	{r4, r7, pc}
    5ad2:	bf00      	nop

00005ad4 <fio_set_opaque>:

void fio_set_opaque(int fd, void * opaque) {
    5ad4:	b580      	push	{r7, lr}
    5ad6:	b082      	sub	sp, #8
    5ad8:	af00      	add	r7, sp, #0
    5ada:	6078      	str	r0, [r7, #4]
    5adc:	6039      	str	r1, [r7, #0]
    if (fio_is_open_int(fd))
    5ade:	6878      	ldr	r0, [r7, #4]
    5ae0:	f7ff fd52 	bl	5588 <fio_is_open_int>
    5ae4:	4603      	mov	r3, r0
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d00f      	beq.n	5b0a <fio_set_opaque+0x36>
        fio_fds[fd].opaque = opaque;
    5aea:	f644 3278 	movw	r2, #19320	; 0x4b78
    5aee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5af2:	6879      	ldr	r1, [r7, #4]
    5af4:	460b      	mov	r3, r1
    5af6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5afa:	185b      	adds	r3, r3, r1
    5afc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b00:	18d3      	adds	r3, r2, r3
    5b02:	f103 0310 	add.w	r3, r3, #16
    5b06:	683a      	ldr	r2, [r7, #0]
    5b08:	601a      	str	r2, [r3, #0]
}
    5b0a:	f107 0708 	add.w	r7, r7, #8
    5b0e:	46bd      	mov	sp, r7
    5b10:	bd80      	pop	{r7, pc}
    5b12:	bf00      	nop

00005b14 <devfs_open>:

#define stdin_hash 0x0BA00421
#define stdout_hash 0x7FA08308
#define stderr_hash 0x7FA058A3

static int devfs_open(void * opaque, const char * path, int flags, int mode) {
    5b14:	b580      	push	{r7, lr}
    5b16:	b088      	sub	sp, #32
    5b18:	af02      	add	r7, sp, #8
    5b1a:	60f8      	str	r0, [r7, #12]
    5b1c:	60b9      	str	r1, [r7, #8]
    5b1e:	607a      	str	r2, [r7, #4]
    5b20:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    5b22:	68b8      	ldr	r0, [r7, #8]
    5b24:	f04f 31ff 	mov.w	r1, #4294967295
    5b28:	f7ff fb8c 	bl	5244 <hash_djb2>
    5b2c:	6178      	str	r0, [r7, #20]
//    DBGOUT("devfs_open(%p, \"%s\", %i, %i)\r\n", opaque, path, flags, mode);
    switch (h) {
    5b2e:	697a      	ldr	r2, [r7, #20]
    5b30:	f645 03a3 	movw	r3, #22691	; 0x58a3
    5b34:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5b38:	429a      	cmp	r2, r3
    5b3a:	d035      	beq.n	5ba8 <devfs_open+0x94>
    5b3c:	f248 3308 	movw	r3, #33544	; 0x8308
    5b40:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5b44:	429a      	cmp	r2, r3
    5b46:	d01e      	beq.n	5b86 <devfs_open+0x72>
    5b48:	f240 4321 	movw	r3, #1057	; 0x421
    5b4c:	f6c0 33a0 	movt	r3, #2976	; 0xba0
    5b50:	429a      	cmp	r2, r3
    5b52:	d13a      	bne.n	5bca <devfs_open+0xb6>
    case stdin_hash:
        if (flags & (O_WRONLY | O_RDWR))
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	f003 0303 	and.w	r3, r3, #3
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d002      	beq.n	5b64 <devfs_open+0x50>
            return -1;
    5b5e:	f04f 33ff 	mov.w	r3, #4294967295
    5b62:	e034      	b.n	5bce <devfs_open+0xba>
        return fio_open(stdin_read, NULL, NULL, NULL, NULL);
    5b64:	f04f 0300 	mov.w	r3, #0
    5b68:	9300      	str	r3, [sp, #0]
    5b6a:	f245 407d 	movw	r0, #21629	; 0x547d
    5b6e:	f2c0 0000 	movt	r0, #0
    5b72:	f04f 0100 	mov.w	r1, #0
    5b76:	f04f 0200 	mov.w	r2, #0
    5b7a:	f04f 0300 	mov.w	r3, #0
    5b7e:	f7ff fdbd 	bl	56fc <fio_open>
    5b82:	4603      	mov	r3, r0
    5b84:	e023      	b.n	5bce <devfs_open+0xba>
        break;
    case stdout_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    5b86:	f04f 0300 	mov.w	r3, #0
    5b8a:	9300      	str	r3, [sp, #0]
    5b8c:	f04f 0000 	mov.w	r0, #0
    5b90:	f245 4199 	movw	r1, #21657	; 0x5499
    5b94:	f2c0 0100 	movt	r1, #0
    5b98:	f04f 0200 	mov.w	r2, #0
    5b9c:	f04f 0300 	mov.w	r3, #0
    5ba0:	f7ff fdac 	bl	56fc <fio_open>
    5ba4:	4603      	mov	r3, r0
    5ba6:	e012      	b.n	5bce <devfs_open+0xba>
        break;
    case stderr_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    5ba8:	f04f 0300 	mov.w	r3, #0
    5bac:	9300      	str	r3, [sp, #0]
    5bae:	f04f 0000 	mov.w	r0, #0
    5bb2:	f245 4199 	movw	r1, #21657	; 0x5499
    5bb6:	f2c0 0100 	movt	r1, #0
    5bba:	f04f 0200 	mov.w	r2, #0
    5bbe:	f04f 0300 	mov.w	r3, #0
    5bc2:	f7ff fd9b 	bl	56fc <fio_open>
    5bc6:	4603      	mov	r3, r0
    5bc8:	e001      	b.n	5bce <devfs_open+0xba>
        break;
    }
    return -1;
    5bca:	f04f 33ff 	mov.w	r3, #4294967295
}
    5bce:	4618      	mov	r0, r3
    5bd0:	f107 0718 	add.w	r7, r7, #24
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bd80      	pop	{r7, pc}

00005bd8 <register_devfs>:

void register_devfs() {
    5bd8:	b580      	push	{r7, lr}
    5bda:	af00      	add	r7, sp, #0
    DBGOUT("Registering devfs.\r\n");
    5bdc:	f246 1038 	movw	r0, #24888	; 0x6138
    5be0:	f2c0 0000 	movt	r0, #0
    5be4:	f000 f80e 	bl	5c04 <osDbgPrintf>
    register_fs("dev", devfs_open, NULL);
    5be8:	f246 1050 	movw	r0, #24912	; 0x6150
    5bec:	f2c0 0000 	movt	r0, #0
    5bf0:	f645 3115 	movw	r1, #23317	; 0x5b15
    5bf4:	f2c0 0100 	movt	r1, #0
    5bf8:	f04f 0200 	mov.w	r2, #0
    5bfc:	f7ff fb68 	bl	52d0 <register_fs>
}
    5c00:	bd80      	pop	{r7, pc}
    5c02:	bf00      	nop

00005c04 <osDbgPrintf>:
void osDbgPrintf(const char * fmt, ...) { }
    5c04:	b40f      	push	{r0, r1, r2, r3}
    5c06:	b480      	push	{r7}
    5c08:	af00      	add	r7, sp, #0
    5c0a:	46bd      	mov	sp, r7
    5c0c:	bc80      	pop	{r7}
    5c0e:	b004      	add	sp, #16
    5c10:	4770      	bx	lr
    5c12:	bf00      	nop

00005c14 <memset>:
#define HIGHS (ONES * (UCHAR_MAX/2+1))
#define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)

#define SS (sizeof(size_t))
void *memset(void *dest, int c, size_t n)
{
    5c14:	b480      	push	{r7}
    5c16:	b089      	sub	sp, #36	; 0x24
    5c18:	af00      	add	r7, sp, #0
    5c1a:	60f8      	str	r0, [r7, #12]
    5c1c:	60b9      	str	r1, [r7, #8]
    5c1e:	607a      	str	r2, [r7, #4]
	unsigned char *s = dest;
    5c20:	68fb      	ldr	r3, [r7, #12]
    5c22:	61fb      	str	r3, [r7, #28]
	c = (unsigned char)c;
    5c24:	68bb      	ldr	r3, [r7, #8]
    5c26:	b2db      	uxtb	r3, r3
    5c28:	60bb      	str	r3, [r7, #8]
	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
    5c2a:	e00b      	b.n	5c44 <memset+0x30>
    5c2c:	68bb      	ldr	r3, [r7, #8]
    5c2e:	b2da      	uxtb	r2, r3
    5c30:	69fb      	ldr	r3, [r7, #28]
    5c32:	701a      	strb	r2, [r3, #0]
    5c34:	69fb      	ldr	r3, [r7, #28]
    5c36:	f103 0301 	add.w	r3, r3, #1
    5c3a:	61fb      	str	r3, [r7, #28]
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	f103 33ff 	add.w	r3, r3, #4294967295
    5c42:	607b      	str	r3, [r7, #4]
    5c44:	69fb      	ldr	r3, [r7, #28]
    5c46:	f003 0304 	and.w	r3, r3, #4
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d002      	beq.n	5c54 <memset+0x40>
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d1eb      	bne.n	5c2c <memset+0x18>
	if (n) {
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d02b      	beq.n	5cb2 <memset+0x9e>
		size_t *w, k = ONES * c;
    5c5a:	68ba      	ldr	r2, [r7, #8]
    5c5c:	4613      	mov	r3, r2
    5c5e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5c62:	189b      	adds	r3, r3, r2
    5c64:	ea4f 4203 	mov.w	r2, r3, lsl #16
    5c68:	189b      	adds	r3, r3, r2
    5c6a:	617b      	str	r3, [r7, #20]
		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
    5c6c:	69fb      	ldr	r3, [r7, #28]
    5c6e:	61bb      	str	r3, [r7, #24]
    5c70:	e00a      	b.n	5c88 <memset+0x74>
    5c72:	69bb      	ldr	r3, [r7, #24]
    5c74:	697a      	ldr	r2, [r7, #20]
    5c76:	601a      	str	r2, [r3, #0]
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	f1a3 0304 	sub.w	r3, r3, #4
    5c7e:	607b      	str	r3, [r7, #4]
    5c80:	69bb      	ldr	r3, [r7, #24]
    5c82:	f103 0304 	add.w	r3, r3, #4
    5c86:	61bb      	str	r3, [r7, #24]
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	2b03      	cmp	r3, #3
    5c8c:	d8f1      	bhi.n	5c72 <memset+0x5e>
		for (s = (void *)w; n; n--, s++) *s = c;
    5c8e:	69bb      	ldr	r3, [r7, #24]
    5c90:	61fb      	str	r3, [r7, #28]
    5c92:	e00b      	b.n	5cac <memset+0x98>
    5c94:	68bb      	ldr	r3, [r7, #8]
    5c96:	b2da      	uxtb	r2, r3
    5c98:	69fb      	ldr	r3, [r7, #28]
    5c9a:	701a      	strb	r2, [r3, #0]
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	f103 33ff 	add.w	r3, r3, #4294967295
    5ca2:	607b      	str	r3, [r7, #4]
    5ca4:	69fb      	ldr	r3, [r7, #28]
    5ca6:	f103 0301 	add.w	r3, r3, #1
    5caa:	61fb      	str	r3, [r7, #28]
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d1f0      	bne.n	5c94 <memset+0x80>
	}
	return dest;
    5cb2:	68fb      	ldr	r3, [r7, #12]
}
    5cb4:	4618      	mov	r0, r3
    5cb6:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5cba:	46bd      	mov	sp, r7
    5cbc:	bc80      	pop	{r7}
    5cbe:	4770      	bx	lr

00005cc0 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
    5cc0:	b480      	push	{r7}
    5cc2:	b08b      	sub	sp, #44	; 0x2c
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	60f8      	str	r0, [r7, #12]
    5cc8:	60b9      	str	r1, [r7, #8]
    5cca:	607a      	str	r2, [r7, #4]
	void *ret = dest;
    5ccc:	68fb      	ldr	r3, [r7, #12]
    5cce:	617b      	str	r3, [r7, #20]
	
	//Cut rear
	uint8_t *dst8 = dest;
    5cd0:	68fb      	ldr	r3, [r7, #12]
    5cd2:	627b      	str	r3, [r7, #36]	; 0x24
	const uint8_t *src8 = src;
    5cd4:	68bb      	ldr	r3, [r7, #8]
    5cd6:	623b      	str	r3, [r7, #32]
	switch (n % 4) {
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	f003 0303 	and.w	r3, r3, #3
    5cde:	2b02      	cmp	r3, #2
    5ce0:	d010      	beq.n	5d04 <memcpy+0x44>
    5ce2:	2b03      	cmp	r3, #3
    5ce4:	d002      	beq.n	5cec <memcpy+0x2c>
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d018      	beq.n	5d1c <memcpy+0x5c>
    5cea:	e023      	b.n	5d34 <memcpy+0x74>
		case 3 : *dst8++ = *src8++;
    5cec:	6a3b      	ldr	r3, [r7, #32]
    5cee:	781a      	ldrb	r2, [r3, #0]
    5cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cf2:	701a      	strb	r2, [r3, #0]
    5cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cf6:	f103 0301 	add.w	r3, r3, #1
    5cfa:	627b      	str	r3, [r7, #36]	; 0x24
    5cfc:	6a3b      	ldr	r3, [r7, #32]
    5cfe:	f103 0301 	add.w	r3, r3, #1
    5d02:	623b      	str	r3, [r7, #32]
		case 2 : *dst8++ = *src8++;
    5d04:	6a3b      	ldr	r3, [r7, #32]
    5d06:	781a      	ldrb	r2, [r3, #0]
    5d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d0a:	701a      	strb	r2, [r3, #0]
    5d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d0e:	f103 0301 	add.w	r3, r3, #1
    5d12:	627b      	str	r3, [r7, #36]	; 0x24
    5d14:	6a3b      	ldr	r3, [r7, #32]
    5d16:	f103 0301 	add.w	r3, r3, #1
    5d1a:	623b      	str	r3, [r7, #32]
		case 1 : *dst8++ = *src8++;
    5d1c:	6a3b      	ldr	r3, [r7, #32]
    5d1e:	781a      	ldrb	r2, [r3, #0]
    5d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d22:	701a      	strb	r2, [r3, #0]
    5d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d26:	f103 0301 	add.w	r3, r3, #1
    5d2a:	627b      	str	r3, [r7, #36]	; 0x24
    5d2c:	6a3b      	ldr	r3, [r7, #32]
    5d2e:	f103 0301 	add.w	r3, r3, #1
    5d32:	623b      	str	r3, [r7, #32]
		case 0 : ;
	}
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
    5d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d36:	61fb      	str	r3, [r7, #28]
	const uint32_t *src32 = (void *)src8;
    5d38:	6a3b      	ldr	r3, [r7, #32]
    5d3a:	61bb      	str	r3, [r7, #24]
	n = n / 4;
    5d3c:	687b      	ldr	r3, [r7, #4]
    5d3e:	ea4f 0393 	mov.w	r3, r3, lsr #2
    5d42:	607b      	str	r3, [r7, #4]
	while (n--) {
    5d44:	e00b      	b.n	5d5e <memcpy+0x9e>
		*dst32++ = *src32++;
    5d46:	69bb      	ldr	r3, [r7, #24]
    5d48:	681a      	ldr	r2, [r3, #0]
    5d4a:	69fb      	ldr	r3, [r7, #28]
    5d4c:	601a      	str	r2, [r3, #0]
    5d4e:	69fb      	ldr	r3, [r7, #28]
    5d50:	f103 0304 	add.w	r3, r3, #4
    5d54:	61fb      	str	r3, [r7, #28]
    5d56:	69bb      	ldr	r3, [r7, #24]
    5d58:	f103 0304 	add.w	r3, r3, #4
    5d5c:	61bb      	str	r3, [r7, #24]
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
	const uint32_t *src32 = (void *)src8;
	n = n / 4;
	while (n--) {
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	2b00      	cmp	r3, #0
    5d62:	bf0c      	ite	eq
    5d64:	2300      	moveq	r3, #0
    5d66:	2301      	movne	r3, #1
    5d68:	b2db      	uxtb	r3, r3
    5d6a:	687a      	ldr	r2, [r7, #4]
    5d6c:	f102 32ff 	add.w	r2, r2, #4294967295
    5d70:	607a      	str	r2, [r7, #4]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d1e7      	bne.n	5d46 <memcpy+0x86>
		*dst32++ = *src32++;
	}
	
	return ret;
    5d76:	697b      	ldr	r3, [r7, #20]
}
    5d78:	4618      	mov	r0, r3
    5d7a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    5d7e:	46bd      	mov	sp, r7
    5d80:	bc80      	pop	{r7}
    5d82:	4770      	bx	lr

00005d84 <strchr>:

char *strchr(const char *s, int c)
{
    5d84:	b480      	push	{r7}
    5d86:	b083      	sub	sp, #12
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	for (; *s && *s != c; s++);
    5d8e:	e003      	b.n	5d98 <strchr+0x14>
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	f103 0301 	add.w	r3, r3, #1
    5d96:	607b      	str	r3, [r7, #4]
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d005      	beq.n	5dac <strchr+0x28>
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	781b      	ldrb	r3, [r3, #0]
    5da4:	461a      	mov	r2, r3
    5da6:	683b      	ldr	r3, [r7, #0]
    5da8:	429a      	cmp	r2, r3
    5daa:	d1f1      	bne.n	5d90 <strchr+0xc>
	return (*s == c) ? (char *)s : NULL;
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	461a      	mov	r2, r3
    5db2:	683b      	ldr	r3, [r7, #0]
    5db4:	429a      	cmp	r2, r3
    5db6:	d101      	bne.n	5dbc <strchr+0x38>
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	e001      	b.n	5dc0 <strchr+0x3c>
    5dbc:	f04f 0300 	mov.w	r3, #0
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	f107 070c 	add.w	r7, r7, #12
    5dc6:	46bd      	mov	sp, r7
    5dc8:	bc80      	pop	{r7}
    5dca:	4770      	bx	lr

00005dcc <strcpy>:

char *strcpy(char *dest, const char *src)
{
    5dcc:	b480      	push	{r7}
    5dce:	b085      	sub	sp, #20
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	6039      	str	r1, [r7, #0]
	const unsigned char *s = src;
    5dd6:	683b      	ldr	r3, [r7, #0]
    5dd8:	60fb      	str	r3, [r7, #12]
	unsigned char *d = dest;
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	60bb      	str	r3, [r7, #8]
	while ((*d++ = *s++));
    5dde:	bf00      	nop
    5de0:	68fb      	ldr	r3, [r7, #12]
    5de2:	781a      	ldrb	r2, [r3, #0]
    5de4:	68bb      	ldr	r3, [r7, #8]
    5de6:	701a      	strb	r2, [r3, #0]
    5de8:	68bb      	ldr	r3, [r7, #8]
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	2b00      	cmp	r3, #0
    5dee:	bf0c      	ite	eq
    5df0:	2300      	moveq	r3, #0
    5df2:	2301      	movne	r3, #1
    5df4:	b2db      	uxtb	r3, r3
    5df6:	68ba      	ldr	r2, [r7, #8]
    5df8:	f102 0201 	add.w	r2, r2, #1
    5dfc:	60ba      	str	r2, [r7, #8]
    5dfe:	68fa      	ldr	r2, [r7, #12]
    5e00:	f102 0201 	add.w	r2, r2, #1
    5e04:	60fa      	str	r2, [r7, #12]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d1ea      	bne.n	5de0 <strcpy+0x14>
	return dest;
    5e0a:	687b      	ldr	r3, [r7, #4]
}
    5e0c:	4618      	mov	r0, r3
    5e0e:	f107 0714 	add.w	r7, r7, #20
    5e12:	46bd      	mov	sp, r7
    5e14:	bc80      	pop	{r7}
    5e16:	4770      	bx	lr

00005e18 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n)
{
    5e18:	b480      	push	{r7}
    5e1a:	b087      	sub	sp, #28
    5e1c:	af00      	add	r7, sp, #0
    5e1e:	60f8      	str	r0, [r7, #12]
    5e20:	60b9      	str	r1, [r7, #8]
    5e22:	607a      	str	r2, [r7, #4]
	const unsigned char *s = src;
    5e24:	68bb      	ldr	r3, [r7, #8]
    5e26:	617b      	str	r3, [r7, #20]
	unsigned char *d = dest;
    5e28:	68fb      	ldr	r3, [r7, #12]
    5e2a:	613b      	str	r3, [r7, #16]
	while (n-- && (*d++ = *s++));
    5e2c:	bf00      	nop
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	2b00      	cmp	r3, #0
    5e32:	bf0c      	ite	eq
    5e34:	2300      	moveq	r3, #0
    5e36:	2301      	movne	r3, #1
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	687a      	ldr	r2, [r7, #4]
    5e3c:	f102 32ff 	add.w	r2, r2, #4294967295
    5e40:	607a      	str	r2, [r7, #4]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d014      	beq.n	5e70 <strncpy+0x58>
    5e46:	697b      	ldr	r3, [r7, #20]
    5e48:	781a      	ldrb	r2, [r3, #0]
    5e4a:	693b      	ldr	r3, [r7, #16]
    5e4c:	701a      	strb	r2, [r3, #0]
    5e4e:	693b      	ldr	r3, [r7, #16]
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	2b00      	cmp	r3, #0
    5e54:	bf0c      	ite	eq
    5e56:	2300      	moveq	r3, #0
    5e58:	2301      	movne	r3, #1
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	693a      	ldr	r2, [r7, #16]
    5e5e:	f102 0201 	add.w	r2, r2, #1
    5e62:	613a      	str	r2, [r7, #16]
    5e64:	697a      	ldr	r2, [r7, #20]
    5e66:	f102 0201 	add.w	r2, r2, #1
    5e6a:	617a      	str	r2, [r7, #20]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d1de      	bne.n	5e2e <strncpy+0x16>
	return dest;
    5e70:	68fb      	ldr	r3, [r7, #12]
}
    5e72:	4618      	mov	r0, r3
    5e74:	f107 071c 	add.w	r7, r7, #28
    5e78:	46bd      	mov	sp, r7
    5e7a:	bc80      	pop	{r7}
    5e7c:	4770      	bx	lr
    5e7e:	bf00      	nop

00005e80 <USART2_IRQHandler>:
volatile xQueueHandle serial_rx_queue = NULL;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART2_IRQHandler()
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b082      	sub	sp, #8
    5e84:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	serial_ch_msg rx_msg;

	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
    5e86:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5e8a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5e8e:	f240 7127 	movw	r1, #1831	; 0x727
    5e92:	f7fc f9e5 	bl	2260 <USART_GetITStatus>
    5e96:	4603      	mov	r3, r0
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d01a      	beq.n	5ed2 <USART2_IRQHandler+0x52>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
    5e9c:	f644 53fc 	movw	r3, #19964	; 0x4dfc
    5ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	4618      	mov	r0, r3
    5ea8:	f04f 0100 	mov.w	r1, #0
    5eac:	f644 6204 	movw	r2, #19972	; 0x4e04
    5eb0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5eb4:	f04f 0300 	mov.w	r3, #0
    5eb8:	f7fd f9b0 	bl	321c <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    5ebc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5ec0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5ec4:	f240 7127 	movw	r1, #1831	; 0x727
    5ec8:	f04f 0200 	mov.w	r2, #0
    5ecc:	f7fb ff3a 	bl	1d44 <USART_ITConfig>
    5ed0:	e029      	b.n	5f26 <USART2_IRQHandler+0xa6>
		/* If this interrupt is for a receive... */
	}
	else if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
    5ed2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5ed6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5eda:	f240 5125 	movw	r1, #1317	; 0x525
    5ede:	f7fc f9bf 	bl	2260 <USART_GetITStatus>
    5ee2:	4603      	mov	r3, r0
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d01d      	beq.n	5f24 <USART2_IRQHandler+0xa4>
		/* Receive the byte from the buffer. */
		rx_msg.ch = USART_ReceiveData(USART2);
    5ee8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5eec:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5ef0:	f7fc f846 	bl	1f80 <USART_ReceiveData>
    5ef4:	4603      	mov	r3, r0
    5ef6:	b2db      	uxtb	r3, r3
    5ef8:	713b      	strb	r3, [r7, #4]

		/* Queue the received byte. */
		if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
    5efa:	f644 6300 	movw	r3, #19968	; 0x4e00
    5efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f02:	681b      	ldr	r3, [r3, #0]
    5f04:	4618      	mov	r0, r3
    5f06:	f107 0304 	add.w	r3, r7, #4
    5f0a:	4619      	mov	r1, r3
    5f0c:	f644 6204 	movw	r2, #19972	; 0x4e04
    5f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5f14:	f04f 0300 	mov.w	r3, #0
    5f18:	f7fd f980 	bl	321c <xQueueGenericSendFromISR>
    5f1c:	4603      	mov	r3, r0
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d101      	bne.n	5f26 <USART2_IRQHandler+0xa6>
			/* If there was an error queueing the received byte,
			 * freeze. */
			while(1);
    5f22:	e7fe      	b.n	5f22 <USART2_IRQHandler+0xa2>
	}
	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
    5f24:	e7fe      	b.n	5f24 <USART2_IRQHandler+0xa4>
	}

	if (xHigherPriorityTaskWoken) {
    5f26:	f644 6304 	movw	r3, #19972	; 0x4e04
    5f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d001      	beq.n	5f38 <USART2_IRQHandler+0xb8>
		taskYIELD();
    5f34:	f7fe fe34 	bl	4ba0 <vPortYieldFromISR>
	}
}
    5f38:	f107 0708 	add.w	r7, r7, #8
    5f3c:	46bd      	mov	sp, r7
    5f3e:	bd80      	pop	{r7, pc}

00005f40 <send_byte>:

void send_byte(char ch)
{
    5f40:	b580      	push	{r7, lr}
    5f42:	b082      	sub	sp, #8
    5f44:	af00      	add	r7, sp, #0
    5f46:	4603      	mov	r3, r0
    5f48:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
    5f4a:	bf00      	nop
    5f4c:	f644 53fc 	movw	r3, #19964	; 0x4dfc
    5f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f54:	681b      	ldr	r3, [r3, #0]
    5f56:	4618      	mov	r0, r3
    5f58:	f04f 0100 	mov.w	r1, #0
    5f5c:	f04f 32ff 	mov.w	r2, #4294967295
    5f60:	f04f 0300 	mov.w	r3, #0
    5f64:	f7fd f9a2 	bl	32ac <xQueueGenericReceive>
    5f68:	4603      	mov	r3, r0
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d0ee      	beq.n	5f4c <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	
	USART_SendData(USART2, ch);
    5f6e:	79fb      	ldrb	r3, [r7, #7]
    5f70:	b29b      	uxth	r3, r3
    5f72:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5f76:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f7a:	4619      	mov	r1, r3
    5f7c:	f7fb ffec 	bl	1f58 <USART_SendData>
	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    5f80:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5f84:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f88:	f240 7127 	movw	r1, #1831	; 0x727
    5f8c:	f04f 0201 	mov.w	r2, #1
    5f90:	f7fb fed8 	bl	1d44 <USART_ITConfig>
}
    5f94:	f107 0708 	add.w	r7, r7, #8
    5f98:	46bd      	mov	sp, r7
    5f9a:	bd80      	pop	{r7, pc}

00005f9c <receive_byte>:

char receive_byte()
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b082      	sub	sp, #8
    5fa0:	af00      	add	r7, sp, #0
	serial_ch_msg msg;

	/* Wait for a byte to be queued by the receive interrupts handler. */
	while (!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
    5fa2:	bf00      	nop
    5fa4:	f644 6300 	movw	r3, #19968	; 0x4e00
    5fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	4618      	mov	r0, r3
    5fb0:	f107 0304 	add.w	r3, r7, #4
    5fb4:	4619      	mov	r1, r3
    5fb6:	f04f 32ff 	mov.w	r2, #4294967295
    5fba:	f04f 0300 	mov.w	r3, #0
    5fbe:	f7fd f975 	bl	32ac <xQueueGenericReceive>
    5fc2:	4603      	mov	r3, r0
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d0ed      	beq.n	5fa4 <receive_byte+0x8>

	return msg.ch;
    5fc8:	793b      	ldrb	r3, [r7, #4]
}
    5fca:	4618      	mov	r0, r3
    5fcc:	f107 0708 	add.w	r7, r7, #8
    5fd0:	46bd      	mov	sp, r7
    5fd2:	bd80      	pop	{r7, pc}

00005fd4 <main>:

int main()
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b084      	sub	sp, #16
    5fd8:	af04      	add	r7, sp, #16
	init_rs232();
    5fda:	f7fe ff61 	bl	4ea0 <init_rs232>
	enable_rs232_interrupts();
    5fde:	f7fe ffb7 	bl	4f50 <enable_rs232_interrupts>
	enable_rs232();
    5fe2:	f7fe ffdf 	bl	4fa4 <enable_rs232>
	
	fs_init();
    5fe6:	f7ff f963 	bl	52b0 <fs_init>
	fio_init();
    5fea:	f7ff fa77 	bl	54dc <fio_init>
	
	register_romfs("romfs", &_sromfs);
    5fee:	f246 1054 	movw	r0, #24916	; 0x6154
    5ff2:	f2c0 0000 	movt	r0, #0
    5ff6:	f246 1164 	movw	r1, #24932	; 0x6164
    5ffa:	f2c0 0100 	movt	r1, #0
    5ffe:	f7ff f90f 	bl	5220 <register_romfs>
	
	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	vSemaphoreCreateBinary(serial_tx_wait_sem);
    6002:	f04f 0001 	mov.w	r0, #1
    6006:	f04f 0100 	mov.w	r1, #0
    600a:	f04f 0203 	mov.w	r2, #3
    600e:	f7fc ffd1 	bl	2fb4 <xQueueGenericCreate>
    6012:	4602      	mov	r2, r0
    6014:	f644 53fc 	movw	r3, #19964	; 0x4dfc
    6018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601c:	601a      	str	r2, [r3, #0]
    601e:	f644 53fc 	movw	r3, #19964	; 0x4dfc
    6022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6026:	681b      	ldr	r3, [r3, #0]
    6028:	2b00      	cmp	r3, #0
    602a:	d00d      	beq.n	6048 <main+0x74>
    602c:	f644 53fc 	movw	r3, #19964	; 0x4dfc
    6030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	4618      	mov	r0, r3
    6038:	f04f 0100 	mov.w	r1, #0
    603c:	f04f 0200 	mov.w	r2, #0
    6040:	f04f 0300 	mov.w	r3, #0
    6044:	f7fd f85a 	bl	30fc <xQueueGenericSend>
	serial_rx_queue = xQueueCreate(1, sizeof(serial_ch_msg));
    6048:	f04f 0001 	mov.w	r0, #1
    604c:	f04f 0101 	mov.w	r1, #1
    6050:	f04f 0200 	mov.w	r2, #0
    6054:	f7fc ffae 	bl	2fb4 <xQueueGenericCreate>
    6058:	4602      	mov	r2, r0
    605a:	f644 6300 	movw	r3, #19968	; 0x4e00
    605e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6062:	601a      	str	r2, [r3, #0]


	/* Shell task. */
	xTaskCreate(shell,
    6064:	f04f 0302 	mov.w	r3, #2
    6068:	9300      	str	r3, [sp, #0]
    606a:	f04f 0300 	mov.w	r3, #0
    606e:	9301      	str	r3, [sp, #4]
    6070:	f04f 0300 	mov.w	r3, #0
    6074:	9302      	str	r3, [sp, #8]
    6076:	f04f 0300 	mov.w	r3, #0
    607a:	9303      	str	r3, [sp, #12]
    607c:	f240 1049 	movw	r0, #329	; 0x149
    6080:	f2c0 0000 	movt	r0, #0
    6084:	f246 115c 	movw	r1, #24924	; 0x615c
    6088:	f2c0 0100 	movt	r1, #0
    608c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6090:	f04f 0300 	mov.w	r3, #0
    6094:	f7fd fb78 	bl	3788 <xTaskGenericCreate>
	            (signed portCHAR *) "Shell",
	            512 /* stack size */, NULL,
	            tskIDLE_PRIORITY + 2, NULL);
	/* Start running the tasks. */
	vTaskStartScheduler();
    6098:	f7fd ff2c 	bl	3ef4 <vTaskStartScheduler>

	return 0;
    609c:	f04f 0300 	mov.w	r3, #0
}
    60a0:	4618      	mov	r0, r3
    60a2:	46bd      	mov	sp, r7
    60a4:	bd80      	pop	{r7, pc}
    60a6:	bf00      	nop

000060a8 <vApplicationTickHook>:

void vApplicationTickHook()
{
    60a8:	b480      	push	{r7}
    60aa:	af00      	add	r7, sp, #0
}
    60ac:	46bd      	mov	sp, r7
    60ae:	bc80      	pop	{r7}
    60b0:	4770      	bx	lr
    60b2:	bf00      	nop

000060b4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    60b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    60b6:	f000 b804 	b.w	60c2 <LoopCopyDataInit>

000060ba <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    60ba:	4b0c      	ldr	r3, [pc, #48]	; (60ec <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    60bc:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    60be:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    60c0:	3104      	adds	r1, #4

000060c2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    60c2:	480b      	ldr	r0, [pc, #44]	; (60f0 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    60c4:	4b0b      	ldr	r3, [pc, #44]	; (60f4 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    60c6:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    60c8:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    60ca:	f4ff aff6 	bcc.w	60ba <CopyDataInit>
	ldr	r2, =_sbss
    60ce:	4a0a      	ldr	r2, [pc, #40]	; (60f8 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    60d0:	f000 b803 	b.w	60da <LoopFillZerobss>

000060d4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    60d4:	2300      	movs	r3, #0
	str	r3, [r2], #4
    60d6:	f842 3b04 	str.w	r3, [r2], #4

000060da <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    60da:	4b08      	ldr	r3, [pc, #32]	; (60fc <LoopFillZerobss+0x22>)
	cmp	r2, r3
    60dc:	429a      	cmp	r2, r3
	bcc	FillZerobss
    60de:	f4ff aff9 	bcc.w	60d4 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    60e2:	f7fa fa0d 	bl	500 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    60e6:	f7ff ff75 	bl	5fd4 <main>
	bx	lr    
    60ea:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    60ec:	00006617 	.word	0x00006617
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    60f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    60f4:	20000038 	.word	0x20000038
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    60f8:	20000040 	.word	0x20000040
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    60fc:	20004e08 	.word	0x20004e08

00006100 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6100:	f7ff bffe 	b.w	6100 <ADC1_2_IRQHandler>

00006104 <.LC0>:
    6104:	6568530d 	.word	0x6568530d
    6108:	3e3e6c6c 	.word	0x3e3e6c6c
    610c:	00000000 	.word	0x00000000

00006110 <.LC0>:
    6110:	454c4449 	.word	0x454c4449
    6114:	00000000 	.word	0x00000000

00006118 <ulKernelPriority>:
    6118:	0000007f                                ....

0000611c <.LC0>:
    611c:	69676572 	.word	0x69676572
    6120:	72657473 	.word	0x72657473
    6124:	2873665f 	.word	0x2873665f
    6128:	22732522 	.word	0x22732522
    612c:	7025202c 	.word	0x7025202c
    6130:	7025202c 	.word	0x7025202c
    6134:	000a0d29 	.word	0x000a0d29

00006138 <.LC0>:
    6138:	69676552 	.word	0x69676552
    613c:	72657473 	.word	0x72657473
    6140:	20676e69 	.word	0x20676e69
    6144:	66766564 	.word	0x66766564
    6148:	0a0d2e73 	.word	0x0a0d2e73
    614c:	00000000 	.word	0x00000000

00006150 <.LC1>:
    6150:	00766564 	.word	0x00766564

00006154 <.LC0>:
    6154:	666d6f72 	.word	0x666d6f72
    6158:	00000073 	.word	0x00000073

0000615c <.LC1>:
    615c:	6c656853 	.word	0x6c656853
    6160:	0000006c 	.word	0x0000006c

00006164 <_binary_test_romfs_bin_start>:
    6164:	62fc8088 	.word	0x62fc8088
    6168:	000002fa 	.word	0x000002fa
    616c:	6d74683c 	.word	0x6d74683c
    6170:	3c0a3e6c 	.word	0x3c0a3e6c
    6174:	64616568 	.word	0x64616568
    6178:	69743c3e 	.word	0x69743c3e
    617c:	3e656c74 	.word	0x3e656c74
    6180:	65626d45 	.word	0x65626d45
    6184:	64656464 	.word	0x64656464
    6188:	73795320 	.word	0x73795320
    618c:	206d6574 	.word	0x206d6574
    6190:	7463654c 	.word	0x7463654c
    6194:	20657275 	.word	0x20657275
    6198:	4e206e69 	.word	0x4e206e69
    619c:	20554b43 	.word	0x20554b43
    61a0:	32313032 	.word	0x32313032
    61a4:	69742f3c 	.word	0x69742f3c
    61a8:	3e656c74 	.word	0x3e656c74
    61ac:	65682f3c 	.word	0x65682f3c
    61b0:	0a3e6461 	.word	0x0a3e6461
    61b4:	646f623c 	.word	0x646f623c
    61b8:	67622079 	.word	0x67622079
    61bc:	6f6c6f63 	.word	0x6f6c6f63
    61c0:	77223d72 	.word	0x77223d72
    61c4:	65746968 	.word	0x65746968
    61c8:	65742022 	.word	0x65742022
    61cc:	223d7478 	.word	0x223d7478
    61d0:	63616c62 	.word	0x63616c62
    61d4:	0a3e226b 	.word	0x0a3e226b
    61d8:	2020200a 	.word	0x2020200a
    61dc:	61743c20 	.word	0x61743c20
    61e0:	20656c62 	.word	0x20656c62
    61e4:	74646977 	.word	0x74646977
    61e8:	31223d68 	.word	0x31223d68
    61ec:	22253030 	.word	0x22253030
    61f0:	20200a3e 	.word	0x20200a3e
    61f4:	20202020 	.word	0x20202020
    61f8:	2072743c 	.word	0x2072743c
    61fc:	696c6176 	.word	0x696c6176
    6200:	223d6e67 	.word	0x223d6e67
    6204:	22706f74 	.word	0x22706f74
    6208:	64743c3e 	.word	0x64743c3e
    620c:	64697720 	.word	0x64697720
    6210:	223d6874 	.word	0x223d6874
    6214:	3e223038 	.word	0x3e223038
    6218:	0a202009 	.word	0x0a202009
    621c:	742f3c09 	.word	0x742f3c09
    6220:	743c3e64 	.word	0x743c3e64
    6224:	69772064 	.word	0x69772064
    6228:	3d687464 	.word	0x3d687464
    622c:	30303522 	.word	0x30303522
    6230:	20093e22 	.word	0x20093e22
    6234:	20090a20 	.word	0x20090a20
    6238:	31683c20 	.word	0x31683c20
    623c:	626d453e 	.word	0x626d453e
    6240:	65646465 	.word	0x65646465
    6244:	682f3c64 	.word	0x682f3c64
    6248:	090a3e31 	.word	0x090a3e31
    624c:	703c2020 	.word	0x703c2020
    6250:	20090a3e 	.word	0x20090a3e
    6254:	54202020 	.word	0x54202020
    6258:	77206568 	.word	0x77206568
    625c:	70206265 	.word	0x70206265
    6260:	20656761 	.word	0x20656761
    6264:	20756f79 	.word	0x20756f79
    6268:	20657261 	.word	0x20657261
    626c:	63746177 	.word	0x63746177
    6270:	676e6968 	.word	0x676e6968
    6274:	73617720 	.word	0x73617720
    6278:	72657320 	.word	0x72657320
    627c:	20646576 	.word	0x20646576
    6280:	61207962 	.word	0x61207962
    6284:	6d697320 	.word	0x6d697320
    6288:	20656c70 	.word	0x20656c70
    628c:	0a626577 	.word	0x0a626577
    6290:	20202009 	.word	0x20202009
    6294:	72657320 	.word	0x72657320
    6298:	20726576 	.word	0x20726576
    629c:	6e6e7572 	.word	0x6e6e7572
    62a0:	20676e69 	.word	0x20676e69
    62a4:	74206e6f 	.word	0x74206e6f
    62a8:	6f20706f 	.word	0x6f20706f
    62ac:	68742066 	.word	0x68742066
    62b0:	696c2065 	.word	0x696c2065
    62b4:	77746867 	.word	0x77746867
    62b8:	68676965 	.word	0x68676965
    62bc:	43542074 	.word	0x43542074
    62c0:	50492f50 	.word	0x50492f50
    62c4:	61747320 	.word	0x61747320
    62c8:	3c206b63 	.word	0x3c206b63
    62cc:	20090a61 	.word	0x20090a61
    62d0:	68202020 	.word	0x68202020
    62d4:	3d666572 	.word	0x3d666572
    62d8:	74746822 	.word	0x74746822
    62dc:	2f2f3a70 	.word	0x2f2f3a70
    62e0:	2e777777 	.word	0x2e777777
    62e4:	73636973 	.word	0x73636973
    62e8:	2f65732e 	.word	0x2f65732e
    62ec:	6164617e 	.word	0x6164617e
    62f0:	776c2f6d 	.word	0x776c2f6d
    62f4:	222f7069 	.word	0x222f7069
    62f8:	49776c3e 	.word	0x49776c3e
    62fc:	612f3c50 	.word	0x612f3c50
    6300:	090a2e3e 	.word	0x090a2e3e
    6304:	2f3c2020 	.word	0x2f3c2020
    6308:	090a3e70 	.word	0x090a3e70
    630c:	703c2020 	.word	0x703c2020
    6310:	20090a3e 	.word	0x20090a3e
    6314:	54202020 	.word	0x54202020
    6318:	66206568 	.word	0x66206568
    631c:	7375636f 	.word	0x7375636f
    6320:	20666f20 	.word	0x20666f20
    6324:	20656874 	.word	0x20656874
    6328:	5049776c 	.word	0x5049776c
    632c:	50435420 	.word	0x50435420
    6330:	2050492f 	.word	0x2050492f
    6334:	6c706d69 	.word	0x6c706d69
    6338:	6e656d65 	.word	0x6e656d65
    633c:	69746174 	.word	0x69746174
    6340:	69206e6f 	.word	0x69206e6f
    6344:	6f742073 	.word	0x6f742073
    6348:	64657220 	.word	0x64657220
    634c:	0a656375 	.word	0x0a656375
    6350:	20202009 	.word	0x20202009
    6354:	65687420 	.word	0x65687420
    6358:	4d415220 	.word	0x4d415220
    635c:	61737520 	.word	0x61737520
    6360:	77206567 	.word	0x77206567
    6364:	656c6968 	.word	0x656c6968
    6368:	69747320 	.word	0x69747320
    636c:	68206c6c 	.word	0x68206c6c
    6370:	6e697661 	.word	0x6e697661
    6374:	20612067 	.word	0x20612067
    6378:	6c6c7566 	.word	0x6c6c7566
    637c:	61637320 	.word	0x61637320
    6380:	5420656c 	.word	0x5420656c
    6384:	202e5043 	.word	0x202e5043
    6388:	73696854 	.word	0x73696854
    638c:	2020090a 	.word	0x2020090a
    6390:	616d2020 	.word	0x616d2020
    6394:	2073656b 	.word	0x2073656b
    6398:	5049776c 	.word	0x5049776c
    639c:	69757320 	.word	0x69757320
    63a0:	6c626174 	.word	0x6c626174
    63a4:	6f662065 	.word	0x6f662065
    63a8:	73752072 	.word	0x73752072
    63ac:	6e692065 	.word	0x6e692065
    63b0:	626d6520 	.word	0x626d6520
    63b4:	65646465 	.word	0x65646465
    63b8:	79732064 	.word	0x79732064
    63bc:	6d657473 	.word	0x6d657473
    63c0:	69772073 	.word	0x69772073
    63c4:	74206874 	.word	0x74206874
    63c8:	0a736e65 	.word	0x0a736e65
    63cc:	20202009 	.word	0x20202009
    63d0:	20666f20 	.word	0x20666f20
    63d4:	6f6c696b 	.word	0x6f6c696b
    63d8:	65747962 	.word	0x65747962
    63dc:	666f2073 	.word	0x666f2073
    63e0:	65726620 	.word	0x65726620
    63e4:	41522065 	.word	0x41522065
    63e8:	6e61204d 	.word	0x6e61204d
    63ec:	6f722064 	.word	0x6f722064
    63f0:	66206d6f 	.word	0x66206d6f
    63f4:	6120726f 	.word	0x6120726f
    63f8:	6e756f72 	.word	0x6e756f72
    63fc:	30342064 	.word	0x30342064
    6400:	6c696b20 	.word	0x6c696b20
    6404:	7479626f 	.word	0x7479626f
    6408:	090a7365 	.word	0x090a7365
    640c:	20202020 	.word	0x20202020
    6410:	6320666f 	.word	0x6320666f
    6414:	2065646f 	.word	0x2065646f
    6418:	2e4d4f52 	.word	0x2e4d4f52
    641c:	2020090a 	.word	0x2020090a
    6420:	3e702f3c 	.word	0x3e702f3c
    6424:	2f3c090a 	.word	0x2f3c090a
    6428:	3c3e6474 	.word	0x3c3e6474
    642c:	0a3e6474 	.word	0x0a3e6474
    6430:	26202009 	.word	0x26202009
    6434:	7073626e 	.word	0x7073626e
    6438:	3c090a3b 	.word	0x3c090a3b
    643c:	3e64742f 	.word	0x3e64742f
    6440:	72742f3c 	.word	0x72742f3c
    6444:	20200a3e 	.word	0x20200a3e
    6448:	20202020 	.word	0x20202020
    644c:	61742f3c 	.word	0x61742f3c
    6450:	3e656c62 	.word	0x3e656c62
    6454:	622f3c0a 	.word	0x622f3c0a
    6458:	3e79646f 	.word	0x3e79646f
    645c:	682f3c0a 	.word	0x682f3c0a
    6460:	3e6c6d74 	.word	0x3e6c6d74
    6464:	00a60a0a 	.word	0x00a60a0a
    6468:	018d7994 	.word	0x018d7994
    646c:	683c0000 	.word	0x683c0000
    6470:	3e6c6d74 	.word	0x3e6c6d74
    6474:	65683c0a 	.word	0x65683c0a
    6478:	3c3e6461 	.word	0x3c3e6461
    647c:	6c746974 	.word	0x6c746974
    6480:	6d453e65 	.word	0x6d453e65
    6484:	64646562 	.word	0x64646562
    6488:	2f3c6465 	.word	0x2f3c6465
    648c:	6c746974 	.word	0x6c746974
    6490:	2f3c3e65 	.word	0x2f3c3e65
    6494:	64616568 	.word	0x64616568
    6498:	623c0a3e 	.word	0x623c0a3e
    649c:	2079646f 	.word	0x2079646f
    64a0:	6f636762 	.word	0x6f636762
    64a4:	3d726f6c 	.word	0x3d726f6c
    64a8:	69687722 	.word	0x69687722
    64ac:	20226574 	.word	0x20226574
    64b0:	74786574 	.word	0x74786574
    64b4:	6c62223d 	.word	0x6c62223d
    64b8:	226b6361 	.word	0x226b6361
    64bc:	200a0a3e 	.word	0x200a0a3e
    64c0:	3c202020 	.word	0x3c202020
    64c4:	6c626174 	.word	0x6c626174
    64c8:	69772065 	.word	0x69772065
    64cc:	3d687464 	.word	0x3d687464
    64d0:	30303122 	.word	0x30303122
    64d4:	0a3e2225 	.word	0x0a3e2225
    64d8:	20202020 	.word	0x20202020
    64dc:	743c2020 	.word	0x743c2020
    64e0:	61762072 	.word	0x61762072
    64e4:	6e67696c 	.word	0x6e67696c
    64e8:	6f74223d 	.word	0x6f74223d
    64ec:	3c3e2270 	.word	0x3c3e2270
    64f0:	77206474 	.word	0x77206474
    64f4:	68746469 	.word	0x68746469
    64f8:	3038223d 	.word	0x3038223d
    64fc:	20093e22 	.word	0x20093e22
    6500:	3c090a20 	.word	0x3c090a20
    6504:	3e64742f 	.word	0x3e64742f
    6508:	2064743c 	.word	0x2064743c
    650c:	74646977 	.word	0x74646977
    6510:	35223d68 	.word	0x35223d68
    6514:	3e223030 	.word	0x3e223030
    6518:	0a202009 	.word	0x0a202009
    651c:	3c202009 	.word	0x3c202009
    6520:	4c3e3168 	.word	0x4c3e3168
    6524:	74686769 	.word	0x74686769
    6528:	67696577 	.word	0x67696577
    652c:	77207468 	.word	0x77207468
    6530:	73206265 	.word	0x73206265
    6534:	65767265 	.word	0x65767265
    6538:	682f3c72 	.word	0x682f3c72
    653c:	090a3e31 	.word	0x090a3e31
    6540:	683c2020 	.word	0x683c2020
    6544:	30343e32 	.word	0x30343e32
    6548:	202d2034 	.word	0x202d2034
    654c:	65676150 	.word	0x65676150
    6550:	746f6e20 	.word	0x746f6e20
    6554:	756f6620 	.word	0x756f6620
    6558:	2f3c646e 	.word	0x2f3c646e
    655c:	0a3e3268 	.word	0x0a3e3268
    6560:	3c202009 	.word	0x3c202009
    6564:	090a3e70 	.word	0x090a3e70
    6568:	20202020 	.word	0x20202020
    656c:	72726f53 	.word	0x72726f53
    6570:	74202c79 	.word	0x74202c79
    6574:	70206568 	.word	0x70206568
    6578:	20656761 	.word	0x20656761
    657c:	20756f79 	.word	0x20756f79
    6580:	20657261 	.word	0x20657261
    6584:	75716572 	.word	0x75716572
    6588:	69747365 	.word	0x69747365
    658c:	7720676e 	.word	0x7720676e
    6590:	6e207361 	.word	0x6e207361
    6594:	6620746f 	.word	0x6620746f
    6598:	646e756f 	.word	0x646e756f
    659c:	206e6f20 	.word	0x206e6f20
    65a0:	73696874 	.word	0x73696874
    65a4:	2020090a 	.word	0x2020090a
    65a8:	65732020 	.word	0x65732020
    65ac:	72657672 	.word	0x72657672
    65b0:	090a202e 	.word	0x090a202e
    65b4:	2f3c2020 	.word	0x2f3c2020
    65b8:	090a3e70 	.word	0x090a3e70
    65bc:	64742f3c 	.word	0x64742f3c
    65c0:	64743c3e 	.word	0x64743c3e
    65c4:	20090a3e 	.word	0x20090a3e
    65c8:	626e2620 	.word	0x626e2620
    65cc:	0a3b7073 	.word	0x0a3b7073
    65d0:	742f3c09 	.word	0x742f3c09
    65d4:	2f3c3e64 	.word	0x2f3c3e64
    65d8:	0a3e7274 	.word	0x0a3e7274
    65dc:	20202020 	.word	0x20202020
    65e0:	2f3c2020 	.word	0x2f3c2020
    65e4:	6c626174 	.word	0x6c626174
    65e8:	3c0a3e65 	.word	0x3c0a3e65
    65ec:	646f622f 	.word	0x646f622f
    65f0:	3c0a3e79 	.word	0x3c0a3e79
    65f4:	6d74682f 	.word	0x6d74682f
    65f8:	250a3e6c 	.word	0x250a3e6c
    65fc:	0ce06438 	.word	0x0ce06438
    6600:	52000000 	.word	0x52000000
    6604:	73666d6f 	.word	0x73666d6f
    6608:	73655420 	.word	0x73655420
    660c:	000a2174 	.word	0x000a2174
    6610:	00000000 	.word	0x00000000
    6614:	0000      	.short	0x0000
	...
